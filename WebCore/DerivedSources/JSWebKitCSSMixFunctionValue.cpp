/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(CSS_SHADERS)

#include "JSWebKitCSSMixFunctionValue.h"

#include "WebKitCSSMixFunctionValue.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSWebKitCSSMixFunctionValueTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMixFunctionValueConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWebKitCSSMixFunctionValueTable = { 2, 1, JSWebKitCSSMixFunctionValueTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSWebKitCSSMixFunctionValueConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWebKitCSSMixFunctionValueConstructorTable = { 1, 0, JSWebKitCSSMixFunctionValueConstructorTableValues, 0 };
const ClassInfo JSWebKitCSSMixFunctionValueConstructor::s_info = { "WebKitCSSMixFunctionValueConstructor", &Base::s_info, &JSWebKitCSSMixFunctionValueConstructorTable, 0, CREATE_METHOD_TABLE(JSWebKitCSSMixFunctionValueConstructor) };

JSWebKitCSSMixFunctionValueConstructor::JSWebKitCSSMixFunctionValueConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSWebKitCSSMixFunctionValueConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSWebKitCSSMixFunctionValuePrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSWebKitCSSMixFunctionValueConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSWebKitCSSMixFunctionValueConstructor, JSDOMWrapper>(exec, JSWebKitCSSMixFunctionValueConstructorTable, jsCast<JSWebKitCSSMixFunctionValueConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSWebKitCSSMixFunctionValuePrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWebKitCSSMixFunctionValuePrototypeTable = { 1, 0, JSWebKitCSSMixFunctionValuePrototypeTableValues, 0 };
const ClassInfo JSWebKitCSSMixFunctionValuePrototype::s_info = { "WebKitCSSMixFunctionValuePrototype", &Base::s_info, &JSWebKitCSSMixFunctionValuePrototypeTable, 0, CREATE_METHOD_TABLE(JSWebKitCSSMixFunctionValuePrototype) };

JSObject* JSWebKitCSSMixFunctionValuePrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebKitCSSMixFunctionValue>(vm, globalObject);
}

const ClassInfo JSWebKitCSSMixFunctionValue::s_info = { "WebKitCSSMixFunctionValue", &Base::s_info, &JSWebKitCSSMixFunctionValueTable, 0 , CREATE_METHOD_TABLE(JSWebKitCSSMixFunctionValue) };

JSWebKitCSSMixFunctionValue::JSWebKitCSSMixFunctionValue(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<WebKitCSSMixFunctionValue> impl)
    : JSCSSValueList(structure, globalObject, impl)
{
}

void JSWebKitCSSMixFunctionValue::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSWebKitCSSMixFunctionValue::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSWebKitCSSMixFunctionValuePrototype::create(vm, globalObject, JSWebKitCSSMixFunctionValuePrototype::createStructure(vm, globalObject, JSCSSValueListPrototype::self(vm, globalObject)));
}

bool JSWebKitCSSMixFunctionValue::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSWebKitCSSMixFunctionValue* thisObject = jsCast<JSWebKitCSSMixFunctionValue*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSWebKitCSSMixFunctionValue, Base>(exec, JSWebKitCSSMixFunctionValueTable, thisObject, propertyName, slot);
}

JSValue jsWebKitCSSMixFunctionValueConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWebKitCSSMixFunctionValue* domObject = jsCast<JSWebKitCSSMixFunctionValue*>(asObject(slotBase));
    return JSWebKitCSSMixFunctionValue::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSWebKitCSSMixFunctionValue::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebKitCSSMixFunctionValueConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}


}

#endif // ENABLE(CSS_SHADERS)
