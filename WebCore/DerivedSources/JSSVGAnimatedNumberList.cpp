/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SVG)

#include "JSSVGAnimatedNumberList.h"

#include "JSSVGNumberList.h"
#include "SVGNumberList.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSSVGAnimatedNumberListTableValues[] =
{
    { "baseVal", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAnimatedNumberListBaseVal), (intptr_t)0 },
    { "animVal", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAnimatedNumberListAnimVal), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAnimatedNumberListConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSVGAnimatedNumberListTable = { 8, 7, JSSVGAnimatedNumberListTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSSVGAnimatedNumberListConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSVGAnimatedNumberListConstructorTable = { 1, 0, JSSVGAnimatedNumberListConstructorTableValues, 0 };
const ClassInfo JSSVGAnimatedNumberListConstructor::s_info = { "SVGAnimatedNumberListConstructor", &Base::s_info, &JSSVGAnimatedNumberListConstructorTable, 0, CREATE_METHOD_TABLE(JSSVGAnimatedNumberListConstructor) };

JSSVGAnimatedNumberListConstructor::JSSVGAnimatedNumberListConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSSVGAnimatedNumberListConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSSVGAnimatedNumberListPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSSVGAnimatedNumberListConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGAnimatedNumberListConstructor, JSDOMWrapper>(exec, JSSVGAnimatedNumberListConstructorTable, jsCast<JSSVGAnimatedNumberListConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSSVGAnimatedNumberListPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSVGAnimatedNumberListPrototypeTable = { 1, 0, JSSVGAnimatedNumberListPrototypeTableValues, 0 };
const ClassInfo JSSVGAnimatedNumberListPrototype::s_info = { "SVGAnimatedNumberListPrototype", &Base::s_info, &JSSVGAnimatedNumberListPrototypeTable, 0, CREATE_METHOD_TABLE(JSSVGAnimatedNumberListPrototype) };

JSObject* JSSVGAnimatedNumberListPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGAnimatedNumberList>(vm, globalObject);
}

const ClassInfo JSSVGAnimatedNumberList::s_info = { "SVGAnimatedNumberList", &Base::s_info, &JSSVGAnimatedNumberListTable, 0 , CREATE_METHOD_TABLE(JSSVGAnimatedNumberList) };

JSSVGAnimatedNumberList::JSSVGAnimatedNumberList(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<SVGAnimatedNumberList> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSSVGAnimatedNumberList::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSSVGAnimatedNumberList::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGAnimatedNumberListPrototype::create(vm, globalObject, JSSVGAnimatedNumberListPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSSVGAnimatedNumberList::destroy(JSC::JSCell* cell)
{
    JSSVGAnimatedNumberList* thisObject = static_cast<JSSVGAnimatedNumberList*>(cell);
    thisObject->JSSVGAnimatedNumberList::~JSSVGAnimatedNumberList();
}

JSSVGAnimatedNumberList::~JSSVGAnimatedNumberList()
{
    releaseImplIfNotNull();
}

bool JSSVGAnimatedNumberList::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSSVGAnimatedNumberList* thisObject = jsCast<JSSVGAnimatedNumberList*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSSVGAnimatedNumberList, Base>(exec, JSSVGAnimatedNumberListTable, thisObject, propertyName, slot);
}

JSValue jsSVGAnimatedNumberListBaseVal(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGAnimatedNumberList* castedThis = jsCast<JSSVGAnimatedNumberList*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGAnimatedNumberList& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(static_cast<SVGListPropertyTearOff<SVGNumberList>*>(impl.baseVal())));
    return result;
}


JSValue jsSVGAnimatedNumberListAnimVal(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGAnimatedNumberList* castedThis = jsCast<JSSVGAnimatedNumberList*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGAnimatedNumberList& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(static_cast<SVGListPropertyTearOff<SVGNumberList>*>(impl.animVal())));
    return result;
}


JSValue jsSVGAnimatedNumberListConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGAnimatedNumberList* domObject = jsCast<JSSVGAnimatedNumberList*>(asObject(slotBase));
    return JSSVGAnimatedNumberList::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSSVGAnimatedNumberList::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGAnimatedNumberListConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

static inline bool isObservable(JSSVGAnimatedNumberList* jsSVGAnimatedNumberList)
{
    if (jsSVGAnimatedNumberList->hasCustomProperties())
        return true;
    return false;
}

bool JSSVGAnimatedNumberListOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSSVGAnimatedNumberList* jsSVGAnimatedNumberList = jsCast<JSSVGAnimatedNumberList*>(handle.get().asCell());
    if (!isObservable(jsSVGAnimatedNumberList))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSSVGAnimatedNumberListOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSSVGAnimatedNumberList* jsSVGAnimatedNumberList = jsCast<JSSVGAnimatedNumberList*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsSVGAnimatedNumberList->impl(), jsSVGAnimatedNumberList);
    jsSVGAnimatedNumberList->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, SVGAnimatedNumberList* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSSVGAnimatedNumberList>(exec, impl))
        return result;
    ReportMemoryCost<SVGAnimatedNumberList>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSSVGAnimatedNumberList>(exec, globalObject, impl);
}

SVGAnimatedNumberList* toSVGAnimatedNumberList(JSC::JSValue value)
{
    return value.inherits(JSSVGAnimatedNumberList::info()) ? &jsCast<JSSVGAnimatedNumberList*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(SVG)
