/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSSourceInfo.h"

#include "SourceInfo.h"
#include "URL.h"
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSSourceInfoTableValues[] =
{
    { "sourceId", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceInfoSourceId), (intptr_t)0 },
    { "kind", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceInfoKind), (intptr_t)0 },
    { "label", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceInfoLabel), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSourceInfoTable = { 8, 7, JSSourceInfoTableValues, 0 };
/* Hash table for prototype */

static const HashTableValue JSSourceInfoPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSourceInfoPrototypeTable = { 1, 0, JSSourceInfoPrototypeTableValues, 0 };
const ClassInfo JSSourceInfoPrototype::s_info = { "SourceInfoPrototype", &Base::s_info, &JSSourceInfoPrototypeTable, 0, CREATE_METHOD_TABLE(JSSourceInfoPrototype) };

JSObject* JSSourceInfoPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSourceInfo>(vm, globalObject);
}

const ClassInfo JSSourceInfo::s_info = { "SourceInfo", &Base::s_info, &JSSourceInfoTable, 0 , CREATE_METHOD_TABLE(JSSourceInfo) };

JSSourceInfo::JSSourceInfo(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<SourceInfo> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSSourceInfo::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSSourceInfo::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSourceInfoPrototype::create(vm, globalObject, JSSourceInfoPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSSourceInfo::destroy(JSC::JSCell* cell)
{
    JSSourceInfo* thisObject = static_cast<JSSourceInfo*>(cell);
    thisObject->JSSourceInfo::~JSSourceInfo();
}

JSSourceInfo::~JSSourceInfo()
{
    releaseImplIfNotNull();
}

bool JSSourceInfo::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSSourceInfo* thisObject = jsCast<JSSourceInfo*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSSourceInfo, Base>(exec, JSSourceInfoTable, thisObject, propertyName, slot);
}

JSValue jsSourceInfoSourceId(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSourceInfo* castedThis = jsCast<JSSourceInfo*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SourceInfo& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.sourceId());
    return result;
}


JSValue jsSourceInfoKind(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSourceInfo* castedThis = jsCast<JSSourceInfo*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SourceInfo& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.kind());
    return result;
}


JSValue jsSourceInfoLabel(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSourceInfo* castedThis = jsCast<JSSourceInfo*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SourceInfo& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.label());
    return result;
}


static inline bool isObservable(JSSourceInfo* jsSourceInfo)
{
    if (jsSourceInfo->hasCustomProperties())
        return true;
    return false;
}

bool JSSourceInfoOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSSourceInfo* jsSourceInfo = jsCast<JSSourceInfo*>(handle.get().asCell());
    if (!isObservable(jsSourceInfo))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSSourceInfoOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSSourceInfo* jsSourceInfo = jsCast<JSSourceInfo*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsSourceInfo->impl(), jsSourceInfo);
    jsSourceInfo->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, SourceInfo* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSSourceInfo>(exec, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to SourceInfo.
    COMPILE_ASSERT(!__is_polymorphic(SourceInfo), SourceInfo_is_polymorphic_but_idl_claims_not_to_be);
#endif
    ReportMemoryCost<SourceInfo>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSSourceInfo>(exec, globalObject, impl);
}

SourceInfo* toSourceInfo(JSC::JSValue value)
{
    return value.inherits(JSSourceInfo::info()) ? &jsCast<JSSourceInfo*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
