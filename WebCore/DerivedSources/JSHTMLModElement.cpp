/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLModElement.h"

#include "HTMLModElement.h"
#include "HTMLNames.h"
#include "URL.h"
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSHTMLModElementTableValues[] =
{
    { "cite", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLModElementCite), (intptr_t)setJSHTMLModElementCite },
    { "dateTime", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLModElementDateTime), (intptr_t)setJSHTMLModElementDateTime },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLModElementConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLModElementTable = { 10, 7, JSHTMLModElementTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSHTMLModElementConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLModElementConstructorTable = { 1, 0, JSHTMLModElementConstructorTableValues, 0 };
const ClassInfo JSHTMLModElementConstructor::s_info = { "HTMLModElementConstructor", &Base::s_info, &JSHTMLModElementConstructorTable, 0, CREATE_METHOD_TABLE(JSHTMLModElementConstructor) };

JSHTMLModElementConstructor::JSHTMLModElementConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSHTMLModElementConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSHTMLModElementPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSHTMLModElementConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSHTMLModElementConstructor, JSDOMWrapper>(exec, JSHTMLModElementConstructorTable, jsCast<JSHTMLModElementConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSHTMLModElementPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLModElementPrototypeTable = { 1, 0, JSHTMLModElementPrototypeTableValues, 0 };
const ClassInfo JSHTMLModElementPrototype::s_info = { "HTMLModElementPrototype", &Base::s_info, &JSHTMLModElementPrototypeTable, 0, CREATE_METHOD_TABLE(JSHTMLModElementPrototype) };

JSObject* JSHTMLModElementPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLModElement>(vm, globalObject);
}

const ClassInfo JSHTMLModElement::s_info = { "HTMLModElement", &Base::s_info, &JSHTMLModElementTable, 0 , CREATE_METHOD_TABLE(JSHTMLModElement) };

JSHTMLModElement::JSHTMLModElement(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<HTMLModElement> impl)
    : JSHTMLElement(structure, globalObject, impl)
{
}

void JSHTMLModElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSHTMLModElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLModElementPrototype::create(vm, globalObject, JSHTMLModElementPrototype::createStructure(vm, globalObject, JSHTMLElementPrototype::self(vm, globalObject)));
}

bool JSHTMLModElement::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSHTMLModElement* thisObject = jsCast<JSHTMLModElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSHTMLModElement, Base>(exec, JSHTMLModElementTable, thisObject, propertyName, slot);
}

JSValue jsHTMLModElementCite(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLModElement* castedThis = jsCast<JSHTMLModElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLModElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.getURLAttribute(WebCore::HTMLNames::citeAttr));
    return result;
}


JSValue jsHTMLModElementDateTime(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLModElement* castedThis = jsCast<JSHTMLModElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLModElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::datetimeAttr));
    return result;
}


JSValue jsHTMLModElementConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLModElement* domObject = jsCast<JSHTMLModElement*>(asObject(slotBase));
    return JSHTMLModElement::getConstructor(exec->vm(), domObject->globalObject());
}

void JSHTMLModElement::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSHTMLModElement* thisObject = jsCast<JSHTMLModElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSHTMLModElement, Base>(exec, propertyName, value, JSHTMLModElementTable, thisObject, slot);
}

void setJSHTMLModElementCite(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLModElement* castedThis = jsCast<JSHTMLModElement*>(thisObject);
    HTMLModElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::citeAttr, nativeValue);
}


void setJSHTMLModElementDateTime(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLModElement* castedThis = jsCast<JSHTMLModElement*>(thisObject);
    HTMLModElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::datetimeAttr, nativeValue);
}


JSValue JSHTMLModElement::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLModElementConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}


}
