/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSAudioStreamTrack.h"

#include "AudioStreamTrack.h"
#include "Dictionary.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSAudioStreamTrackTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioStreamTrackConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSAudioStreamTrackTable = { 2, 1, JSAudioStreamTrackTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSAudioStreamTrackConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSAudioStreamTrackConstructorTable = { 1, 0, JSAudioStreamTrackConstructorTableValues, 0 };
EncodedJSValue JSC_HOST_CALL JSAudioStreamTrackConstructor::constructJSAudioStreamTrack(ExecState* exec)
{
    JSAudioStreamTrackConstructor* castedThis = jsCast<JSAudioStreamTrackConstructor*>(exec->callee());
    Dictionary audioConstraints(exec, exec->argument(0));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (!context)
        return throwVMError(exec, createReferenceError(exec, "AudioStreamTrack constructor associated document is unavailable"));
    RefPtr<AudioStreamTrack> object = AudioStreamTrack::create(context, audioConstraints);
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

const ClassInfo JSAudioStreamTrackConstructor::s_info = { "AudioStreamTrackConstructor", &Base::s_info, &JSAudioStreamTrackConstructorTable, 0, CREATE_METHOD_TABLE(JSAudioStreamTrackConstructor) };

JSAudioStreamTrackConstructor::JSAudioStreamTrackConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSAudioStreamTrackConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSAudioStreamTrackPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSAudioStreamTrackConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSAudioStreamTrackConstructor, JSDOMWrapper>(exec, JSAudioStreamTrackConstructorTable, jsCast<JSAudioStreamTrackConstructor*>(object), propertyName, slot);
}

ConstructType JSAudioStreamTrackConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSAudioStreamTrack;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSAudioStreamTrackPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSAudioStreamTrackPrototypeTable = { 1, 0, JSAudioStreamTrackPrototypeTableValues, 0 };
const ClassInfo JSAudioStreamTrackPrototype::s_info = { "AudioStreamTrackPrototype", &Base::s_info, &JSAudioStreamTrackPrototypeTable, 0, CREATE_METHOD_TABLE(JSAudioStreamTrackPrototype) };

JSObject* JSAudioStreamTrackPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSAudioStreamTrack>(vm, globalObject);
}

const ClassInfo JSAudioStreamTrack::s_info = { "AudioStreamTrack", &Base::s_info, &JSAudioStreamTrackTable, 0 , CREATE_METHOD_TABLE(JSAudioStreamTrack) };

JSAudioStreamTrack::JSAudioStreamTrack(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<AudioStreamTrack> impl)
    : JSMediaStreamTrack(structure, globalObject, impl)
{
}

void JSAudioStreamTrack::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSAudioStreamTrack::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSAudioStreamTrackPrototype::create(vm, globalObject, JSAudioStreamTrackPrototype::createStructure(vm, globalObject, JSMediaStreamTrackPrototype::self(vm, globalObject)));
}

bool JSAudioStreamTrack::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSAudioStreamTrack* thisObject = jsCast<JSAudioStreamTrack*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSAudioStreamTrack, Base>(exec, JSAudioStreamTrackTable, thisObject, propertyName, slot);
}

JSValue jsAudioStreamTrackConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSAudioStreamTrack* domObject = jsCast<JSAudioStreamTrack*>(asObject(slotBase));
    return JSAudioStreamTrack::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSAudioStreamTrack::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSAudioStreamTrackConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

static inline bool isObservable(JSAudioStreamTrack* jsAudioStreamTrack)
{
    if (jsAudioStreamTrack->hasCustomProperties())
        return true;
    return false;
}

bool JSAudioStreamTrackOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSAudioStreamTrack* jsAudioStreamTrack = jsCast<JSAudioStreamTrack*>(handle.get().asCell());
    if (jsAudioStreamTrack->impl().hasPendingActivity())
        return true;
    if (jsAudioStreamTrack->impl().isFiringEventListeners())
        return true;
    if (!isObservable(jsAudioStreamTrack))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSAudioStreamTrackOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSAudioStreamTrack* jsAudioStreamTrack = jsCast<JSAudioStreamTrack*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsAudioStreamTrack->impl(), jsAudioStreamTrack);
    jsAudioStreamTrack->releaseImpl();
}


}

#endif // ENABLE(MEDIA_STREAM)
