/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(BLOB)

#include "JSDOMURL.h"

#include "DOMURL.h"
#include "DOMURLMediaSource.h"
#include "ExceptionCode.h"
#include "JSBlob.h"
#include "JSDOMBinding.h"
#include "JSMediaSource.h"
#include "JSWebKitMediaSource.h"
#include "URL.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSDOMURLTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMURLConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSDOMURLTable = { 2, 1, JSDOMURLTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSDOMURLConstructorTableValues[] =
{
    { "createObjectURL", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMURLConstructorFunctionCreateObjectURL), (intptr_t)1 },
    { "revokeObjectURL", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMURLConstructorFunctionRevokeObjectURL), (intptr_t)1 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSDOMURLConstructorTable = { 2, 0, JSDOMURLConstructorTableValues, 0 };
EncodedJSValue JSC_HOST_CALL JSDOMURLConstructor::constructJSDOMURL(ExecState* exec)
{
    JSDOMURLConstructor* castedThis = jsCast<JSDOMURLConstructor*>(exec->callee());
    RefPtr<DOMURL> object = DOMURL::create();
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

static const HashTable& getJSDOMURLConstructorTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->vm(), JSDOMURLConstructorTable);
}

const ClassInfo JSDOMURLConstructor::s_info = { "URLConstructor", &Base::s_info, 0, getJSDOMURLConstructorTable, CREATE_METHOD_TABLE(JSDOMURLConstructor) };

JSDOMURLConstructor::JSDOMURLConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSDOMURLConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSDOMURLPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSDOMURLConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSDOMURLConstructor, JSDOMWrapper>(exec, getJSDOMURLConstructorTable(exec), jsCast<JSDOMURLConstructor*>(object), propertyName, slot);
}

ConstructType JSDOMURLConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSDOMURL;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSDOMURLPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSDOMURLPrototypeTable = { 8, 7, JSDOMURLPrototypeTableValues, 0 };
static const HashTable& getJSDOMURLPrototypeTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->vm(), JSDOMURLPrototypeTable);
}

const ClassInfo JSDOMURLPrototype::s_info = { "URLPrototype", &Base::s_info, 0, getJSDOMURLPrototypeTable, CREATE_METHOD_TABLE(JSDOMURLPrototype) };

JSObject* JSDOMURLPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDOMURL>(vm, globalObject);
}

bool JSDOMURLPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSDOMURLPrototype* thisObject = jsCast<JSDOMURLPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, getJSDOMURLPrototypeTable(exec), thisObject, propertyName, slot);
}

static const HashTable& getJSDOMURLTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->vm(), JSDOMURLTable);
}

const ClassInfo JSDOMURL::s_info = { "URL", &Base::s_info, 0, getJSDOMURLTable , CREATE_METHOD_TABLE(JSDOMURL) };

JSDOMURL::JSDOMURL(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<DOMURL> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSDOMURL::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSDOMURL::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDOMURLPrototype::create(vm, globalObject, JSDOMURLPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSDOMURL::destroy(JSC::JSCell* cell)
{
    JSDOMURL* thisObject = static_cast<JSDOMURL*>(cell);
    thisObject->JSDOMURL::~JSDOMURL();
}

JSDOMURL::~JSDOMURL()
{
    releaseImplIfNotNull();
}

bool JSDOMURL::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSDOMURL* thisObject = jsCast<JSDOMURL*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSDOMURL, Base>(exec, getJSDOMURLTable(exec), thisObject, propertyName, slot);
}

JSValue jsDOMURLConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDOMURL* domObject = jsCast<JSDOMURL*>(asObject(slotBase));
    return JSDOMURL::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSDOMURL::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDOMURLConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

static EncodedJSValue JSC_HOST_CALL jsDOMURLConstructorFunctionCreateObjectURL1(ExecState* exec)
{
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ScriptExecutionContext* scriptContext = jsCast<JSDOMGlobalObject*>(exec->lexicalGlobalObject())->scriptExecutionContext();
    if (!scriptContext)
        return JSValue::encode(jsUndefined());
    Blob* blob(toBlob(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsStringOrNull(exec, DOMURL::createObjectURL(scriptContext, blob));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMURLConstructorFunctionRevokeObjectURL(ExecState* exec)
{
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ScriptExecutionContext* scriptContext = jsCast<JSDOMGlobalObject*>(exec->lexicalGlobalObject())->scriptExecutionContext();
    if (!scriptContext)
        return JSValue::encode(jsUndefined());
    const String& url(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    DOMURL::revokeObjectURL(scriptContext, url);
    return JSValue::encode(jsUndefined());
}

#if ENABLE(MEDIA_SOURCE)
static EncodedJSValue JSC_HOST_CALL jsDOMURLConstructorFunctionCreateObjectURL2(ExecState* exec)
{
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ScriptExecutionContext* scriptContext = jsCast<JSDOMGlobalObject*>(exec->lexicalGlobalObject())->scriptExecutionContext();
    if (!scriptContext)
        return JSValue::encode(jsUndefined());
    MediaSource* source(toMediaSource(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsStringOrNull(exec, DOMURLMediaSource::createObjectURL(scriptContext, source));
    return JSValue::encode(result);
}

#endif

#if ENABLE(MEDIA_SOURCE)
static EncodedJSValue JSC_HOST_CALL jsDOMURLConstructorFunctionCreateObjectURL3(ExecState* exec)
{
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ScriptExecutionContext* scriptContext = jsCast<JSDOMGlobalObject*>(exec->lexicalGlobalObject())->scriptExecutionContext();
    if (!scriptContext)
        return JSValue::encode(jsUndefined());
    WebKitMediaSource* source(toWebKitMediaSource(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsStringOrNull(exec, DOMURLMediaSource::createObjectURL(scriptContext, source));
    return JSValue::encode(result);
}

#endif

EncodedJSValue JSC_HOST_CALL jsDOMURLConstructorFunctionCreateObjectURL(ExecState* exec)
{
    size_t argsCount = exec->argumentCount();
    JSValue arg0(exec->argument(0));
    if ((argsCount == 1 && (arg0.isNull() || (arg0.isObject() && asObject(arg0)->inherits(JSBlob::info())))))
        return jsDOMURLConstructorFunctionCreateObjectURL1(exec);
#if ENABLE(MEDIA_SOURCE)
    if ((argsCount == 1 && (arg0.isNull() || (arg0.isObject() && asObject(arg0)->inherits(JSMediaSource::info())))))
        return jsDOMURLConstructorFunctionCreateObjectURL2(exec);
#endif

#if ENABLE(MEDIA_SOURCE)
    if ((argsCount == 1 && (arg0.isNull() || (arg0.isObject() && asObject(arg0)->inherits(JSWebKitMediaSource::info())))))
        return jsDOMURLConstructorFunctionCreateObjectURL3(exec);
#endif

    if (argsCount < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    return throwVMTypeError(exec);
}

static inline bool isObservable(JSDOMURL* jsDOMURL)
{
    if (jsDOMURL->hasCustomProperties())
        return true;
    return false;
}

bool JSDOMURLOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSDOMURL* jsDOMURL = jsCast<JSDOMURL*>(handle.get().asCell());
    if (!isObservable(jsDOMURL))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSDOMURLOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSDOMURL* jsDOMURL = jsCast<JSDOMURL*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsDOMURL->impl(), jsDOMURL);
    jsDOMURL->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, DOMURL* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSDOMURL>(exec, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to DOMURL.
    COMPILE_ASSERT(!__is_polymorphic(DOMURL), DOMURL_is_polymorphic_but_idl_claims_not_to_be);
#endif
    ReportMemoryCost<DOMURL>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSDOMURL>(exec, globalObject, impl);
}

DOMURL* toDOMURL(JSC::JSValue value)
{
    return value.inherits(JSDOMURL::info()) ? &jsCast<JSDOMURL*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(BLOB)
