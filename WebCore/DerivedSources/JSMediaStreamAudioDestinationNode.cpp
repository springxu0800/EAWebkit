/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)

#include "JSMediaStreamAudioDestinationNode.h"

#include "JSMediaStream.h"
#include "MediaStream.h"
#include "MediaStreamAudioDestinationNode.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSMediaStreamAudioDestinationNodeTableValues[] =
{
    { "stream", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamAudioDestinationNodeStream), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamAudioDestinationNodeConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSMediaStreamAudioDestinationNodeTable = { 5, 3, JSMediaStreamAudioDestinationNodeTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSMediaStreamAudioDestinationNodeConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSMediaStreamAudioDestinationNodeConstructorTable = { 1, 0, JSMediaStreamAudioDestinationNodeConstructorTableValues, 0 };
const ClassInfo JSMediaStreamAudioDestinationNodeConstructor::s_info = { "MediaStreamAudioDestinationNodeConstructor", &Base::s_info, &JSMediaStreamAudioDestinationNodeConstructorTable, 0, CREATE_METHOD_TABLE(JSMediaStreamAudioDestinationNodeConstructor) };

JSMediaStreamAudioDestinationNodeConstructor::JSMediaStreamAudioDestinationNodeConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSMediaStreamAudioDestinationNodeConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSMediaStreamAudioDestinationNodePrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSMediaStreamAudioDestinationNodeConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSMediaStreamAudioDestinationNodeConstructor, JSDOMWrapper>(exec, JSMediaStreamAudioDestinationNodeConstructorTable, jsCast<JSMediaStreamAudioDestinationNodeConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSMediaStreamAudioDestinationNodePrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSMediaStreamAudioDestinationNodePrototypeTable = { 1, 0, JSMediaStreamAudioDestinationNodePrototypeTableValues, 0 };
const ClassInfo JSMediaStreamAudioDestinationNodePrototype::s_info = { "MediaStreamAudioDestinationNodePrototype", &Base::s_info, &JSMediaStreamAudioDestinationNodePrototypeTable, 0, CREATE_METHOD_TABLE(JSMediaStreamAudioDestinationNodePrototype) };

JSObject* JSMediaStreamAudioDestinationNodePrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaStreamAudioDestinationNode>(vm, globalObject);
}

const ClassInfo JSMediaStreamAudioDestinationNode::s_info = { "MediaStreamAudioDestinationNode", &Base::s_info, &JSMediaStreamAudioDestinationNodeTable, 0 , CREATE_METHOD_TABLE(JSMediaStreamAudioDestinationNode) };

JSMediaStreamAudioDestinationNode::JSMediaStreamAudioDestinationNode(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<MediaStreamAudioDestinationNode> impl)
    : JSAudioNode(structure, globalObject, impl)
{
}

void JSMediaStreamAudioDestinationNode::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSMediaStreamAudioDestinationNode::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMediaStreamAudioDestinationNodePrototype::create(vm, globalObject, JSMediaStreamAudioDestinationNodePrototype::createStructure(vm, globalObject, JSAudioNodePrototype::self(vm, globalObject)));
}

bool JSMediaStreamAudioDestinationNode::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSMediaStreamAudioDestinationNode* thisObject = jsCast<JSMediaStreamAudioDestinationNode*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSMediaStreamAudioDestinationNode, Base>(exec, JSMediaStreamAudioDestinationNodeTable, thisObject, propertyName, slot);
}

JSValue jsMediaStreamAudioDestinationNodeStream(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSMediaStreamAudioDestinationNode* castedThis = jsCast<JSMediaStreamAudioDestinationNode*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    MediaStreamAudioDestinationNode& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.stream()));
    return result;
}


JSValue jsMediaStreamAudioDestinationNodeConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSMediaStreamAudioDestinationNode* domObject = jsCast<JSMediaStreamAudioDestinationNode*>(asObject(slotBase));
    return JSMediaStreamAudioDestinationNode::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSMediaStreamAudioDestinationNode::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMediaStreamAudioDestinationNodeConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7MediaStreamAudioDestinationNode@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore31MediaStreamAudioDestinationNodeE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, MediaStreamAudioDestinationNode* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSMediaStreamAudioDestinationNode>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7MediaStreamAudioDestinationNode@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore31MediaStreamAudioDestinationNodeE[2];
#if COMPILER(CLANG)
    // If this fails MediaStreamAudioDestinationNode does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(MediaStreamAudioDestinationNode), MediaStreamAudioDestinationNode_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // MediaStreamAudioDestinationNode has subclasses. If MediaStreamAudioDestinationNode has subclasses that get passed
    // to toJS() we currently require MediaStreamAudioDestinationNode you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<MediaStreamAudioDestinationNode>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSMediaStreamAudioDestinationNode>(exec, globalObject, impl);
}


}

#endif // ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
