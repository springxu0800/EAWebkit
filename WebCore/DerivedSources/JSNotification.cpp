/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)

#include "JSNotification.h"

#include "Event.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "Notification.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSNotificationTableValues[] =
{
    { "onshow", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationOnshow), (intptr_t)setJSNotificationOnshow },
    { "onerror", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationOnerror), (intptr_t)setJSNotificationOnerror },
    { "onclose", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationOnclose), (intptr_t)setJSNotificationOnclose },
    { "onclick", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationOnclick), (intptr_t)setJSNotificationOnclick },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSNotificationTable = { 17, 15, JSNotificationTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSNotificationConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSNotificationConstructorTable = { 1, 0, JSNotificationConstructorTableValues, 0 };
const ClassInfo JSNotificationConstructor::s_info = { "NotificationConstructor", &Base::s_info, &JSNotificationConstructorTable, 0, CREATE_METHOD_TABLE(JSNotificationConstructor) };

JSNotificationConstructor::JSNotificationConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSNotificationConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSNotificationPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSNotificationConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSNotificationConstructor, JSDOMWrapper>(exec, JSNotificationConstructorTable, jsCast<JSNotificationConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSNotificationPrototypeTableValues[] =
{
    { "show", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsNotificationPrototypeFunctionShow), (intptr_t)0 },
    { "addEventListener", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsNotificationPrototypeFunctionAddEventListener), (intptr_t)2 },
    { "removeEventListener", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsNotificationPrototypeFunctionRemoveEventListener), (intptr_t)2 },
    { "dispatchEvent", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsNotificationPrototypeFunctionDispatchEvent), (intptr_t)1 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSNotificationPrototypeTable = { 8, 7, JSNotificationPrototypeTableValues, 0 };
const ClassInfo JSNotificationPrototype::s_info = { "NotificationPrototype", &Base::s_info, &JSNotificationPrototypeTable, 0, CREATE_METHOD_TABLE(JSNotificationPrototype) };

JSObject* JSNotificationPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSNotification>(vm, globalObject);
}

bool JSNotificationPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSNotificationPrototype* thisObject = jsCast<JSNotificationPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSNotificationPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSNotification::s_info = { "Notification", &Base::s_info, &JSNotificationTable, 0 , CREATE_METHOD_TABLE(JSNotification) };

JSNotification::JSNotification(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<Notification> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSNotification::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSNotification::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSNotificationPrototype::create(vm, globalObject, JSNotificationPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSNotification::destroy(JSC::JSCell* cell)
{
    JSNotification* thisObject = static_cast<JSNotification*>(cell);
    thisObject->JSNotification::~JSNotification();
}

JSNotification::~JSNotification()
{
    releaseImplIfNotNull();
}

bool JSNotification::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSNotification* thisObject = jsCast<JSNotification*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSNotification, Base>(exec, JSNotificationTable, thisObject, propertyName, slot);
}

JSValue jsNotificationOnshow(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSNotification* castedThis = jsCast<JSNotification*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Notification& impl = castedThis->impl();
    if (EventListener* listener = impl.onshow()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsNotificationOnerror(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSNotification* castedThis = jsCast<JSNotification*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Notification& impl = castedThis->impl();
    if (EventListener* listener = impl.onerror()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsNotificationOnclose(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSNotification* castedThis = jsCast<JSNotification*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Notification& impl = castedThis->impl();
    if (EventListener* listener = impl.onclose()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsNotificationOnclick(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSNotification* castedThis = jsCast<JSNotification*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Notification& impl = castedThis->impl();
    if (EventListener* listener = impl.onclick()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsNotificationConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSNotification* domObject = jsCast<JSNotification*>(asObject(slotBase));
    return JSNotification::getConstructor(exec->vm(), domObject->globalObject());
}

void JSNotification::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSNotification* thisObject = jsCast<JSNotification*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSNotification, Base>(exec, propertyName, value, JSNotificationTable, thisObject, slot);
}

void setJSNotificationOnshow(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSNotification* castedThis = jsCast<JSNotification*>(thisObject);
    Notification& impl = castedThis->impl();
    impl.setOnshow(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSNotificationOnerror(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSNotification* castedThis = jsCast<JSNotification*>(thisObject);
    Notification& impl = castedThis->impl();
    impl.setOnerror(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSNotificationOnclose(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSNotification* castedThis = jsCast<JSNotification*>(thisObject);
    Notification& impl = castedThis->impl();
    impl.setOnclose(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSNotificationOnclick(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSNotification* castedThis = jsCast<JSNotification*>(thisObject);
    Notification& impl = castedThis->impl();
    impl.setOnclick(createJSAttributeEventListener(exec, value, thisObject));
}


JSValue JSNotification::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSNotificationConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsNotificationPrototypeFunctionShow(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSNotification::info()))
        return throwVMTypeError(exec);
    JSNotification* castedThis = jsCast<JSNotification*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSNotification::info());
    Notification& impl = castedThis->impl();
    impl.show();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsNotificationPrototypeFunctionAddEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSNotification::info()))
        return throwVMTypeError(exec);
    JSNotification* castedThis = jsCast<JSNotification*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSNotification::info());
    Notification& impl = castedThis->impl();
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl.addEventListener(exec->argument(0).toString(exec)->value(exec), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsNotificationPrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSNotification::info()))
        return throwVMTypeError(exec);
    JSNotification* castedThis = jsCast<JSNotification*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSNotification::info());
    Notification& impl = castedThis->impl();
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl.removeEventListener(exec->argument(0).toString(exec)->value(exec), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)).get(), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsNotificationPrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSNotification::info()))
        return throwVMTypeError(exec);
    JSNotification* castedThis = jsCast<JSNotification*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSNotification::info());
    Notification& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    Event* evt(toEvent(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl.dispatchEvent(evt, ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

void JSNotification::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    JSNotification* thisObject = jsCast<JSNotification*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    COMPILE_ASSERT(StructureFlags & OverridesVisitChildren, OverridesVisitChildrenWithoutSettingFlag);
    ASSERT(thisObject->structure()->typeInfo().overridesVisitChildren());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl().visitJSEventListeners(visitor);
}

static inline bool isObservable(JSNotification* jsNotification)
{
    if (jsNotification->hasCustomProperties())
        return true;
    if (jsNotification->impl().hasEventListeners())
        return true;
    return false;
}

bool JSNotificationOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSNotification* jsNotification = jsCast<JSNotification*>(handle.get().asCell());
    if (jsNotification->impl().hasPendingActivity())
        return true;
    if (jsNotification->impl().isFiringEventListeners())
        return true;
    if (!isObservable(jsNotification))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSNotificationOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSNotification* jsNotification = jsCast<JSNotification*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsNotification->impl(), jsNotification);
    jsNotification->releaseImpl();
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7Notification@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore12NotificationE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, Notification* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSNotification>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7Notification@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore12NotificationE[2];
#if COMPILER(CLANG)
    // If this fails Notification does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(Notification), Notification_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // Notification has subclasses. If Notification has subclasses that get passed
    // to toJS() we currently require Notification you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<Notification>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSNotification>(exec, globalObject, impl);
}

Notification* toNotification(JSC::JSValue value)
{
    return value.inherits(JSNotification::info()) ? &jsCast<JSNotification*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)
