/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SVG)

#include "JSSVGAnimatedRect.h"

#include "JSSVGRect.h"
#include "SVGRect.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSSVGAnimatedRectTableValues[] =
{
    { "baseVal", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAnimatedRectBaseVal), (intptr_t)0 },
    { "animVal", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAnimatedRectAnimVal), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAnimatedRectConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSVGAnimatedRectTable = { 8, 7, JSSVGAnimatedRectTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSSVGAnimatedRectConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSVGAnimatedRectConstructorTable = { 1, 0, JSSVGAnimatedRectConstructorTableValues, 0 };
const ClassInfo JSSVGAnimatedRectConstructor::s_info = { "SVGAnimatedRectConstructor", &Base::s_info, &JSSVGAnimatedRectConstructorTable, 0, CREATE_METHOD_TABLE(JSSVGAnimatedRectConstructor) };

JSSVGAnimatedRectConstructor::JSSVGAnimatedRectConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSSVGAnimatedRectConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSSVGAnimatedRectPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSSVGAnimatedRectConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGAnimatedRectConstructor, JSDOMWrapper>(exec, JSSVGAnimatedRectConstructorTable, jsCast<JSSVGAnimatedRectConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSSVGAnimatedRectPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSVGAnimatedRectPrototypeTable = { 1, 0, JSSVGAnimatedRectPrototypeTableValues, 0 };
const ClassInfo JSSVGAnimatedRectPrototype::s_info = { "SVGAnimatedRectPrototype", &Base::s_info, &JSSVGAnimatedRectPrototypeTable, 0, CREATE_METHOD_TABLE(JSSVGAnimatedRectPrototype) };

JSObject* JSSVGAnimatedRectPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGAnimatedRect>(vm, globalObject);
}

const ClassInfo JSSVGAnimatedRect::s_info = { "SVGAnimatedRect", &Base::s_info, &JSSVGAnimatedRectTable, 0 , CREATE_METHOD_TABLE(JSSVGAnimatedRect) };

JSSVGAnimatedRect::JSSVGAnimatedRect(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<SVGAnimatedRect> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSSVGAnimatedRect::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSSVGAnimatedRect::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGAnimatedRectPrototype::create(vm, globalObject, JSSVGAnimatedRectPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSSVGAnimatedRect::destroy(JSC::JSCell* cell)
{
    JSSVGAnimatedRect* thisObject = static_cast<JSSVGAnimatedRect*>(cell);
    thisObject->JSSVGAnimatedRect::~JSSVGAnimatedRect();
}

JSSVGAnimatedRect::~JSSVGAnimatedRect()
{
    releaseImplIfNotNull();
}

bool JSSVGAnimatedRect::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSSVGAnimatedRect* thisObject = jsCast<JSSVGAnimatedRect*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSSVGAnimatedRect, Base>(exec, JSSVGAnimatedRectTable, thisObject, propertyName, slot);
}

JSValue jsSVGAnimatedRectBaseVal(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGAnimatedRect* castedThis = jsCast<JSSVGAnimatedRect*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGAnimatedRect& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(static_cast<SVGPropertyTearOff<FloatRect>*>(impl.baseVal())));
    return result;
}


JSValue jsSVGAnimatedRectAnimVal(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGAnimatedRect* castedThis = jsCast<JSSVGAnimatedRect*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGAnimatedRect& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(static_cast<SVGPropertyTearOff<FloatRect>*>(impl.animVal())));
    return result;
}


JSValue jsSVGAnimatedRectConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGAnimatedRect* domObject = jsCast<JSSVGAnimatedRect*>(asObject(slotBase));
    return JSSVGAnimatedRect::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSSVGAnimatedRect::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGAnimatedRectConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

static inline bool isObservable(JSSVGAnimatedRect* jsSVGAnimatedRect)
{
    if (jsSVGAnimatedRect->hasCustomProperties())
        return true;
    return false;
}

bool JSSVGAnimatedRectOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSSVGAnimatedRect* jsSVGAnimatedRect = jsCast<JSSVGAnimatedRect*>(handle.get().asCell());
    if (!isObservable(jsSVGAnimatedRect))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSSVGAnimatedRectOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSSVGAnimatedRect* jsSVGAnimatedRect = jsCast<JSSVGAnimatedRect*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsSVGAnimatedRect->impl(), jsSVGAnimatedRect);
    jsSVGAnimatedRect->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, SVGAnimatedRect* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSSVGAnimatedRect>(exec, impl))
        return result;
    ReportMemoryCost<SVGAnimatedRect>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSSVGAnimatedRect>(exec, globalObject, impl);
}

SVGAnimatedRect* toSVGAnimatedRect(JSC::JSValue value)
{
    return value.inherits(JSSVGAnimatedRect::info()) ? &jsCast<JSSVGAnimatedRect*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(SVG)
