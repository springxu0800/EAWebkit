/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDOMParser.h"

#include "DOMParser.h"
#include "Document.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSDocument.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSDOMParserTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMParserConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSDOMParserTable = { 2, 1, JSDOMParserTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSDOMParserConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSDOMParserConstructorTable = { 1, 0, JSDOMParserConstructorTableValues, 0 };
EncodedJSValue JSC_HOST_CALL JSDOMParserConstructor::constructJSDOMParser(ExecState* exec)
{
    JSDOMParserConstructor* castedThis = jsCast<JSDOMParserConstructor*>(exec->callee());
    RefPtr<DOMParser> object = DOMParser::create();
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

const ClassInfo JSDOMParserConstructor::s_info = { "DOMParserConstructor", &Base::s_info, &JSDOMParserConstructorTable, 0, CREATE_METHOD_TABLE(JSDOMParserConstructor) };

JSDOMParserConstructor::JSDOMParserConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSDOMParserConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSDOMParserPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSDOMParserConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSDOMParserConstructor, JSDOMWrapper>(exec, JSDOMParserConstructorTable, jsCast<JSDOMParserConstructor*>(object), propertyName, slot);
}

ConstructType JSDOMParserConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSDOMParser;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSDOMParserPrototypeTableValues[] =
{
    { "parseFromString", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMParserPrototypeFunctionParseFromString), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSDOMParserPrototypeTable = { 2, 1, JSDOMParserPrototypeTableValues, 0 };
const ClassInfo JSDOMParserPrototype::s_info = { "DOMParserPrototype", &Base::s_info, &JSDOMParserPrototypeTable, 0, CREATE_METHOD_TABLE(JSDOMParserPrototype) };

JSObject* JSDOMParserPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDOMParser>(vm, globalObject);
}

bool JSDOMParserPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSDOMParserPrototype* thisObject = jsCast<JSDOMParserPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSDOMParserPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSDOMParser::s_info = { "DOMParser", &Base::s_info, &JSDOMParserTable, 0 , CREATE_METHOD_TABLE(JSDOMParser) };

JSDOMParser::JSDOMParser(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<DOMParser> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSDOMParser::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSDOMParser::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDOMParserPrototype::create(vm, globalObject, JSDOMParserPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSDOMParser::destroy(JSC::JSCell* cell)
{
    JSDOMParser* thisObject = static_cast<JSDOMParser*>(cell);
    thisObject->JSDOMParser::~JSDOMParser();
}

JSDOMParser::~JSDOMParser()
{
    releaseImplIfNotNull();
}

bool JSDOMParser::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSDOMParser* thisObject = jsCast<JSDOMParser*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSDOMParser, Base>(exec, JSDOMParserTable, thisObject, propertyName, slot);
}

JSValue jsDOMParserConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDOMParser* domObject = jsCast<JSDOMParser*>(asObject(slotBase));
    return JSDOMParser::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSDOMParser::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDOMParserConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsDOMParserPrototypeFunctionParseFromString(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDOMParser::info()))
        return throwVMTypeError(exec);
    JSDOMParser* castedThis = jsCast<JSDOMParser*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMParser::info());
    DOMParser& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& str(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& contentType(exec->argument(1).isEmpty() ? String() : exec->argument(1).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.parseFromString(str, contentType, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

static inline bool isObservable(JSDOMParser* jsDOMParser)
{
    if (jsDOMParser->hasCustomProperties())
        return true;
    return false;
}

bool JSDOMParserOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSDOMParser* jsDOMParser = jsCast<JSDOMParser*>(handle.get().asCell());
    if (!isObservable(jsDOMParser))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSDOMParserOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSDOMParser* jsDOMParser = jsCast<JSDOMParser*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsDOMParser->impl(), jsDOMParser);
    jsDOMParser->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, DOMParser* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSDOMParser>(exec, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to DOMParser.
    COMPILE_ASSERT(!__is_polymorphic(DOMParser), DOMParser_is_polymorphic_but_idl_claims_not_to_be);
#endif
    ReportMemoryCost<DOMParser>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSDOMParser>(exec, globalObject, impl);
}

DOMParser* toDOMParser(JSC::JSValue value)
{
    return value.inherits(JSDOMParser::info()) ? &jsCast<JSDOMParser*>(asObject(value))->impl() : 0;
}

}
