/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FILTERS) && ENABLE(SVG)

#include "JSSVGFEDropShadowElement.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSSVGAnimatedNumber.h"
#include "JSSVGAnimatedString.h"
#include "SVGFEDropShadowElement.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

#if ENABLE(SVG)
#include "JSSVGAnimatedLength.h"
#endif

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSSVGFEDropShadowElementTableValues[] =
{
    { "in1", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDropShadowElementIn1), (intptr_t)0 },
    { "dx", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDropShadowElementDx), (intptr_t)0 },
    { "dy", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDropShadowElementDy), (intptr_t)0 },
    { "stdDeviationX", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDropShadowElementStdDeviationX), (intptr_t)0 },
    { "stdDeviationY", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDropShadowElementStdDeviationY), (intptr_t)0 },
#if ENABLE(SVG)
    { "x", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDropShadowElementX), (intptr_t)0 },
#endif
#if ENABLE(SVG)
    { "y", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDropShadowElementY), (intptr_t)0 },
#endif
#if ENABLE(SVG)
    { "width", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDropShadowElementWidth), (intptr_t)0 },
#endif
#if ENABLE(SVG)
    { "height", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDropShadowElementHeight), (intptr_t)0 },
#endif
#if ENABLE(SVG)
    { "result", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDropShadowElementResult), (intptr_t)0 },
#endif
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDropShadowElementConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSVGFEDropShadowElementTable = { 34, 31, JSSVGFEDropShadowElementTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSSVGFEDropShadowElementConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSVGFEDropShadowElementConstructorTable = { 1, 0, JSSVGFEDropShadowElementConstructorTableValues, 0 };
const ClassInfo JSSVGFEDropShadowElementConstructor::s_info = { "SVGFEDropShadowElementConstructor", &Base::s_info, &JSSVGFEDropShadowElementConstructorTable, 0, CREATE_METHOD_TABLE(JSSVGFEDropShadowElementConstructor) };

JSSVGFEDropShadowElementConstructor::JSSVGFEDropShadowElementConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSSVGFEDropShadowElementConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSSVGFEDropShadowElementPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSSVGFEDropShadowElementConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFEDropShadowElementConstructor, JSDOMWrapper>(exec, JSSVGFEDropShadowElementConstructorTable, jsCast<JSSVGFEDropShadowElementConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSSVGFEDropShadowElementPrototypeTableValues[] =
{
    { "setStdDeviation", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsSVGFEDropShadowElementPrototypeFunctionSetStdDeviation), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSVGFEDropShadowElementPrototypeTable = { 2, 1, JSSVGFEDropShadowElementPrototypeTableValues, 0 };
const ClassInfo JSSVGFEDropShadowElementPrototype::s_info = { "SVGFEDropShadowElementPrototype", &Base::s_info, &JSSVGFEDropShadowElementPrototypeTable, 0, CREATE_METHOD_TABLE(JSSVGFEDropShadowElementPrototype) };

JSObject* JSSVGFEDropShadowElementPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGFEDropShadowElement>(vm, globalObject);
}

bool JSSVGFEDropShadowElementPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSSVGFEDropShadowElementPrototype* thisObject = jsCast<JSSVGFEDropShadowElementPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSSVGFEDropShadowElementPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSSVGFEDropShadowElement::s_info = { "SVGFEDropShadowElement", &Base::s_info, &JSSVGFEDropShadowElementTable, 0 , CREATE_METHOD_TABLE(JSSVGFEDropShadowElement) };

JSSVGFEDropShadowElement::JSSVGFEDropShadowElement(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<SVGFEDropShadowElement> impl)
    : JSSVGElement(structure, globalObject, impl)
{
}

void JSSVGFEDropShadowElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSSVGFEDropShadowElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGFEDropShadowElementPrototype::create(vm, globalObject, JSSVGFEDropShadowElementPrototype::createStructure(vm, globalObject, JSSVGElementPrototype::self(vm, globalObject)));
}

bool JSSVGFEDropShadowElement::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSSVGFEDropShadowElement* thisObject = jsCast<JSSVGFEDropShadowElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSSVGFEDropShadowElement, Base>(exec, JSSVGFEDropShadowElementTable, thisObject, propertyName, slot);
}

JSValue jsSVGFEDropShadowElementIn1(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEDropShadowElement* castedThis = jsCast<JSSVGFEDropShadowElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFEDropShadowElement& impl = castedThis->impl();
    RefPtr<SVGAnimatedString> obj = impl.in1Animated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}


JSValue jsSVGFEDropShadowElementDx(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEDropShadowElement* castedThis = jsCast<JSSVGFEDropShadowElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFEDropShadowElement& impl = castedThis->impl();
    RefPtr<SVGAnimatedNumber> obj = impl.dxAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}


JSValue jsSVGFEDropShadowElementDy(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEDropShadowElement* castedThis = jsCast<JSSVGFEDropShadowElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFEDropShadowElement& impl = castedThis->impl();
    RefPtr<SVGAnimatedNumber> obj = impl.dyAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}


JSValue jsSVGFEDropShadowElementStdDeviationX(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEDropShadowElement* castedThis = jsCast<JSSVGFEDropShadowElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFEDropShadowElement& impl = castedThis->impl();
    RefPtr<SVGAnimatedNumber> obj = impl.stdDeviationXAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}


JSValue jsSVGFEDropShadowElementStdDeviationY(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEDropShadowElement* castedThis = jsCast<JSSVGFEDropShadowElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFEDropShadowElement& impl = castedThis->impl();
    RefPtr<SVGAnimatedNumber> obj = impl.stdDeviationYAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}


#if ENABLE(SVG)
JSValue jsSVGFEDropShadowElementX(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEDropShadowElement* castedThis = jsCast<JSSVGFEDropShadowElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFEDropShadowElement& impl = castedThis->impl();
    RefPtr<SVGAnimatedLength> obj = impl.xAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}

#endif

#if ENABLE(SVG)
JSValue jsSVGFEDropShadowElementY(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEDropShadowElement* castedThis = jsCast<JSSVGFEDropShadowElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFEDropShadowElement& impl = castedThis->impl();
    RefPtr<SVGAnimatedLength> obj = impl.yAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}

#endif

#if ENABLE(SVG)
JSValue jsSVGFEDropShadowElementWidth(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEDropShadowElement* castedThis = jsCast<JSSVGFEDropShadowElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFEDropShadowElement& impl = castedThis->impl();
    RefPtr<SVGAnimatedLength> obj = impl.widthAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}

#endif

#if ENABLE(SVG)
JSValue jsSVGFEDropShadowElementHeight(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEDropShadowElement* castedThis = jsCast<JSSVGFEDropShadowElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFEDropShadowElement& impl = castedThis->impl();
    RefPtr<SVGAnimatedLength> obj = impl.heightAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}

#endif

#if ENABLE(SVG)
JSValue jsSVGFEDropShadowElementResult(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEDropShadowElement* castedThis = jsCast<JSSVGFEDropShadowElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFEDropShadowElement& impl = castedThis->impl();
    RefPtr<SVGAnimatedString> obj = impl.resultAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}

#endif

JSValue jsSVGFEDropShadowElementConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEDropShadowElement* domObject = jsCast<JSSVGFEDropShadowElement*>(asObject(slotBase));
    return JSSVGFEDropShadowElement::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSSVGFEDropShadowElement::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGFEDropShadowElementConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsSVGFEDropShadowElementPrototypeFunctionSetStdDeviation(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSSVGFEDropShadowElement::info()))
        return throwVMTypeError(exec);
    JSSVGFEDropShadowElement* castedThis = jsCast<JSSVGFEDropShadowElement*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSSVGFEDropShadowElement::info());
    SVGFEDropShadowElement& impl = castedThis->impl();
    float stdDeviationX(exec->argument(0).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    float stdDeviationY(exec->argument(1).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setStdDeviation(stdDeviationX, stdDeviationY);
    return JSValue::encode(jsUndefined());
}


}

#endif // ENABLE(FILTERS) && ENABLE(SVG)
