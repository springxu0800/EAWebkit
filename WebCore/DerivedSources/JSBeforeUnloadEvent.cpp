/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSBeforeUnloadEvent.h"

#include "BeforeUnloadEvent.h"
#include "URL.h"
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSBeforeUnloadEventTableValues[] =
{
    { "returnValue", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBeforeUnloadEventReturnValue), (intptr_t)setJSBeforeUnloadEventReturnValue },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBeforeUnloadEventConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSBeforeUnloadEventTable = { 4, 3, JSBeforeUnloadEventTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSBeforeUnloadEventConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSBeforeUnloadEventConstructorTable = { 1, 0, JSBeforeUnloadEventConstructorTableValues, 0 };
const ClassInfo JSBeforeUnloadEventConstructor::s_info = { "BeforeUnloadEventConstructor", &Base::s_info, &JSBeforeUnloadEventConstructorTable, 0, CREATE_METHOD_TABLE(JSBeforeUnloadEventConstructor) };

JSBeforeUnloadEventConstructor::JSBeforeUnloadEventConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSBeforeUnloadEventConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSBeforeUnloadEventPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSBeforeUnloadEventConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSBeforeUnloadEventConstructor, JSDOMWrapper>(exec, JSBeforeUnloadEventConstructorTable, jsCast<JSBeforeUnloadEventConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSBeforeUnloadEventPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSBeforeUnloadEventPrototypeTable = { 1, 0, JSBeforeUnloadEventPrototypeTableValues, 0 };
const ClassInfo JSBeforeUnloadEventPrototype::s_info = { "BeforeUnloadEventPrototype", &Base::s_info, &JSBeforeUnloadEventPrototypeTable, 0, CREATE_METHOD_TABLE(JSBeforeUnloadEventPrototype) };

JSObject* JSBeforeUnloadEventPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSBeforeUnloadEvent>(vm, globalObject);
}

const ClassInfo JSBeforeUnloadEvent::s_info = { "BeforeUnloadEvent", &Base::s_info, &JSBeforeUnloadEventTable, 0 , CREATE_METHOD_TABLE(JSBeforeUnloadEvent) };

JSBeforeUnloadEvent::JSBeforeUnloadEvent(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<BeforeUnloadEvent> impl)
    : JSEvent(structure, globalObject, impl)
{
}

void JSBeforeUnloadEvent::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSBeforeUnloadEvent::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSBeforeUnloadEventPrototype::create(vm, globalObject, JSBeforeUnloadEventPrototype::createStructure(vm, globalObject, JSEventPrototype::self(vm, globalObject)));
}

bool JSBeforeUnloadEvent::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSBeforeUnloadEvent* thisObject = jsCast<JSBeforeUnloadEvent*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSBeforeUnloadEvent, Base>(exec, JSBeforeUnloadEventTable, thisObject, propertyName, slot);
}

JSValue jsBeforeUnloadEventReturnValue(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSBeforeUnloadEvent* castedThis = jsCast<JSBeforeUnloadEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    BeforeUnloadEvent& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.returnValue());
    return result;
}


JSValue jsBeforeUnloadEventConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSBeforeUnloadEvent* domObject = jsCast<JSBeforeUnloadEvent*>(asObject(slotBase));
    return JSBeforeUnloadEvent::getConstructor(exec->vm(), domObject->globalObject());
}

void JSBeforeUnloadEvent::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSBeforeUnloadEvent* thisObject = jsCast<JSBeforeUnloadEvent*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSBeforeUnloadEvent, Base>(exec, propertyName, value, JSBeforeUnloadEventTable, thisObject, slot);
}

void setJSBeforeUnloadEventReturnValue(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSBeforeUnloadEvent* castedThis = jsCast<JSBeforeUnloadEvent*>(thisObject);
    BeforeUnloadEvent& impl = castedThis->impl();
    const String& nativeValue(value.isEmpty() ? String() : value.toString(exec)->value(exec));
    if (exec->hadException())
        return;
    impl.setReturnValue(nativeValue);
}


JSValue JSBeforeUnloadEvent::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSBeforeUnloadEventConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}


}
