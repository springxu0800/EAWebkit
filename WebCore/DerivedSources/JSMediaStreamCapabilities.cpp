/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSMediaStreamCapabilities.h"

#include "MediaStreamCapabilities.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table for prototype */

static const HashTableValue JSMediaStreamCapabilitiesPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSMediaStreamCapabilitiesPrototypeTable = { 1, 0, JSMediaStreamCapabilitiesPrototypeTableValues, 0 };
const ClassInfo JSMediaStreamCapabilitiesPrototype::s_info = { "MediaStreamCapabilitiesPrototype", &Base::s_info, &JSMediaStreamCapabilitiesPrototypeTable, 0, CREATE_METHOD_TABLE(JSMediaStreamCapabilitiesPrototype) };

JSObject* JSMediaStreamCapabilitiesPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaStreamCapabilities>(vm, globalObject);
}

const ClassInfo JSMediaStreamCapabilities::s_info = { "MediaStreamCapabilities", &Base::s_info, 0, 0 , CREATE_METHOD_TABLE(JSMediaStreamCapabilities) };

JSMediaStreamCapabilities::JSMediaStreamCapabilities(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<MediaStreamCapabilities> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSMediaStreamCapabilities::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSMediaStreamCapabilities::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMediaStreamCapabilitiesPrototype::create(vm, globalObject, JSMediaStreamCapabilitiesPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSMediaStreamCapabilities::destroy(JSC::JSCell* cell)
{
    JSMediaStreamCapabilities* thisObject = static_cast<JSMediaStreamCapabilities*>(cell);
    thisObject->JSMediaStreamCapabilities::~JSMediaStreamCapabilities();
}

JSMediaStreamCapabilities::~JSMediaStreamCapabilities()
{
    releaseImplIfNotNull();
}

static inline bool isObservable(JSMediaStreamCapabilities* jsMediaStreamCapabilities)
{
    if (jsMediaStreamCapabilities->hasCustomProperties())
        return true;
    return false;
}

bool JSMediaStreamCapabilitiesOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSMediaStreamCapabilities* jsMediaStreamCapabilities = jsCast<JSMediaStreamCapabilities*>(handle.get().asCell());
    if (!isObservable(jsMediaStreamCapabilities))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSMediaStreamCapabilitiesOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSMediaStreamCapabilities* jsMediaStreamCapabilities = jsCast<JSMediaStreamCapabilities*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsMediaStreamCapabilities->impl(), jsMediaStreamCapabilities);
    jsMediaStreamCapabilities->releaseImpl();
}

MediaStreamCapabilities* toMediaStreamCapabilities(JSC::JSValue value)
{
    return value.inherits(JSMediaStreamCapabilities::info()) ? &jsCast<JSMediaStreamCapabilities*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
