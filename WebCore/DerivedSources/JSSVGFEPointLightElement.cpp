/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FILTERS) && ENABLE(SVG)

#include "JSSVGFEPointLightElement.h"

#include "JSSVGAnimatedNumber.h"
#include "SVGFEPointLightElement.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSSVGFEPointLightElementTableValues[] =
{
    { "x", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEPointLightElementX), (intptr_t)0 },
    { "y", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEPointLightElementY), (intptr_t)0 },
    { "z", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEPointLightElementZ), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEPointLightElementConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSVGFEPointLightElementTable = { 9, 7, JSSVGFEPointLightElementTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSSVGFEPointLightElementConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSVGFEPointLightElementConstructorTable = { 1, 0, JSSVGFEPointLightElementConstructorTableValues, 0 };
const ClassInfo JSSVGFEPointLightElementConstructor::s_info = { "SVGFEPointLightElementConstructor", &Base::s_info, &JSSVGFEPointLightElementConstructorTable, 0, CREATE_METHOD_TABLE(JSSVGFEPointLightElementConstructor) };

JSSVGFEPointLightElementConstructor::JSSVGFEPointLightElementConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSSVGFEPointLightElementConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSSVGFEPointLightElementPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSSVGFEPointLightElementConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFEPointLightElementConstructor, JSDOMWrapper>(exec, JSSVGFEPointLightElementConstructorTable, jsCast<JSSVGFEPointLightElementConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSSVGFEPointLightElementPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSVGFEPointLightElementPrototypeTable = { 1, 0, JSSVGFEPointLightElementPrototypeTableValues, 0 };
const ClassInfo JSSVGFEPointLightElementPrototype::s_info = { "SVGFEPointLightElementPrototype", &Base::s_info, &JSSVGFEPointLightElementPrototypeTable, 0, CREATE_METHOD_TABLE(JSSVGFEPointLightElementPrototype) };

JSObject* JSSVGFEPointLightElementPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGFEPointLightElement>(vm, globalObject);
}

const ClassInfo JSSVGFEPointLightElement::s_info = { "SVGFEPointLightElement", &Base::s_info, &JSSVGFEPointLightElementTable, 0 , CREATE_METHOD_TABLE(JSSVGFEPointLightElement) };

JSSVGFEPointLightElement::JSSVGFEPointLightElement(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<SVGFEPointLightElement> impl)
    : JSSVGElement(structure, globalObject, impl)
{
}

void JSSVGFEPointLightElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSSVGFEPointLightElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGFEPointLightElementPrototype::create(vm, globalObject, JSSVGFEPointLightElementPrototype::createStructure(vm, globalObject, JSSVGElementPrototype::self(vm, globalObject)));
}

bool JSSVGFEPointLightElement::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSSVGFEPointLightElement* thisObject = jsCast<JSSVGFEPointLightElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSSVGFEPointLightElement, Base>(exec, JSSVGFEPointLightElementTable, thisObject, propertyName, slot);
}

JSValue jsSVGFEPointLightElementX(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEPointLightElement* castedThis = jsCast<JSSVGFEPointLightElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFEPointLightElement& impl = castedThis->impl();
    RefPtr<SVGAnimatedNumber> obj = impl.xAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}


JSValue jsSVGFEPointLightElementY(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEPointLightElement* castedThis = jsCast<JSSVGFEPointLightElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFEPointLightElement& impl = castedThis->impl();
    RefPtr<SVGAnimatedNumber> obj = impl.yAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}


JSValue jsSVGFEPointLightElementZ(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEPointLightElement* castedThis = jsCast<JSSVGFEPointLightElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    SVGFEPointLightElement& impl = castedThis->impl();
    RefPtr<SVGAnimatedNumber> obj = impl.zAnimated();
    JSValue result =  toJS(exec, castedThis->globalObject(), obj.get());
    return result;
}


JSValue jsSVGFEPointLightElementConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEPointLightElement* domObject = jsCast<JSSVGFEPointLightElement*>(asObject(slotBase));
    return JSSVGFEPointLightElement::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSSVGFEPointLightElement::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGFEPointLightElementConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}


}

#endif // ENABLE(FILTERS) && ENABLE(SVG)
