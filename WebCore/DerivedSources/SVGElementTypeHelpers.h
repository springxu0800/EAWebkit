/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009, 2013 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef SVGElementTypeHelpers_h
#define SVGElementTypeHelpers_h

#include "SVGNames.h"

namespace WebCore {

class SVGAltGlyphElement;
void isSVGAltGlyphElement(const SVGAltGlyphElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGAltGlyphElement(const SVGAltGlyphElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGAltGlyphElement(const Element& element) { return element.hasTagName(SVGNames::altGlyphTag); }
inline bool isSVGAltGlyphElement(const Element* element) { ASSERT(element); return isSVGAltGlyphElement(*element); }
inline bool isSVGAltGlyphElement(const Node& node) { return node.isElementNode() && isSVGAltGlyphElement(toElement(node)); }
inline bool isSVGAltGlyphElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGAltGlyphElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGAltGlyphElement>(const Element& element) { return isSVGAltGlyphElement(element); }

class SVGAltGlyphDefElement;
void isSVGAltGlyphDefElement(const SVGAltGlyphDefElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGAltGlyphDefElement(const SVGAltGlyphDefElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGAltGlyphDefElement(const Element& element) { return element.hasTagName(SVGNames::altGlyphDefTag); }
inline bool isSVGAltGlyphDefElement(const Element* element) { ASSERT(element); return isSVGAltGlyphDefElement(*element); }
inline bool isSVGAltGlyphDefElement(const Node& node) { return node.isElementNode() && isSVGAltGlyphDefElement(toElement(node)); }
inline bool isSVGAltGlyphDefElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGAltGlyphDefElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGAltGlyphDefElement>(const Element& element) { return isSVGAltGlyphDefElement(element); }

class SVGAltGlyphItemElement;
void isSVGAltGlyphItemElement(const SVGAltGlyphItemElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGAltGlyphItemElement(const SVGAltGlyphItemElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGAltGlyphItemElement(const Element& element) { return element.hasTagName(SVGNames::altGlyphItemTag); }
inline bool isSVGAltGlyphItemElement(const Element* element) { ASSERT(element); return isSVGAltGlyphItemElement(*element); }
inline bool isSVGAltGlyphItemElement(const Node& node) { return node.isElementNode() && isSVGAltGlyphItemElement(toElement(node)); }
inline bool isSVGAltGlyphItemElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGAltGlyphItemElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGAltGlyphItemElement>(const Element& element) { return isSVGAltGlyphItemElement(element); }

class SVGAnimateMotionElement;
void isSVGAnimateMotionElement(const SVGAnimateMotionElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGAnimateMotionElement(const SVGAnimateMotionElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGAnimateMotionElement(const Element& element) { return element.hasTagName(SVGNames::animateMotionTag); }
inline bool isSVGAnimateMotionElement(const Element* element) { ASSERT(element); return isSVGAnimateMotionElement(*element); }
inline bool isSVGAnimateMotionElement(const Node& node) { return node.isElementNode() && isSVGAnimateMotionElement(toElement(node)); }
inline bool isSVGAnimateMotionElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGAnimateMotionElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGAnimateMotionElement>(const Element& element) { return isSVGAnimateMotionElement(element); }

class SVGAnimateTransformElement;
void isSVGAnimateTransformElement(const SVGAnimateTransformElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGAnimateTransformElement(const SVGAnimateTransformElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGAnimateTransformElement(const Element& element) { return element.hasTagName(SVGNames::animateTransformTag); }
inline bool isSVGAnimateTransformElement(const Element* element) { ASSERT(element); return isSVGAnimateTransformElement(*element); }
inline bool isSVGAnimateTransformElement(const Node& node) { return node.isElementNode() && isSVGAnimateTransformElement(toElement(node)); }
inline bool isSVGAnimateTransformElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGAnimateTransformElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGAnimateTransformElement>(const Element& element) { return isSVGAnimateTransformElement(element); }

class SVGCircleElement;
void isSVGCircleElement(const SVGCircleElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGCircleElement(const SVGCircleElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGCircleElement(const Element& element) { return element.hasTagName(SVGNames::circleTag); }
inline bool isSVGCircleElement(const Element* element) { ASSERT(element); return isSVGCircleElement(*element); }
inline bool isSVGCircleElement(const Node& node) { return node.isElementNode() && isSVGCircleElement(toElement(node)); }
inline bool isSVGCircleElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGCircleElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGCircleElement>(const Element& element) { return isSVGCircleElement(element); }

class SVGClipPathElement;
void isSVGClipPathElement(const SVGClipPathElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGClipPathElement(const SVGClipPathElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGClipPathElement(const Element& element) { return element.hasTagName(SVGNames::clipPathTag); }
inline bool isSVGClipPathElement(const Element* element) { ASSERT(element); return isSVGClipPathElement(*element); }
inline bool isSVGClipPathElement(const Node& node) { return node.isElementNode() && isSVGClipPathElement(toElement(node)); }
inline bool isSVGClipPathElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGClipPathElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGClipPathElement>(const Element& element) { return isSVGClipPathElement(element); }

class SVGCursorElement;
void isSVGCursorElement(const SVGCursorElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGCursorElement(const SVGCursorElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGCursorElement(const Element& element) { return element.hasTagName(SVGNames::cursorTag); }
inline bool isSVGCursorElement(const Element* element) { ASSERT(element); return isSVGCursorElement(*element); }
inline bool isSVGCursorElement(const Node& node) { return node.isElementNode() && isSVGCursorElement(toElement(node)); }
inline bool isSVGCursorElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGCursorElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGCursorElement>(const Element& element) { return isSVGCursorElement(element); }

class SVGEllipseElement;
void isSVGEllipseElement(const SVGEllipseElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGEllipseElement(const SVGEllipseElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGEllipseElement(const Element& element) { return element.hasTagName(SVGNames::ellipseTag); }
inline bool isSVGEllipseElement(const Element* element) { ASSERT(element); return isSVGEllipseElement(*element); }
inline bool isSVGEllipseElement(const Node& node) { return node.isElementNode() && isSVGEllipseElement(toElement(node)); }
inline bool isSVGEllipseElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGEllipseElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGEllipseElement>(const Element& element) { return isSVGEllipseElement(element); }

class SVGFEDistantLightElement;
void isSVGFEDistantLightElement(const SVGFEDistantLightElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFEDistantLightElement(const SVGFEDistantLightElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFEDistantLightElement(const Element& element) { return element.hasTagName(SVGNames::feDistantLightTag); }
inline bool isSVGFEDistantLightElement(const Element* element) { ASSERT(element); return isSVGFEDistantLightElement(*element); }
inline bool isSVGFEDistantLightElement(const Node& node) { return node.isElementNode() && isSVGFEDistantLightElement(toElement(node)); }
inline bool isSVGFEDistantLightElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFEDistantLightElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFEDistantLightElement>(const Element& element) { return isSVGFEDistantLightElement(element); }

class SVGFEFuncAElement;
void isSVGFEFuncAElement(const SVGFEFuncAElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFEFuncAElement(const SVGFEFuncAElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFEFuncAElement(const Element& element) { return element.hasTagName(SVGNames::feFuncATag); }
inline bool isSVGFEFuncAElement(const Element* element) { ASSERT(element); return isSVGFEFuncAElement(*element); }
inline bool isSVGFEFuncAElement(const Node& node) { return node.isElementNode() && isSVGFEFuncAElement(toElement(node)); }
inline bool isSVGFEFuncAElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFEFuncAElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFEFuncAElement>(const Element& element) { return isSVGFEFuncAElement(element); }

class SVGFEFuncBElement;
void isSVGFEFuncBElement(const SVGFEFuncBElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFEFuncBElement(const SVGFEFuncBElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFEFuncBElement(const Element& element) { return element.hasTagName(SVGNames::feFuncBTag); }
inline bool isSVGFEFuncBElement(const Element* element) { ASSERT(element); return isSVGFEFuncBElement(*element); }
inline bool isSVGFEFuncBElement(const Node& node) { return node.isElementNode() && isSVGFEFuncBElement(toElement(node)); }
inline bool isSVGFEFuncBElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFEFuncBElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFEFuncBElement>(const Element& element) { return isSVGFEFuncBElement(element); }

class SVGFEFuncGElement;
void isSVGFEFuncGElement(const SVGFEFuncGElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFEFuncGElement(const SVGFEFuncGElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFEFuncGElement(const Element& element) { return element.hasTagName(SVGNames::feFuncGTag); }
inline bool isSVGFEFuncGElement(const Element* element) { ASSERT(element); return isSVGFEFuncGElement(*element); }
inline bool isSVGFEFuncGElement(const Node& node) { return node.isElementNode() && isSVGFEFuncGElement(toElement(node)); }
inline bool isSVGFEFuncGElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFEFuncGElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFEFuncGElement>(const Element& element) { return isSVGFEFuncGElement(element); }

class SVGFEFuncRElement;
void isSVGFEFuncRElement(const SVGFEFuncRElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFEFuncRElement(const SVGFEFuncRElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFEFuncRElement(const Element& element) { return element.hasTagName(SVGNames::feFuncRTag); }
inline bool isSVGFEFuncRElement(const Element* element) { ASSERT(element); return isSVGFEFuncRElement(*element); }
inline bool isSVGFEFuncRElement(const Node& node) { return node.isElementNode() && isSVGFEFuncRElement(toElement(node)); }
inline bool isSVGFEFuncRElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFEFuncRElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFEFuncRElement>(const Element& element) { return isSVGFEFuncRElement(element); }

class SVGFEMergeNodeElement;
void isSVGFEMergeNodeElement(const SVGFEMergeNodeElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFEMergeNodeElement(const SVGFEMergeNodeElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFEMergeNodeElement(const Element& element) { return element.hasTagName(SVGNames::feMergeNodeTag); }
inline bool isSVGFEMergeNodeElement(const Element* element) { ASSERT(element); return isSVGFEMergeNodeElement(*element); }
inline bool isSVGFEMergeNodeElement(const Node& node) { return node.isElementNode() && isSVGFEMergeNodeElement(toElement(node)); }
inline bool isSVGFEMergeNodeElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFEMergeNodeElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFEMergeNodeElement>(const Element& element) { return isSVGFEMergeNodeElement(element); }

class SVGFEPointLightElement;
void isSVGFEPointLightElement(const SVGFEPointLightElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFEPointLightElement(const SVGFEPointLightElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFEPointLightElement(const Element& element) { return element.hasTagName(SVGNames::fePointLightTag); }
inline bool isSVGFEPointLightElement(const Element* element) { ASSERT(element); return isSVGFEPointLightElement(*element); }
inline bool isSVGFEPointLightElement(const Node& node) { return node.isElementNode() && isSVGFEPointLightElement(toElement(node)); }
inline bool isSVGFEPointLightElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFEPointLightElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFEPointLightElement>(const Element& element) { return isSVGFEPointLightElement(element); }

class SVGFESpotLightElement;
void isSVGFESpotLightElement(const SVGFESpotLightElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFESpotLightElement(const SVGFESpotLightElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFESpotLightElement(const Element& element) { return element.hasTagName(SVGNames::feSpotLightTag); }
inline bool isSVGFESpotLightElement(const Element* element) { ASSERT(element); return isSVGFESpotLightElement(*element); }
inline bool isSVGFESpotLightElement(const Node& node) { return node.isElementNode() && isSVGFESpotLightElement(toElement(node)); }
inline bool isSVGFESpotLightElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFESpotLightElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFESpotLightElement>(const Element& element) { return isSVGFESpotLightElement(element); }

class SVGFilterElement;
void isSVGFilterElement(const SVGFilterElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFilterElement(const SVGFilterElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFilterElement(const Element& element) { return element.hasTagName(SVGNames::filterTag); }
inline bool isSVGFilterElement(const Element* element) { ASSERT(element); return isSVGFilterElement(*element); }
inline bool isSVGFilterElement(const Node& node) { return node.isElementNode() && isSVGFilterElement(toElement(node)); }
inline bool isSVGFilterElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFilterElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFilterElement>(const Element& element) { return isSVGFilterElement(element); }

class SVGFontElement;
void isSVGFontElement(const SVGFontElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFontElement(const SVGFontElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFontElement(const Element& element) { return element.hasTagName(SVGNames::fontTag); }
inline bool isSVGFontElement(const Element* element) { ASSERT(element); return isSVGFontElement(*element); }
inline bool isSVGFontElement(const Node& node) { return node.isElementNode() && isSVGFontElement(toElement(node)); }
inline bool isSVGFontElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFontElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFontElement>(const Element& element) { return isSVGFontElement(element); }

class SVGFontFaceElement;
void isSVGFontFaceElement(const SVGFontFaceElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFontFaceElement(const SVGFontFaceElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFontFaceElement(const Element& element) { return element.hasTagName(SVGNames::font_faceTag); }
inline bool isSVGFontFaceElement(const Element* element) { ASSERT(element); return isSVGFontFaceElement(*element); }
inline bool isSVGFontFaceElement(const Node& node) { return node.isElementNode() && isSVGFontFaceElement(toElement(node)); }
inline bool isSVGFontFaceElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFontFaceElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFontFaceElement>(const Element& element) { return isSVGFontFaceElement(element); }

class SVGFontFaceNameElement;
void isSVGFontFaceNameElement(const SVGFontFaceNameElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFontFaceNameElement(const SVGFontFaceNameElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFontFaceNameElement(const Element& element) { return element.hasTagName(SVGNames::font_face_nameTag); }
inline bool isSVGFontFaceNameElement(const Element* element) { ASSERT(element); return isSVGFontFaceNameElement(*element); }
inline bool isSVGFontFaceNameElement(const Node& node) { return node.isElementNode() && isSVGFontFaceNameElement(toElement(node)); }
inline bool isSVGFontFaceNameElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFontFaceNameElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFontFaceNameElement>(const Element& element) { return isSVGFontFaceNameElement(element); }

class SVGFontFaceSrcElement;
void isSVGFontFaceSrcElement(const SVGFontFaceSrcElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFontFaceSrcElement(const SVGFontFaceSrcElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFontFaceSrcElement(const Element& element) { return element.hasTagName(SVGNames::font_face_srcTag); }
inline bool isSVGFontFaceSrcElement(const Element* element) { ASSERT(element); return isSVGFontFaceSrcElement(*element); }
inline bool isSVGFontFaceSrcElement(const Node& node) { return node.isElementNode() && isSVGFontFaceSrcElement(toElement(node)); }
inline bool isSVGFontFaceSrcElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFontFaceSrcElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFontFaceSrcElement>(const Element& element) { return isSVGFontFaceSrcElement(element); }

class SVGFontFaceUriElement;
void isSVGFontFaceUriElement(const SVGFontFaceUriElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGFontFaceUriElement(const SVGFontFaceUriElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGFontFaceUriElement(const Element& element) { return element.hasTagName(SVGNames::font_face_uriTag); }
inline bool isSVGFontFaceUriElement(const Element* element) { ASSERT(element); return isSVGFontFaceUriElement(*element); }
inline bool isSVGFontFaceUriElement(const Node& node) { return node.isElementNode() && isSVGFontFaceUriElement(toElement(node)); }
inline bool isSVGFontFaceUriElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGFontFaceUriElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGFontFaceUriElement>(const Element& element) { return isSVGFontFaceUriElement(element); }

class SVGForeignObjectElement;
void isSVGForeignObjectElement(const SVGForeignObjectElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGForeignObjectElement(const SVGForeignObjectElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGForeignObjectElement(const Element& element) { return element.hasTagName(SVGNames::foreignObjectTag); }
inline bool isSVGForeignObjectElement(const Element* element) { ASSERT(element); return isSVGForeignObjectElement(*element); }
inline bool isSVGForeignObjectElement(const Node& node) { return node.isElementNode() && isSVGForeignObjectElement(toElement(node)); }
inline bool isSVGForeignObjectElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGForeignObjectElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGForeignObjectElement>(const Element& element) { return isSVGForeignObjectElement(element); }

class SVGGElement;
void isSVGGElement(const SVGGElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGGElement(const SVGGElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGGElement(const Element& element) { return element.hasTagName(SVGNames::gTag); }
inline bool isSVGGElement(const Element* element) { ASSERT(element); return isSVGGElement(*element); }
inline bool isSVGGElement(const Node& node) { return node.isElementNode() && isSVGGElement(toElement(node)); }
inline bool isSVGGElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGGElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGGElement>(const Element& element) { return isSVGGElement(element); }

class SVGGlyphElement;
void isSVGGlyphElement(const SVGGlyphElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGGlyphElement(const SVGGlyphElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGGlyphElement(const Element& element) { return element.hasTagName(SVGNames::glyphTag); }
inline bool isSVGGlyphElement(const Element* element) { ASSERT(element); return isSVGGlyphElement(*element); }
inline bool isSVGGlyphElement(const Node& node) { return node.isElementNode() && isSVGGlyphElement(toElement(node)); }
inline bool isSVGGlyphElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGGlyphElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGGlyphElement>(const Element& element) { return isSVGGlyphElement(element); }

class SVGGlyphRefElement;
void isSVGGlyphRefElement(const SVGGlyphRefElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGGlyphRefElement(const SVGGlyphRefElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGGlyphRefElement(const Element& element) { return element.hasTagName(SVGNames::glyphRefTag); }
inline bool isSVGGlyphRefElement(const Element* element) { ASSERT(element); return isSVGGlyphRefElement(*element); }
inline bool isSVGGlyphRefElement(const Node& node) { return node.isElementNode() && isSVGGlyphRefElement(toElement(node)); }
inline bool isSVGGlyphRefElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGGlyphRefElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGGlyphRefElement>(const Element& element) { return isSVGGlyphRefElement(element); }

class SVGHKernElement;
void isSVGHKernElement(const SVGHKernElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGHKernElement(const SVGHKernElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGHKernElement(const Element& element) { return element.hasTagName(SVGNames::hkernTag); }
inline bool isSVGHKernElement(const Element* element) { ASSERT(element); return isSVGHKernElement(*element); }
inline bool isSVGHKernElement(const Node& node) { return node.isElementNode() && isSVGHKernElement(toElement(node)); }
inline bool isSVGHKernElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGHKernElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGHKernElement>(const Element& element) { return isSVGHKernElement(element); }

class SVGImageElement;
void isSVGImageElement(const SVGImageElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGImageElement(const SVGImageElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGImageElement(const Element& element) { return element.hasTagName(SVGNames::imageTag); }
inline bool isSVGImageElement(const Element* element) { ASSERT(element); return isSVGImageElement(*element); }
inline bool isSVGImageElement(const Node& node) { return node.isElementNode() && isSVGImageElement(toElement(node)); }
inline bool isSVGImageElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGImageElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGImageElement>(const Element& element) { return isSVGImageElement(element); }

class SVGLineElement;
void isSVGLineElement(const SVGLineElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGLineElement(const SVGLineElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGLineElement(const Element& element) { return element.hasTagName(SVGNames::lineTag); }
inline bool isSVGLineElement(const Element* element) { ASSERT(element); return isSVGLineElement(*element); }
inline bool isSVGLineElement(const Node& node) { return node.isElementNode() && isSVGLineElement(toElement(node)); }
inline bool isSVGLineElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGLineElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGLineElement>(const Element& element) { return isSVGLineElement(element); }

class SVGLinearGradientElement;
void isSVGLinearGradientElement(const SVGLinearGradientElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGLinearGradientElement(const SVGLinearGradientElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGLinearGradientElement(const Element& element) { return element.hasTagName(SVGNames::linearGradientTag); }
inline bool isSVGLinearGradientElement(const Element* element) { ASSERT(element); return isSVGLinearGradientElement(*element); }
inline bool isSVGLinearGradientElement(const Node& node) { return node.isElementNode() && isSVGLinearGradientElement(toElement(node)); }
inline bool isSVGLinearGradientElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGLinearGradientElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGLinearGradientElement>(const Element& element) { return isSVGLinearGradientElement(element); }

class SVGMarkerElement;
void isSVGMarkerElement(const SVGMarkerElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGMarkerElement(const SVGMarkerElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGMarkerElement(const Element& element) { return element.hasTagName(SVGNames::markerTag); }
inline bool isSVGMarkerElement(const Element* element) { ASSERT(element); return isSVGMarkerElement(*element); }
inline bool isSVGMarkerElement(const Node& node) { return node.isElementNode() && isSVGMarkerElement(toElement(node)); }
inline bool isSVGMarkerElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGMarkerElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGMarkerElement>(const Element& element) { return isSVGMarkerElement(element); }

class SVGMaskElement;
void isSVGMaskElement(const SVGMaskElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGMaskElement(const SVGMaskElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGMaskElement(const Element& element) { return element.hasTagName(SVGNames::maskTag); }
inline bool isSVGMaskElement(const Element* element) { ASSERT(element); return isSVGMaskElement(*element); }
inline bool isSVGMaskElement(const Node& node) { return node.isElementNode() && isSVGMaskElement(toElement(node)); }
inline bool isSVGMaskElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGMaskElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGMaskElement>(const Element& element) { return isSVGMaskElement(element); }

class SVGMissingGlyphElement;
void isSVGMissingGlyphElement(const SVGMissingGlyphElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGMissingGlyphElement(const SVGMissingGlyphElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGMissingGlyphElement(const Element& element) { return element.hasTagName(SVGNames::missing_glyphTag); }
inline bool isSVGMissingGlyphElement(const Element* element) { ASSERT(element); return isSVGMissingGlyphElement(*element); }
inline bool isSVGMissingGlyphElement(const Node& node) { return node.isElementNode() && isSVGMissingGlyphElement(toElement(node)); }
inline bool isSVGMissingGlyphElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGMissingGlyphElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGMissingGlyphElement>(const Element& element) { return isSVGMissingGlyphElement(element); }

class SVGMPathElement;
void isSVGMPathElement(const SVGMPathElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGMPathElement(const SVGMPathElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGMPathElement(const Element& element) { return element.hasTagName(SVGNames::mpathTag); }
inline bool isSVGMPathElement(const Element* element) { ASSERT(element); return isSVGMPathElement(*element); }
inline bool isSVGMPathElement(const Node& node) { return node.isElementNode() && isSVGMPathElement(toElement(node)); }
inline bool isSVGMPathElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGMPathElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGMPathElement>(const Element& element) { return isSVGMPathElement(element); }

class SVGPathElement;
void isSVGPathElement(const SVGPathElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGPathElement(const SVGPathElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGPathElement(const Element& element) { return element.hasTagName(SVGNames::pathTag); }
inline bool isSVGPathElement(const Element* element) { ASSERT(element); return isSVGPathElement(*element); }
inline bool isSVGPathElement(const Node& node) { return node.isElementNode() && isSVGPathElement(toElement(node)); }
inline bool isSVGPathElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGPathElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGPathElement>(const Element& element) { return isSVGPathElement(element); }

class SVGPatternElement;
void isSVGPatternElement(const SVGPatternElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGPatternElement(const SVGPatternElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGPatternElement(const Element& element) { return element.hasTagName(SVGNames::patternTag); }
inline bool isSVGPatternElement(const Element* element) { ASSERT(element); return isSVGPatternElement(*element); }
inline bool isSVGPatternElement(const Node& node) { return node.isElementNode() && isSVGPatternElement(toElement(node)); }
inline bool isSVGPatternElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGPatternElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGPatternElement>(const Element& element) { return isSVGPatternElement(element); }

class SVGRadialGradientElement;
void isSVGRadialGradientElement(const SVGRadialGradientElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGRadialGradientElement(const SVGRadialGradientElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGRadialGradientElement(const Element& element) { return element.hasTagName(SVGNames::radialGradientTag); }
inline bool isSVGRadialGradientElement(const Element* element) { ASSERT(element); return isSVGRadialGradientElement(*element); }
inline bool isSVGRadialGradientElement(const Node& node) { return node.isElementNode() && isSVGRadialGradientElement(toElement(node)); }
inline bool isSVGRadialGradientElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGRadialGradientElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGRadialGradientElement>(const Element& element) { return isSVGRadialGradientElement(element); }

class SVGRectElement;
void isSVGRectElement(const SVGRectElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGRectElement(const SVGRectElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGRectElement(const Element& element) { return element.hasTagName(SVGNames::rectTag); }
inline bool isSVGRectElement(const Element* element) { ASSERT(element); return isSVGRectElement(*element); }
inline bool isSVGRectElement(const Node& node) { return node.isElementNode() && isSVGRectElement(toElement(node)); }
inline bool isSVGRectElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGRectElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGRectElement>(const Element& element) { return isSVGRectElement(element); }

class SVGScriptElement;
void isSVGScriptElement(const SVGScriptElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGScriptElement(const SVGScriptElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGScriptElement(const Element& element) { return element.hasTagName(SVGNames::scriptTag); }
inline bool isSVGScriptElement(const Element* element) { ASSERT(element); return isSVGScriptElement(*element); }
inline bool isSVGScriptElement(const Node& node) { return node.isElementNode() && isSVGScriptElement(toElement(node)); }
inline bool isSVGScriptElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGScriptElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGScriptElement>(const Element& element) { return isSVGScriptElement(element); }

class SVGStopElement;
void isSVGStopElement(const SVGStopElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGStopElement(const SVGStopElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGStopElement(const Element& element) { return element.hasTagName(SVGNames::stopTag); }
inline bool isSVGStopElement(const Element* element) { ASSERT(element); return isSVGStopElement(*element); }
inline bool isSVGStopElement(const Node& node) { return node.isElementNode() && isSVGStopElement(toElement(node)); }
inline bool isSVGStopElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGStopElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGStopElement>(const Element& element) { return isSVGStopElement(element); }

class SVGStyleElement;
void isSVGStyleElement(const SVGStyleElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGStyleElement(const SVGStyleElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGStyleElement(const Element& element) { return element.hasTagName(SVGNames::styleTag); }
inline bool isSVGStyleElement(const Element* element) { ASSERT(element); return isSVGStyleElement(*element); }
inline bool isSVGStyleElement(const Node& node) { return node.isElementNode() && isSVGStyleElement(toElement(node)); }
inline bool isSVGStyleElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGStyleElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGStyleElement>(const Element& element) { return isSVGStyleElement(element); }

class SVGSVGElement;
void isSVGSVGElement(const SVGSVGElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGSVGElement(const SVGSVGElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGSVGElement(const Element& element) { return element.hasTagName(SVGNames::svgTag); }
inline bool isSVGSVGElement(const Element* element) { ASSERT(element); return isSVGSVGElement(*element); }
inline bool isSVGSVGElement(const Node& node) { return node.isElementNode() && isSVGSVGElement(toElement(node)); }
inline bool isSVGSVGElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGSVGElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGSVGElement>(const Element& element) { return isSVGSVGElement(element); }

class SVGTextElement;
void isSVGTextElement(const SVGTextElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGTextElement(const SVGTextElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGTextElement(const Element& element) { return element.hasTagName(SVGNames::textTag); }
inline bool isSVGTextElement(const Element* element) { ASSERT(element); return isSVGTextElement(*element); }
inline bool isSVGTextElement(const Node& node) { return node.isElementNode() && isSVGTextElement(toElement(node)); }
inline bool isSVGTextElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGTextElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGTextElement>(const Element& element) { return isSVGTextElement(element); }

class SVGTextPathElement;
void isSVGTextPathElement(const SVGTextPathElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGTextPathElement(const SVGTextPathElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGTextPathElement(const Element& element) { return element.hasTagName(SVGNames::textPathTag); }
inline bool isSVGTextPathElement(const Element* element) { ASSERT(element); return isSVGTextPathElement(*element); }
inline bool isSVGTextPathElement(const Node& node) { return node.isElementNode() && isSVGTextPathElement(toElement(node)); }
inline bool isSVGTextPathElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGTextPathElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGTextPathElement>(const Element& element) { return isSVGTextPathElement(element); }

class SVGTitleElement;
void isSVGTitleElement(const SVGTitleElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGTitleElement(const SVGTitleElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGTitleElement(const Element& element) { return element.hasTagName(SVGNames::titleTag); }
inline bool isSVGTitleElement(const Element* element) { ASSERT(element); return isSVGTitleElement(*element); }
inline bool isSVGTitleElement(const Node& node) { return node.isElementNode() && isSVGTitleElement(toElement(node)); }
inline bool isSVGTitleElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGTitleElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGTitleElement>(const Element& element) { return isSVGTitleElement(element); }

class SVGUseElement;
void isSVGUseElement(const SVGUseElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGUseElement(const SVGUseElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGUseElement(const Element& element) { return element.hasTagName(SVGNames::useTag); }
inline bool isSVGUseElement(const Element* element) { ASSERT(element); return isSVGUseElement(*element); }
inline bool isSVGUseElement(const Node& node) { return node.isElementNode() && isSVGUseElement(toElement(node)); }
inline bool isSVGUseElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGUseElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGUseElement>(const Element& element) { return isSVGUseElement(element); }

class SVGViewElement;
void isSVGViewElement(const SVGViewElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGViewElement(const SVGViewElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGViewElement(const Element& element) { return element.hasTagName(SVGNames::viewTag); }
inline bool isSVGViewElement(const Element* element) { ASSERT(element); return isSVGViewElement(*element); }
inline bool isSVGViewElement(const Node& node) { return node.isElementNode() && isSVGViewElement(toElement(node)); }
inline bool isSVGViewElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGViewElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGViewElement>(const Element& element) { return isSVGViewElement(element); }

class SVGVKernElement;
void isSVGVKernElement(const SVGVKernElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGVKernElement(const SVGVKernElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGVKernElement(const Element& element) { return element.hasTagName(SVGNames::vkernTag); }
inline bool isSVGVKernElement(const Element* element) { ASSERT(element); return isSVGVKernElement(*element); }
inline bool isSVGVKernElement(const Node& node) { return node.isElementNode() && isSVGVKernElement(toElement(node)); }
inline bool isSVGVKernElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGVKernElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGVKernElement>(const Element& element) { return isSVGVKernElement(element); }

}

#endif
