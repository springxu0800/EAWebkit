/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSRTCDTMFSender.h"

#include "Event.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSMediaStreamTrack.h"
#include "MediaStreamTrack.h"
#include "RTCDTMFSender.h"
#include "URL.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSRTCDTMFSenderTableValues[] =
{
    { "canInsertDTMF", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDTMFSenderCanInsertDTMF), (intptr_t)0 },
    { "track", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDTMFSenderTrack), (intptr_t)0 },
    { "toneBuffer", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDTMFSenderToneBuffer), (intptr_t)0 },
    { "duration", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDTMFSenderDuration), (intptr_t)0 },
    { "interToneGap", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDTMFSenderInterToneGap), (intptr_t)0 },
    { "ontonechange", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDTMFSenderOntonechange), (intptr_t)setJSRTCDTMFSenderOntonechange },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSRTCDTMFSenderTable = { 17, 15, JSRTCDTMFSenderTableValues, 0 };
/* Hash table for prototype */

static const HashTableValue JSRTCDTMFSenderPrototypeTableValues[] =
{
    { "insertDTMF", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRTCDTMFSenderPrototypeFunctionInsertDTMF), (intptr_t)1 },
    { "addEventListener", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRTCDTMFSenderPrototypeFunctionAddEventListener), (intptr_t)2 },
    { "removeEventListener", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRTCDTMFSenderPrototypeFunctionRemoveEventListener), (intptr_t)2 },
    { "dispatchEvent", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRTCDTMFSenderPrototypeFunctionDispatchEvent), (intptr_t)1 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSRTCDTMFSenderPrototypeTable = { 8, 7, JSRTCDTMFSenderPrototypeTableValues, 0 };
const ClassInfo JSRTCDTMFSenderPrototype::s_info = { "RTCDTMFSenderPrototype", &Base::s_info, &JSRTCDTMFSenderPrototypeTable, 0, CREATE_METHOD_TABLE(JSRTCDTMFSenderPrototype) };

JSObject* JSRTCDTMFSenderPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRTCDTMFSender>(vm, globalObject);
}

bool JSRTCDTMFSenderPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSRTCDTMFSenderPrototype* thisObject = jsCast<JSRTCDTMFSenderPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSRTCDTMFSenderPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSRTCDTMFSender::s_info = { "RTCDTMFSender", &Base::s_info, &JSRTCDTMFSenderTable, 0 , CREATE_METHOD_TABLE(JSRTCDTMFSender) };

JSRTCDTMFSender::JSRTCDTMFSender(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<RTCDTMFSender> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSRTCDTMFSender::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSRTCDTMFSender::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSRTCDTMFSenderPrototype::create(vm, globalObject, JSRTCDTMFSenderPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSRTCDTMFSender::destroy(JSC::JSCell* cell)
{
    JSRTCDTMFSender* thisObject = static_cast<JSRTCDTMFSender*>(cell);
    thisObject->JSRTCDTMFSender::~JSRTCDTMFSender();
}

JSRTCDTMFSender::~JSRTCDTMFSender()
{
    releaseImplIfNotNull();
}

bool JSRTCDTMFSender::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSRTCDTMFSender* thisObject = jsCast<JSRTCDTMFSender*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSRTCDTMFSender, Base>(exec, JSRTCDTMFSenderTable, thisObject, propertyName, slot);
}

JSValue jsRTCDTMFSenderCanInsertDTMF(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCDTMFSender* castedThis = jsCast<JSRTCDTMFSender*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCDTMFSender& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.canInsertDTMF());
    return result;
}


JSValue jsRTCDTMFSenderTrack(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCDTMFSender* castedThis = jsCast<JSRTCDTMFSender*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCDTMFSender& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.track()));
    return result;
}


JSValue jsRTCDTMFSenderToneBuffer(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCDTMFSender* castedThis = jsCast<JSRTCDTMFSender*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCDTMFSender& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.toneBuffer());
    return result;
}


JSValue jsRTCDTMFSenderDuration(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCDTMFSender* castedThis = jsCast<JSRTCDTMFSender*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCDTMFSender& impl = castedThis->impl();
    JSValue result = jsNumber(impl.duration());
    return result;
}


JSValue jsRTCDTMFSenderInterToneGap(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCDTMFSender* castedThis = jsCast<JSRTCDTMFSender*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCDTMFSender& impl = castedThis->impl();
    JSValue result = jsNumber(impl.interToneGap());
    return result;
}


JSValue jsRTCDTMFSenderOntonechange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCDTMFSender* castedThis = jsCast<JSRTCDTMFSender*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCDTMFSender& impl = castedThis->impl();
    if (EventListener* listener = impl.ontonechange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


void JSRTCDTMFSender::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSRTCDTMFSender* thisObject = jsCast<JSRTCDTMFSender*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSRTCDTMFSender, Base>(exec, propertyName, value, JSRTCDTMFSenderTable, thisObject, slot);
}

void setJSRTCDTMFSenderOntonechange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSRTCDTMFSender* castedThis = jsCast<JSRTCDTMFSender*>(thisObject);
    RTCDTMFSender& impl = castedThis->impl();
    impl.setOntonechange(createJSAttributeEventListener(exec, value, thisObject));
}


EncodedJSValue JSC_HOST_CALL jsRTCDTMFSenderPrototypeFunctionInsertDTMF(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCDTMFSender::info()))
        return throwVMTypeError(exec);
    JSRTCDTMFSender* castedThis = jsCast<JSRTCDTMFSender*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCDTMFSender::info());
    RTCDTMFSender& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    const String& tones(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    size_t argsCount = exec->argumentCount();
    if (argsCount <= 1) {
        impl.insertDTMF(tones, ec);
        setDOMException(exec, ec);
        return JSValue::encode(jsUndefined());
    }

    int duration(toInt32(exec, exec->argument(1), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    if (argsCount <= 2) {
        impl.insertDTMF(tones, duration, ec);
        setDOMException(exec, ec);
        return JSValue::encode(jsUndefined());
    }

    int interToneGap(toInt32(exec, exec->argument(2), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.insertDTMF(tones, duration, interToneGap, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCDTMFSenderPrototypeFunctionAddEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCDTMFSender::info()))
        return throwVMTypeError(exec);
    JSRTCDTMFSender* castedThis = jsCast<JSRTCDTMFSender*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCDTMFSender::info());
    RTCDTMFSender& impl = castedThis->impl();
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl.addEventListener(exec->argument(0).toString(exec)->value(exec), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCDTMFSenderPrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCDTMFSender::info()))
        return throwVMTypeError(exec);
    JSRTCDTMFSender* castedThis = jsCast<JSRTCDTMFSender*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCDTMFSender::info());
    RTCDTMFSender& impl = castedThis->impl();
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl.removeEventListener(exec->argument(0).toString(exec)->value(exec), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)).get(), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCDTMFSenderPrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCDTMFSender::info()))
        return throwVMTypeError(exec);
    JSRTCDTMFSender* castedThis = jsCast<JSRTCDTMFSender*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCDTMFSender::info());
    RTCDTMFSender& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    Event* event(toEvent(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl.dispatchEvent(event, ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

void JSRTCDTMFSender::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    JSRTCDTMFSender* thisObject = jsCast<JSRTCDTMFSender*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    COMPILE_ASSERT(StructureFlags & OverridesVisitChildren, OverridesVisitChildrenWithoutSettingFlag);
    ASSERT(thisObject->structure()->typeInfo().overridesVisitChildren());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl().visitJSEventListeners(visitor);
}

static inline bool isObservable(JSRTCDTMFSender* jsRTCDTMFSender)
{
    if (jsRTCDTMFSender->hasCustomProperties())
        return true;
    if (jsRTCDTMFSender->impl().hasEventListeners())
        return true;
    return false;
}

bool JSRTCDTMFSenderOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSRTCDTMFSender* jsRTCDTMFSender = jsCast<JSRTCDTMFSender*>(handle.get().asCell());
    if (jsRTCDTMFSender->impl().hasPendingActivity())
        return true;
    if (jsRTCDTMFSender->impl().isFiringEventListeners())
        return true;
    if (!isObservable(jsRTCDTMFSender))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSRTCDTMFSenderOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSRTCDTMFSender* jsRTCDTMFSender = jsCast<JSRTCDTMFSender*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsRTCDTMFSender->impl(), jsRTCDTMFSender);
    jsRTCDTMFSender->releaseImpl();
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCDTMFSender@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore13RTCDTMFSenderE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, RTCDTMFSender* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSRTCDTMFSender>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7RTCDTMFSender@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore13RTCDTMFSenderE[2];
#if COMPILER(CLANG)
    // If this fails RTCDTMFSender does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(RTCDTMFSender), RTCDTMFSender_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // RTCDTMFSender has subclasses. If RTCDTMFSender has subclasses that get passed
    // to toJS() we currently require RTCDTMFSender you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<RTCDTMFSender>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSRTCDTMFSender>(exec, globalObject, impl);
}

RTCDTMFSender* toRTCDTMFSender(JSC::JSValue value)
{
    return value.inherits(JSRTCDTMFSender::info()) ? &jsCast<JSRTCDTMFSender*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
