/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(TOUCH_EVENTS)

#include "JSTouchEvent.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSDOMWindow.h"
#include "JSTouchList.h"
#include "TouchEvent.h"
#include "TouchList.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSTouchEventTableValues[] =
{
    { "touches", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTouchEventTouches), (intptr_t)0 },
    { "targetTouches", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTouchEventTargetTouches), (intptr_t)0 },
    { "changedTouches", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTouchEventChangedTouches), (intptr_t)0 },
    { "ctrlKey", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTouchEventCtrlKey), (intptr_t)0 },
    { "shiftKey", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTouchEventShiftKey), (intptr_t)0 },
    { "altKey", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTouchEventAltKey), (intptr_t)0 },
    { "metaKey", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTouchEventMetaKey), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTouchEventConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSTouchEventTable = { 19, 15, JSTouchEventTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSTouchEventConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSTouchEventConstructorTable = { 1, 0, JSTouchEventConstructorTableValues, 0 };
const ClassInfo JSTouchEventConstructor::s_info = { "TouchEventConstructor", &Base::s_info, &JSTouchEventConstructorTable, 0, CREATE_METHOD_TABLE(JSTouchEventConstructor) };

JSTouchEventConstructor::JSTouchEventConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSTouchEventConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSTouchEventPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSTouchEventConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSTouchEventConstructor, JSDOMWrapper>(exec, JSTouchEventConstructorTable, jsCast<JSTouchEventConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSTouchEventPrototypeTableValues[] =
{
    { "initTouchEvent", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsTouchEventPrototypeFunctionInitTouchEvent), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSTouchEventPrototypeTable = { 2, 1, JSTouchEventPrototypeTableValues, 0 };
const ClassInfo JSTouchEventPrototype::s_info = { "TouchEventPrototype", &Base::s_info, &JSTouchEventPrototypeTable, 0, CREATE_METHOD_TABLE(JSTouchEventPrototype) };

JSObject* JSTouchEventPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSTouchEvent>(vm, globalObject);
}

bool JSTouchEventPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSTouchEventPrototype* thisObject = jsCast<JSTouchEventPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSTouchEventPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSTouchEvent::s_info = { "TouchEvent", &Base::s_info, &JSTouchEventTable, 0 , CREATE_METHOD_TABLE(JSTouchEvent) };

JSTouchEvent::JSTouchEvent(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<TouchEvent> impl)
    : JSUIEvent(structure, globalObject, impl)
{
}

void JSTouchEvent::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSTouchEvent::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSTouchEventPrototype::create(vm, globalObject, JSTouchEventPrototype::createStructure(vm, globalObject, JSUIEventPrototype::self(vm, globalObject)));
}

bool JSTouchEvent::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSTouchEvent* thisObject = jsCast<JSTouchEvent*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSTouchEvent, Base>(exec, JSTouchEventTable, thisObject, propertyName, slot);
}

JSValue jsTouchEventTouches(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSTouchEvent* castedThis = jsCast<JSTouchEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    TouchEvent& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.touches()));
    return result;
}


JSValue jsTouchEventTargetTouches(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSTouchEvent* castedThis = jsCast<JSTouchEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    TouchEvent& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.targetTouches()));
    return result;
}


JSValue jsTouchEventChangedTouches(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSTouchEvent* castedThis = jsCast<JSTouchEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    TouchEvent& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.changedTouches()));
    return result;
}


JSValue jsTouchEventCtrlKey(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSTouchEvent* castedThis = jsCast<JSTouchEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    TouchEvent& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.ctrlKey());
    return result;
}


JSValue jsTouchEventShiftKey(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSTouchEvent* castedThis = jsCast<JSTouchEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    TouchEvent& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.shiftKey());
    return result;
}


JSValue jsTouchEventAltKey(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSTouchEvent* castedThis = jsCast<JSTouchEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    TouchEvent& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.altKey());
    return result;
}


JSValue jsTouchEventMetaKey(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSTouchEvent* castedThis = jsCast<JSTouchEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    TouchEvent& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.metaKey());
    return result;
}


JSValue jsTouchEventConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSTouchEvent* domObject = jsCast<JSTouchEvent*>(asObject(slotBase));
    return JSTouchEvent::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSTouchEvent::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSTouchEventConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsTouchEventPrototypeFunctionInitTouchEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSTouchEvent::info()))
        return throwVMTypeError(exec);
    JSTouchEvent* castedThis = jsCast<JSTouchEvent*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSTouchEvent::info());
    TouchEvent& impl = castedThis->impl();
    TouchList* touches(toTouchList(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    TouchList* targetTouches(toTouchList(exec->argument(1)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    TouchList* changedTouches(toTouchList(exec->argument(2)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& type(exec->argument(3).isEmpty() ? String() : exec->argument(3).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    DOMWindow* view(toDOMWindow(exec->argument(4)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int screenX(toInt32(exec, exec->argument(5), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int screenY(toInt32(exec, exec->argument(6), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int clientX(toInt32(exec, exec->argument(7), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int clientY(toInt32(exec, exec->argument(8), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool ctrlKey(exec->argument(9).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool altKey(exec->argument(10).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool shiftKey(exec->argument(11).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool metaKey(exec->argument(12).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.initTouchEvent(touches, targetTouches, changedTouches, type, view, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey);
    return JSValue::encode(jsUndefined());
}


}

#endif // ENABLE(TOUCH_EVENTS)
