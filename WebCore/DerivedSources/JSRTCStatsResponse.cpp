/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSRTCStatsResponse.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSRTCStatsReport.h"
#include "RTCStatsReport.h"
#include "RTCStatsResponse.h"
#include "wtf/text/AtomicString.h"
#include <runtime/Error.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table for prototype */

static const HashTableValue JSRTCStatsResponsePrototypeTableValues[] =
{
    { "result", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRTCStatsResponsePrototypeFunctionResult), (intptr_t)0 },
    { "namedItem", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsRTCStatsResponsePrototypeFunctionNamedItem), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSRTCStatsResponsePrototypeTable = { 4, 3, JSRTCStatsResponsePrototypeTableValues, 0 };
const ClassInfo JSRTCStatsResponsePrototype::s_info = { "RTCStatsResponsePrototype", &Base::s_info, &JSRTCStatsResponsePrototypeTable, 0, CREATE_METHOD_TABLE(JSRTCStatsResponsePrototype) };

JSObject* JSRTCStatsResponsePrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRTCStatsResponse>(vm, globalObject);
}

bool JSRTCStatsResponsePrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSRTCStatsResponsePrototype* thisObject = jsCast<JSRTCStatsResponsePrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSRTCStatsResponsePrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSRTCStatsResponse::s_info = { "RTCStatsResponse", &Base::s_info, 0, 0 , CREATE_METHOD_TABLE(JSRTCStatsResponse) };

JSRTCStatsResponse::JSRTCStatsResponse(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<RTCStatsResponse> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSRTCStatsResponse::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSRTCStatsResponse::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSRTCStatsResponsePrototype::create(vm, globalObject, JSRTCStatsResponsePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSRTCStatsResponse::destroy(JSC::JSCell* cell)
{
    JSRTCStatsResponse* thisObject = static_cast<JSRTCStatsResponse*>(cell);
    thisObject->JSRTCStatsResponse::~JSRTCStatsResponse();
}

JSRTCStatsResponse::~JSRTCStatsResponse()
{
    releaseImplIfNotNull();
}

bool JSRTCStatsResponse::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSRTCStatsResponse* thisObject = jsCast<JSRTCStatsResponse*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    const HashEntry* entry = getStaticValueSlotEntryWithoutCaching<JSRTCStatsResponse>(exec, propertyName);
    if (entry) {
        slot.setCustom(thisObject, entry->attributes(), entry->propertyGetter());
        return true;
    }
    if (canGetItemsForName(exec, &thisObject->impl(), propertyName)) {
        slot.setCustom(thisObject, ReadOnly | DontDelete | DontEnum, thisObject->nameGetter);
        return true;
    }
    return Base::getOwnPropertySlot(thisObject, exec, propertyName, slot);
}

bool JSRTCStatsResponse::getOwnPropertySlotByIndex(JSObject* object, ExecState* exec, unsigned index, PropertySlot& slot)
{
    JSRTCStatsResponse* thisObject = jsCast<JSRTCStatsResponse*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    PropertyName propertyName = Identifier::from(exec, index);
    if (canGetItemsForName(exec, &thisObject->impl(), propertyName)) {
        slot.setCustom(thisObject, ReadOnly | DontDelete | DontEnum, thisObject->nameGetter);
        return true;
    }
    return Base::getOwnPropertySlotByIndex(thisObject, exec, index, slot);
}

EncodedJSValue JSC_HOST_CALL jsRTCStatsResponsePrototypeFunctionResult(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCStatsResponse::info()))
        return throwVMTypeError(exec);
    JSRTCStatsResponse* castedThis = jsCast<JSRTCStatsResponse*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCStatsResponse::info());
    RTCStatsResponse& impl = castedThis->impl();

    JSC::JSValue result = jsArray(exec, castedThis->globalObject(), impl.result());
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRTCStatsResponsePrototypeFunctionNamedItem(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSRTCStatsResponse::info()))
        return throwVMTypeError(exec);
    JSRTCStatsResponse* castedThis = jsCast<JSRTCStatsResponse*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCStatsResponse::info());
    RTCStatsResponse& impl = castedThis->impl();
    const String& name(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.namedItem(name)));
    return JSValue::encode(result);
}

static inline bool isObservable(JSRTCStatsResponse* jsRTCStatsResponse)
{
    if (jsRTCStatsResponse->hasCustomProperties())
        return true;
    return false;
}

bool JSRTCStatsResponseOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSRTCStatsResponse* jsRTCStatsResponse = jsCast<JSRTCStatsResponse*>(handle.get().asCell());
    if (!isObservable(jsRTCStatsResponse))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSRTCStatsResponseOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSRTCStatsResponse* jsRTCStatsResponse = jsCast<JSRTCStatsResponse*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsRTCStatsResponse->impl(), jsRTCStatsResponse);
    jsRTCStatsResponse->releaseImpl();
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCStatsResponse@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore16RTCStatsResponseE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, RTCStatsResponse* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSRTCStatsResponse>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7RTCStatsResponse@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore16RTCStatsResponseE[2];
#if COMPILER(CLANG)
    // If this fails RTCStatsResponse does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(RTCStatsResponse), RTCStatsResponse_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // RTCStatsResponse has subclasses. If RTCStatsResponse has subclasses that get passed
    // to toJS() we currently require RTCStatsResponse you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<RTCStatsResponse>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSRTCStatsResponse>(exec, globalObject, impl);
}

RTCStatsResponse* toRTCStatsResponse(JSC::JSValue value)
{
    return value.inherits(JSRTCStatsResponse::info()) ? &jsCast<JSRTCStatsResponse*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
