/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDocument.h"

#include "Attr.h"
#include "CDATASection.h"
#include "CSSStyleDeclaration.h"
#include "CanvasRenderingContext.h"
#include "Comment.h"
#include "DOMImplementation.h"
#include "DOMNamedFlowCollection.h"
#include "DOMSelection.h"
#include "DOMWindow.h"
#include "Document.h"
#include "DocumentFragment.h"
#include "DocumentType.h"
#include "Element.h"
#include "EntityReference.h"
#include "Event.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "HTMLCollection.h"
#include "HTMLElement.h"
#include "HTMLHeadElement.h"
#include "HTMLScriptElement.h"
#include "JSAttr.h"
#include "JSCDATASection.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCanvasRenderingContext.h"
#include "JSComment.h"
#include "JSCustomXPathNSResolver.h"
#include "JSDOMBinding.h"
#include "JSDOMImplementation.h"
#include "JSDOMSelection.h"
#include "JSDOMWindow.h"
#include "JSDocumentFragment.h"
#include "JSDocumentType.h"
#include "JSElement.h"
#include "JSEntityReference.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSEventTarget.h"
#include "JSHTMLCollection.h"
#include "JSHTMLElement.h"
#include "JSHTMLHeadElement.h"
#include "JSHTMLScriptElement.h"
#include "JSNode.h"
#include "JSNodeFilter.h"
#include "JSNodeIterator.h"
#include "JSNodeList.h"
#include "JSProcessingInstruction.h"
#include "JSRange.h"
#include "JSStyleSheetList.h"
#include "JSText.h"
#include "JSTouch.h"
#include "JSTreeWalker.h"
#include "JSXPathExpression.h"
#include "JSXPathNSResolver.h"
#include "JSXPathResult.h"
#include "NameNodeList.h"
#include "Node.h"
#include "NodeIterator.h"
#include "NodeList.h"
#include "ProcessingInstruction.h"
#include "Range.h"
#include "StylePropertySet.h"
#include "StyleSheetList.h"
#include "Text.h"
#include "Touch.h"
#include "TouchList.h"
#include "TreeWalker.h"
#include "URL.h"
#include "XPathExpression.h"
#include "XPathNSResolver.h"
#include "XPathResult.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

#if ENABLE(CSP_NEXT)
#include "DOMSecurityPolicy.h"
#include "JSDOMSecurityPolicy.h"
#endif

#if ENABLE(CSS_REGIONS)
#include "JSDOMNamedFlowCollection.h"
#endif

#if ENABLE(FONT_LOAD_EVENTS)
#include "FontLoader.h"
#include "JSFontLoader.h"
#endif

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSDocumentTableValues[] =
{
    { "doctype", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentDoctype), (intptr_t)0 },
    { "implementation", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentImplementation), (intptr_t)0 },
    { "documentElement", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentDocumentElement), (intptr_t)0 },
    { "inputEncoding", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentInputEncoding), (intptr_t)0 },
    { "xmlEncoding", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentXMLEncoding), (intptr_t)0 },
    { "xmlVersion", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentXMLVersion), (intptr_t)setJSDocumentXMLVersion },
    { "xmlStandalone", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentXMLStandalone), (intptr_t)setJSDocumentXMLStandalone },
    { "documentURI", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentDocumentURI), (intptr_t)0 },
    { "defaultView", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentDefaultView), (intptr_t)0 },
    { "styleSheets", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentStyleSheets), (intptr_t)0 },
    { "title", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentTitle), (intptr_t)setJSDocumentTitle },
    { "referrer", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentReferrer), (intptr_t)0 },
    { "domain", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentDomain), (intptr_t)setJSDocumentDomain },
    { "URL", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentURL), (intptr_t)0 },
    { "cookie", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentCookie), (intptr_t)setJSDocumentCookie },
    { "body", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentBody), (intptr_t)setJSDocumentBody },
    { "head", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentHead), (intptr_t)0 },
    { "images", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentImages), (intptr_t)0 },
    { "applets", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentApplets), (intptr_t)0 },
    { "links", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentLinks), (intptr_t)0 },
    { "forms", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentForms), (intptr_t)0 },
    { "anchors", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentAnchors), (intptr_t)0 },
    { "lastModified", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentLastModified), (intptr_t)0 },
    { "location", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentLocation), (intptr_t)setJSDocumentLocation },
    { "charset", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentCharset), (intptr_t)setJSDocumentCharset },
    { "defaultCharset", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentDefaultCharset), (intptr_t)0 },
    { "readyState", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentReadyState), (intptr_t)0 },
    { "characterSet", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentCharacterSet), (intptr_t)0 },
    { "preferredStylesheetSet", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentPreferredStylesheetSet), (intptr_t)0 },
    { "selectedStylesheetSet", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentSelectedStylesheetSet), (intptr_t)setJSDocumentSelectedStylesheetSet },
    { "compatMode", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentCompatMode), (intptr_t)0 },
    { "webkitIsFullScreen", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentWebkitIsFullScreen), (intptr_t)0 },
    { "webkitFullScreenKeyboardInputAllowed", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentWebkitFullScreenKeyboardInputAllowed), (intptr_t)0 },
    { "webkitCurrentFullScreenElement", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentWebkitCurrentFullScreenElement), (intptr_t)0 },
    { "webkitFullscreenEnabled", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentWebkitFullscreenEnabled), (intptr_t)0 },
    { "webkitFullscreenElement", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentWebkitFullscreenElement), (intptr_t)0 },
#if ENABLE(POINTER_LOCK)
    { "webkitPointerLockElement", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentWebkitPointerLockElement), (intptr_t)0 },
#endif
#if ENABLE(FONT_LOAD_EVENTS)
    { "fontloader", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentFontloader), (intptr_t)0 },
#endif
    { "onabort", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnabort), (intptr_t)setJSDocumentOnabort },
    { "onblur", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnblur), (intptr_t)setJSDocumentOnblur },
    { "onchange", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnchange), (intptr_t)setJSDocumentOnchange },
    { "onclick", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnclick), (intptr_t)setJSDocumentOnclick },
    { "oncontextmenu", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOncontextmenu), (intptr_t)setJSDocumentOncontextmenu },
    { "ondblclick", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOndblclick), (intptr_t)setJSDocumentOndblclick },
    { "ondrag", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOndrag), (intptr_t)setJSDocumentOndrag },
    { "ondragend", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOndragend), (intptr_t)setJSDocumentOndragend },
    { "ondragenter", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOndragenter), (intptr_t)setJSDocumentOndragenter },
    { "ondragleave", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOndragleave), (intptr_t)setJSDocumentOndragleave },
    { "ondragover", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOndragover), (intptr_t)setJSDocumentOndragover },
    { "ondragstart", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOndragstart), (intptr_t)setJSDocumentOndragstart },
    { "ondrop", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOndrop), (intptr_t)setJSDocumentOndrop },
    { "onerror", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnerror), (intptr_t)setJSDocumentOnerror },
    { "onfocus", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnfocus), (intptr_t)setJSDocumentOnfocus },
    { "oninput", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOninput), (intptr_t)setJSDocumentOninput },
    { "oninvalid", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOninvalid), (intptr_t)setJSDocumentOninvalid },
    { "onkeydown", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnkeydown), (intptr_t)setJSDocumentOnkeydown },
    { "onkeypress", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnkeypress), (intptr_t)setJSDocumentOnkeypress },
    { "onkeyup", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnkeyup), (intptr_t)setJSDocumentOnkeyup },
    { "onload", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnload), (intptr_t)setJSDocumentOnload },
    { "onmousedown", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnmousedown), (intptr_t)setJSDocumentOnmousedown },
    { "onmouseenter", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnmouseenter), (intptr_t)setJSDocumentOnmouseenter },
    { "onmouseleave", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnmouseleave), (intptr_t)setJSDocumentOnmouseleave },
    { "onmousemove", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnmousemove), (intptr_t)setJSDocumentOnmousemove },
    { "onmouseout", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnmouseout), (intptr_t)setJSDocumentOnmouseout },
    { "onmouseover", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnmouseover), (intptr_t)setJSDocumentOnmouseover },
    { "onmouseup", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnmouseup), (intptr_t)setJSDocumentOnmouseup },
    { "onmousewheel", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnmousewheel), (intptr_t)setJSDocumentOnmousewheel },
    { "onreadystatechange", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnreadystatechange), (intptr_t)setJSDocumentOnreadystatechange },
    { "onscroll", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnscroll), (intptr_t)setJSDocumentOnscroll },
    { "onselect", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnselect), (intptr_t)setJSDocumentOnselect },
    { "onsubmit", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnsubmit), (intptr_t)setJSDocumentOnsubmit },
    { "onwheel", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnwheel), (intptr_t)setJSDocumentOnwheel },
    { "onbeforecut", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnbeforecut), (intptr_t)setJSDocumentOnbeforecut },
    { "oncut", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOncut), (intptr_t)setJSDocumentOncut },
    { "onbeforecopy", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnbeforecopy), (intptr_t)setJSDocumentOnbeforecopy },
    { "oncopy", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOncopy), (intptr_t)setJSDocumentOncopy },
    { "onbeforepaste", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnbeforepaste), (intptr_t)setJSDocumentOnbeforepaste },
    { "onpaste", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnpaste), (intptr_t)setJSDocumentOnpaste },
    { "onreset", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnreset), (intptr_t)setJSDocumentOnreset },
    { "onsearch", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnsearch), (intptr_t)setJSDocumentOnsearch },
    { "onselectstart", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnselectstart), (intptr_t)setJSDocumentOnselectstart },
    { "onselectionchange", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnselectionchange), (intptr_t)setJSDocumentOnselectionchange },
#if ENABLE(TOUCH_EVENTS)
    { "ontouchstart", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOntouchstart), (intptr_t)setJSDocumentOntouchstart },
#endif
#if ENABLE(TOUCH_EVENTS)
    { "ontouchmove", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOntouchmove), (intptr_t)setJSDocumentOntouchmove },
#endif
#if ENABLE(TOUCH_EVENTS)
    { "ontouchend", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOntouchend), (intptr_t)setJSDocumentOntouchend },
#endif
#if ENABLE(TOUCH_EVENTS)
    { "ontouchcancel", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOntouchcancel), (intptr_t)setJSDocumentOntouchcancel },
#endif
#if ENABLE(FULLSCREEN_API)
    { "onwebkitfullscreenchange", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnwebkitfullscreenchange), (intptr_t)setJSDocumentOnwebkitfullscreenchange },
#endif
#if ENABLE(FULLSCREEN_API)
    { "onwebkitfullscreenerror", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnwebkitfullscreenerror), (intptr_t)setJSDocumentOnwebkitfullscreenerror },
#endif
#if ENABLE(POINTER_LOCK)
    { "onwebkitpointerlockchange", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnwebkitpointerlockchange), (intptr_t)setJSDocumentOnwebkitpointerlockchange },
#endif
#if ENABLE(POINTER_LOCK)
    { "onwebkitpointerlockerror", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnwebkitpointerlockerror), (intptr_t)setJSDocumentOnwebkitpointerlockerror },
#endif
#if ENABLE(CSP_NEXT)
    { "onsecuritypolicyviolation", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentOnsecuritypolicyviolation), (intptr_t)setJSDocumentOnsecuritypolicyviolation },
#endif
#if ENABLE(PAGE_VISIBILITY_API)
    { "visibilityState", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentVisibilityState), (intptr_t)0 },
#endif
#if ENABLE(PAGE_VISIBILITY_API)
    { "hidden", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentHidden), (intptr_t)0 },
#endif
#if ENABLE(CSP_NEXT)
    { "securityPolicy", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentSecurityPolicy), (intptr_t)0 },
#endif
    { "currentScript", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentCurrentScript), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSDocumentTable = { 270, 255, JSDocumentTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSDocumentConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSDocumentConstructorTable = { 1, 0, JSDocumentConstructorTableValues, 0 };
const ClassInfo JSDocumentConstructor::s_info = { "DocumentConstructor", &Base::s_info, &JSDocumentConstructorTable, 0, CREATE_METHOD_TABLE(JSDocumentConstructor) };

JSDocumentConstructor::JSDocumentConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSDocumentConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSDocumentPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSDocumentConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSDocumentConstructor, JSDOMWrapper>(exec, JSDocumentConstructorTable, jsCast<JSDocumentConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSDocumentPrototypeTableValues[] =
{
    { "createElement", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateElement), (intptr_t)0 },
    { "createDocumentFragment", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateDocumentFragment), (intptr_t)0 },
    { "createTextNode", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateTextNode), (intptr_t)0 },
    { "createComment", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateComment), (intptr_t)0 },
    { "createCDATASection", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateCDATASection), (intptr_t)0 },
    { "createProcessingInstruction", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateProcessingInstruction), (intptr_t)0 },
    { "createAttribute", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateAttribute), (intptr_t)0 },
    { "createEntityReference", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateEntityReference), (intptr_t)0 },
    { "getElementsByTagName", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionGetElementsByTagName), (intptr_t)0 },
    { "importNode", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionImportNode), (intptr_t)0 },
    { "createElementNS", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateElementNS), (intptr_t)0 },
    { "createAttributeNS", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateAttributeNS), (intptr_t)0 },
    { "getElementsByTagNameNS", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionGetElementsByTagNameNS), (intptr_t)0 },
    { "getElementById", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionGetElementById), (intptr_t)0 },
    { "adoptNode", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionAdoptNode), (intptr_t)0 },
    { "createEvent", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateEvent), (intptr_t)0 },
    { "createRange", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateRange), (intptr_t)0 },
    { "createNodeIterator", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateNodeIterator), (intptr_t)0 },
    { "createTreeWalker", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateTreeWalker), (intptr_t)0 },
    { "getOverrideStyle", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionGetOverrideStyle), (intptr_t)0 },
    { "createExpression", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateExpression), (intptr_t)0 },
    { "createNSResolver", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateNSResolver), (intptr_t)1 },
    { "evaluate", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionEvaluate), (intptr_t)0 },
    { "execCommand", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionExecCommand), (intptr_t)0 },
    { "queryCommandEnabled", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionQueryCommandEnabled), (intptr_t)0 },
    { "queryCommandIndeterm", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionQueryCommandIndeterm), (intptr_t)0 },
    { "queryCommandState", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionQueryCommandState), (intptr_t)0 },
    { "queryCommandSupported", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionQueryCommandSupported), (intptr_t)0 },
    { "queryCommandValue", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionQueryCommandValue), (intptr_t)0 },
    { "getElementsByName", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionGetElementsByName), (intptr_t)0 },
    { "elementFromPoint", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionElementFromPoint), (intptr_t)0 },
    { "caretRangeFromPoint", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCaretRangeFromPoint), (intptr_t)0 },
    { "getSelection", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionGetSelection), (intptr_t)0 },
    { "getCSSCanvasContext", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionGetCSSCanvasContext), (intptr_t)4 },
    { "getElementsByClassName", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionGetElementsByClassName), (intptr_t)0 },
    { "querySelector", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionQuerySelector), (intptr_t)1 },
    { "querySelectorAll", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionQuerySelectorAll), (intptr_t)1 },
    { "webkitCancelFullScreen", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionWebkitCancelFullScreen), (intptr_t)0 },
    { "webkitExitFullscreen", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionWebkitExitFullscreen), (intptr_t)0 },
#if ENABLE(POINTER_LOCK)
    { "webkitExitPointerLock", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionWebkitExitPointerLock), (intptr_t)0 },
#endif
#if ENABLE(CSS_REGIONS)
    { "webkitGetNamedFlows", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionWebkitGetNamedFlows), (intptr_t)0 },
#endif
    { "createTouch", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateTouch), (intptr_t)0 },
    { "createTouchList", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDocumentPrototypeFunctionCreateTouchList), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSDocumentPrototypeTable = { 136, 127, JSDocumentPrototypeTableValues, 0 };
const ClassInfo JSDocumentPrototype::s_info = { "DocumentPrototype", &Base::s_info, &JSDocumentPrototypeTable, 0, CREATE_METHOD_TABLE(JSDocumentPrototype) };

JSObject* JSDocumentPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDocument>(vm, globalObject);
}

bool JSDocumentPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSDocumentPrototype* thisObject = jsCast<JSDocumentPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSDocumentPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSDocument::s_info = { "Document", &Base::s_info, &JSDocumentTable, 0 , CREATE_METHOD_TABLE(JSDocument) };

JSDocument::JSDocument(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<Document> impl)
    : JSNode(structure, globalObject, impl)
{
}

void JSDocument::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSDocument::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDocumentPrototype::create(vm, globalObject, JSDocumentPrototype::createStructure(vm, globalObject, JSNodePrototype::self(vm, globalObject)));
}

JSValue jsDocumentDoctype(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.doctype()));
    return result;
}


JSValue jsDocumentImplementation(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.implementation()));
    return result;
}


JSValue jsDocumentDocumentElement(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.documentElement()));
    return result;
}


JSValue jsDocumentInputEncoding(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.inputEncoding());
    return result;
}


JSValue jsDocumentXMLEncoding(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.xmlEncoding());
    return result;
}


JSValue jsDocumentXMLVersion(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.xmlVersion());
    return result;
}


JSValue jsDocumentXMLStandalone(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.xmlStandalone());
    return result;
}


JSValue jsDocumentDocumentURI(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.documentURI());
    return result;
}


JSValue jsDocumentDefaultView(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.defaultView()));
    return result;
}


JSValue jsDocumentStyleSheets(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.styleSheets()));
    return result;
}


JSValue jsDocumentTitle(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.title());
    return result;
}


JSValue jsDocumentReferrer(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.referrer());
    return result;
}


JSValue jsDocumentDomain(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.domain());
    return result;
}


JSValue jsDocumentURL(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.url());
    return result;
}


JSValue jsDocumentCookie(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    ExceptionCode ec = 0;
    Document& impl = castedThis->impl();
    JSC::JSValue result = jsStringWithCache(exec, impl.cookie(ec));
    setDOMException(exec, ec);
    return result;
}


JSValue jsDocumentBody(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.body()));
    return result;
}


JSValue jsDocumentHead(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.head()));
    return result;
}


JSValue jsDocumentImages(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.images()));
    return result;
}


JSValue jsDocumentApplets(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.applets()));
    return result;
}


JSValue jsDocumentLinks(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.links()));
    return result;
}


JSValue jsDocumentForms(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.forms()));
    return result;
}


JSValue jsDocumentAnchors(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.anchors()));
    return result;
}


JSValue jsDocumentLastModified(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.lastModified());
    return result;
}


JSValue jsDocumentLocation(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    return castedThis->location(exec);
}


JSValue jsDocumentCharset(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringOrUndefined(exec, impl.charset());
    return result;
}


JSValue jsDocumentDefaultCharset(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringOrUndefined(exec, impl.defaultCharset());
    return result;
}


JSValue jsDocumentReadyState(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringOrUndefined(exec, impl.readyState());
    return result;
}


JSValue jsDocumentCharacterSet(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.characterSet());
    return result;
}


JSValue jsDocumentPreferredStylesheetSet(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.preferredStylesheetSet());
    return result;
}


JSValue jsDocumentSelectedStylesheetSet(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.selectedStylesheetSet());
    return result;
}


JSValue jsDocumentCompatMode(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.compatMode());
    return result;
}


JSValue jsDocumentWebkitIsFullScreen(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.webkitIsFullScreen());
    return result;
}


JSValue jsDocumentWebkitFullScreenKeyboardInputAllowed(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.webkitFullScreenKeyboardInputAllowed());
    return result;
}


JSValue jsDocumentWebkitCurrentFullScreenElement(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.webkitCurrentFullScreenElement()));
    return result;
}


JSValue jsDocumentWebkitFullscreenEnabled(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.webkitFullscreenEnabled());
    return result;
}


JSValue jsDocumentWebkitFullscreenElement(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.webkitFullscreenElement()));
    return result;
}


#if ENABLE(POINTER_LOCK)
JSValue jsDocumentWebkitPointerLockElement(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.webkitPointerLockElement()));
    return result;
}

#endif

#if ENABLE(FONT_LOAD_EVENTS)
JSValue jsDocumentFontloader(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.fontloader()));
    return result;
}

#endif

JSValue jsDocumentOnabort(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onabort()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnblur(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onblur()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnchange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onchange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnclick(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onclick()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOncontextmenu(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.oncontextmenu()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOndblclick(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.ondblclick()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOndrag(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.ondrag()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOndragend(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragend()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOndragenter(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragenter()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOndragleave(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragleave()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOndragover(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragover()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOndragstart(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragstart()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOndrop(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.ondrop()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnerror(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onerror()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnfocus(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onfocus()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOninput(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.oninput()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOninvalid(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.oninvalid()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnkeydown(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onkeydown()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnkeypress(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onkeypress()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnkeyup(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onkeyup()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnload(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onload()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnmousedown(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onmousedown()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnmouseenter(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseenter()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnmouseleave(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseleave()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnmousemove(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onmousemove()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnmouseout(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseout()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnmouseover(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseover()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnmouseup(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseup()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnmousewheel(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onmousewheel()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnreadystatechange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onreadystatechange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnscroll(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onscroll()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnselect(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onselect()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnsubmit(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onsubmit()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnwheel(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onwheel()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnbeforecut(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onbeforecut()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOncut(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.oncut()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnbeforecopy(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onbeforecopy()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOncopy(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.oncopy()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnbeforepaste(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onbeforepaste()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnpaste(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onpaste()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnreset(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onreset()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnsearch(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onsearch()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnselectstart(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onselectstart()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsDocumentOnselectionchange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onselectionchange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


#if ENABLE(TOUCH_EVENTS)
JSValue jsDocumentOntouchstart(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.ontouchstart()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}

#endif

#if ENABLE(TOUCH_EVENTS)
JSValue jsDocumentOntouchmove(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.ontouchmove()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}

#endif

#if ENABLE(TOUCH_EVENTS)
JSValue jsDocumentOntouchend(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.ontouchend()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}

#endif

#if ENABLE(TOUCH_EVENTS)
JSValue jsDocumentOntouchcancel(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.ontouchcancel()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}

#endif

#if ENABLE(FULLSCREEN_API)
JSValue jsDocumentOnwebkitfullscreenchange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onwebkitfullscreenchange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}

#endif

#if ENABLE(FULLSCREEN_API)
JSValue jsDocumentOnwebkitfullscreenerror(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onwebkitfullscreenerror()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}

#endif

#if ENABLE(POINTER_LOCK)
JSValue jsDocumentOnwebkitpointerlockchange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onwebkitpointerlockchange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}

#endif

#if ENABLE(POINTER_LOCK)
JSValue jsDocumentOnwebkitpointerlockerror(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onwebkitpointerlockerror()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}

#endif

#if ENABLE(CSP_NEXT)
JSValue jsDocumentOnsecuritypolicyviolation(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    if (EventListener* listener = impl.onsecuritypolicyviolation()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}

#endif

#if ENABLE(PAGE_VISIBILITY_API)
JSValue jsDocumentVisibilityState(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.visibilityState());
    return result;
}

#endif

#if ENABLE(PAGE_VISIBILITY_API)
JSValue jsDocumentHidden(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.hidden());
    return result;
}

#endif

#if ENABLE(CSP_NEXT)
JSValue jsDocumentSecurityPolicy(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.securityPolicy()));
    return result;
}

#endif

JSValue jsDocumentCurrentScript(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Document& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.currentScript()));
    return result;
}


JSValue jsDocumentConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDocument* domObject = jsCast<JSDocument*>(asObject(slotBase));
    return JSDocument::getConstructor(exec->vm(), domObject->globalObject());
}

void JSDocument::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSDocument* thisObject = jsCast<JSDocument*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSDocument, Base>(exec, propertyName, value, JSDocumentTable, thisObject, slot);
}

void setJSDocumentXMLVersion(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setXMLVersion(nativeValue, ec);
    setDOMException(exec, ec);
}


void setJSDocumentXMLStandalone(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    bool nativeValue(value.toBoolean(exec));
    if (exec->hadException())
        return;
    impl.setXMLStandalone(nativeValue, ec);
    setDOMException(exec, ec);
}


void setJSDocumentTitle(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setTitle(nativeValue);
}


void setJSDocumentDomain(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setDomain(nativeValue, ec);
    setDOMException(exec, ec);
}


void setJSDocumentCookie(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setCookie(nativeValue, ec);
    setDOMException(exec, ec);
}


void setJSDocumentBody(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    HTMLElement* nativeValue(toHTMLElement(value));
    if (exec->hadException())
        return;
    impl.setBody(nativeValue, ec);
    setDOMException(exec, ec);
}


void setJSDocumentLocation(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    jsCast<JSDocument*>(thisObject)->setLocation(exec, value);
}


void setJSDocumentCharset(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setCharset(nativeValue);
}


void setJSDocumentSelectedStylesheetSet(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setSelectedStylesheetSet(nativeValue);
}


void setJSDocumentOnabort(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnabort(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnblur(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnblur(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnchange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnchange(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnclick(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnclick(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOncontextmenu(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOncontextmenu(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOndblclick(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOndblclick(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOndrag(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOndrag(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOndragend(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOndragend(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOndragenter(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOndragenter(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOndragleave(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOndragleave(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOndragover(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOndragover(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOndragstart(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOndragstart(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOndrop(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOndrop(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnerror(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnerror(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnfocus(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnfocus(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOninput(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOninput(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOninvalid(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOninvalid(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnkeydown(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnkeydown(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnkeypress(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnkeypress(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnkeyup(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnkeyup(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnload(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnload(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnmousedown(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnmousedown(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnmouseenter(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnmouseenter(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnmouseleave(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnmouseleave(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnmousemove(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnmousemove(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnmouseout(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnmouseout(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnmouseover(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnmouseover(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnmouseup(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnmouseup(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnmousewheel(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnmousewheel(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnreadystatechange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnreadystatechange(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnscroll(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnscroll(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnselect(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnselect(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnsubmit(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnsubmit(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnwheel(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnwheel(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnbeforecut(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnbeforecut(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOncut(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOncut(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnbeforecopy(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnbeforecopy(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOncopy(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOncopy(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnbeforepaste(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnbeforepaste(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnpaste(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnpaste(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnreset(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnreset(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnsearch(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnsearch(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnselectstart(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnselectstart(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSDocumentOnselectionchange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnselectionchange(createJSAttributeEventListener(exec, value, thisObject));
}


#if ENABLE(TOUCH_EVENTS)
void setJSDocumentOntouchstart(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOntouchstart(createJSAttributeEventListener(exec, value, thisObject));
}

#endif

#if ENABLE(TOUCH_EVENTS)
void setJSDocumentOntouchmove(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOntouchmove(createJSAttributeEventListener(exec, value, thisObject));
}

#endif

#if ENABLE(TOUCH_EVENTS)
void setJSDocumentOntouchend(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOntouchend(createJSAttributeEventListener(exec, value, thisObject));
}

#endif

#if ENABLE(TOUCH_EVENTS)
void setJSDocumentOntouchcancel(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOntouchcancel(createJSAttributeEventListener(exec, value, thisObject));
}

#endif

#if ENABLE(FULLSCREEN_API)
void setJSDocumentOnwebkitfullscreenchange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnwebkitfullscreenchange(createJSAttributeEventListener(exec, value, thisObject));
}

#endif

#if ENABLE(FULLSCREEN_API)
void setJSDocumentOnwebkitfullscreenerror(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnwebkitfullscreenerror(createJSAttributeEventListener(exec, value, thisObject));
}

#endif

#if ENABLE(POINTER_LOCK)
void setJSDocumentOnwebkitpointerlockchange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnwebkitpointerlockchange(createJSAttributeEventListener(exec, value, thisObject));
}

#endif

#if ENABLE(POINTER_LOCK)
void setJSDocumentOnwebkitpointerlockerror(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnwebkitpointerlockerror(createJSAttributeEventListener(exec, value, thisObject));
}

#endif

#if ENABLE(CSP_NEXT)
void setJSDocumentOnsecuritypolicyviolation(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(thisObject);
    Document& impl = castedThis->impl();
    impl.setOnsecuritypolicyviolation(createJSAttributeEventListener(exec, value, thisObject));
}

#endif

JSValue JSDocument::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDocumentConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateElement(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& tagName(valueToStringWithNullCheck(exec, exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJSNewlyCreated(exec, castedThis->globalObject(), WTF::getPtr(impl.createElement(tagName, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateDocumentFragment(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.createDocumentFragment()));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateTextNode(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    const String& data(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJSNewlyCreated(exec, castedThis->globalObject(), WTF::getPtr(impl.createTextNode(data)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateComment(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    const String& data(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJSNewlyCreated(exec, castedThis->globalObject(), WTF::getPtr(impl.createComment(data)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateCDATASection(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& data(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJSNewlyCreated(exec, castedThis->globalObject(), WTF::getPtr(impl.createCDATASection(data, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateProcessingInstruction(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& target(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& data(exec->argument(1).isEmpty() ? String() : exec->argument(1).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJSNewlyCreated(exec, castedThis->globalObject(), WTF::getPtr(impl.createProcessingInstruction(target, data, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateAttribute(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& name(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJSNewlyCreated(exec, castedThis->globalObject(), WTF::getPtr(impl.createAttribute(name, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateEntityReference(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& name(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJSNewlyCreated(exec, castedThis->globalObject(), WTF::getPtr(impl.createEntityReference(name, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionGetElementsByTagName(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    const String& tagname(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getElementsByTagName(tagname)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionImportNode(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* importedNode(toNode(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    size_t argsCount = exec->argumentCount();
    if (argsCount <= 1) {

        JSC::JSValue result = toJSNewlyCreated(exec, castedThis->globalObject(), WTF::getPtr(impl.importNode(importedNode, ec)));
        setDOMException(exec, ec);
        return JSValue::encode(result);
    }

    bool deep(exec->argument(1).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJSNewlyCreated(exec, castedThis->globalObject(), WTF::getPtr(impl.importNode(importedNode, deep, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateElementNS(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& namespaceURI(valueToStringWithNullCheck(exec, exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& qualifiedName(valueToStringWithNullCheck(exec, exec->argument(1)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJSNewlyCreated(exec, castedThis->globalObject(), WTF::getPtr(impl.createElementNS(namespaceURI, qualifiedName, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateAttributeNS(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& namespaceURI(valueToStringWithNullCheck(exec, exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& qualifiedName(valueToStringWithNullCheck(exec, exec->argument(1)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJSNewlyCreated(exec, castedThis->globalObject(), WTF::getPtr(impl.createAttributeNS(namespaceURI, qualifiedName, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionGetElementsByTagNameNS(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    const String& namespaceURI(valueToStringWithNullCheck(exec, exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& localName(exec->argument(1).isEmpty() ? String() : exec->argument(1).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getElementsByTagNameNS(namespaceURI, localName)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionGetElementById(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    const String& elementId(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getElementById(elementId)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionAdoptNode(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* source(toNode(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.adoptNode(source, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& eventType(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.createEvent(eventType, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateRange(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.createRange()));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateNodeIterator(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* root(toNode(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    unsigned whatToShow(toUInt32(exec, exec->argument(1), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    RefPtr<NodeFilter> filter(toNodeFilter(exec->vm(), exec->argument(2)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool expandEntityReferences(exec->argument(3).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.createNodeIterator(root, whatToShow, filter.get(), expandEntityReferences, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateTreeWalker(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    Node* root(toNode(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    unsigned whatToShow(toUInt32(exec, exec->argument(1), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    RefPtr<NodeFilter> filter(toNodeFilter(exec->vm(), exec->argument(2)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool expandEntityReferences(exec->argument(3).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.createTreeWalker(root, whatToShow, filter.get(), expandEntityReferences, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionGetOverrideStyle(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    Element* element(toElement(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& pseudoElement(exec->argument(1).isEmpty() ? String() : exec->argument(1).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getOverrideStyle(element, pseudoElement)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateExpression(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& expression(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    RefPtr<XPathNSResolver> customResolver;
    XPathNSResolver* resolver = toXPathNSResolver(exec->argument(1));
    if (!resolver) {
        customResolver = JSCustomXPathNSResolver::create(exec, exec->argument(1));
        if (exec->hadException())
            return JSValue::encode(jsUndefined());
        resolver = customResolver.get();
    }

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.createExpression(expression, resolver, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateNSResolver(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    Node* nodeResolver(toNode(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.createNSResolver(nodeResolver)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionEvaluate(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& expression(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    Node* contextNode(toNode(exec->argument(1)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    RefPtr<XPathNSResolver> customResolver;
    XPathNSResolver* resolver = toXPathNSResolver(exec->argument(2));
    if (!resolver) {
        customResolver = JSCustomXPathNSResolver::create(exec, exec->argument(2));
        if (exec->hadException())
            return JSValue::encode(jsUndefined());
        resolver = customResolver.get();
    }
    unsigned short type(toUInt32(exec, exec->argument(3), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    XPathResult* inResult(toXPathResult(exec->argument(4)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.evaluate(expression, contextNode, resolver, type, inResult, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionExecCommand(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    const String& command(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool userInterface(exec->argument(1).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& value(valueToStringWithUndefinedOrNullCheck(exec, exec->argument(2)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl.execCommand(command, userInterface, value));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionQueryCommandEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    const String& command(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl.queryCommandEnabled(command));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionQueryCommandIndeterm(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    const String& command(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl.queryCommandIndeterm(command));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionQueryCommandState(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    const String& command(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl.queryCommandState(command));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionQueryCommandSupported(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    const String& command(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl.queryCommandSupported(command));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionQueryCommandValue(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    const String& command(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsStringWithCache(exec, impl.queryCommandValue(command));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionGetElementsByName(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    const String& elementName(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getElementsByName(elementName)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionElementFromPoint(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    int x(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int y(toInt32(exec, exec->argument(1), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.elementFromPoint(x, y)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCaretRangeFromPoint(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    int x(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int y(toInt32(exec, exec->argument(1), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.caretRangeFromPoint(x, y)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionGetSelection(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getSelection()));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionGetCSSCanvasContext(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    if (exec->argumentCount() < 4)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    const String& contextId(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& name(exec->argument(1).isEmpty() ? String() : exec->argument(1).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int width(toInt32(exec, exec->argument(2), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int height(toInt32(exec, exec->argument(3), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getCSSCanvasContext(contextId, name, width, height)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionGetElementsByClassName(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    const String& tagname(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getElementsByClassName(tagname)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionQuerySelector(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    const String& selectors(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.querySelector(selectors, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionQuerySelectorAll(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    const String& selectors(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.querySelectorAll(selectors, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionWebkitCancelFullScreen(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    impl.webkitCancelFullScreen();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionWebkitExitFullscreen(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    impl.webkitExitFullscreen();
    return JSValue::encode(jsUndefined());
}

#if ENABLE(POINTER_LOCK)
EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionWebkitExitPointerLock(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    impl.webkitExitPointerLock();
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(CSS_REGIONS)
EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionWebkitGetNamedFlows(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.webkitGetNamedFlows()));
    return JSValue::encode(result);
}

#endif

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateTouch(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    Document& impl = castedThis->impl();
    ExceptionCode ec = 0;
    DOMWindow* window(toDOMWindow(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    EventTarget* target(toEventTarget(exec->argument(1)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int identifier(toInt32(exec, exec->argument(2), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int pageX(toInt32(exec, exec->argument(3), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int pageY(toInt32(exec, exec->argument(4), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int screenX(toInt32(exec, exec->argument(5), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int screenY(toInt32(exec, exec->argument(6), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int webkitRadiusX(toInt32(exec, exec->argument(7), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int webkitRadiusY(toInt32(exec, exec->argument(8), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    float webkitRotationAngle(exec->argument(9).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    float webkitForce(exec->argument(10).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJSNewlyCreated(exec, castedThis->globalObject(), WTF::getPtr(impl.createTouch(window, target, identifier, pageX, pageY, screenX, screenY, webkitRadiusX, webkitRadiusY, webkitRotationAngle, webkitForce, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDocumentPrototypeFunctionCreateTouchList(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSDocument::info()))
        return throwVMTypeError(exec);
    JSDocument* castedThis = jsCast<JSDocument*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDocument::info());
    return JSValue::encode(castedThis->createTouchList(exec));
}

Document* toDocument(JSC::JSValue value)
{
    return value.inherits(JSDocument::info()) ? &jsCast<JSDocument*>(asObject(value))->impl() : 0;
}

}
