/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSStyleSheet.h"

#include "JSMediaList.h"
#include "JSNode.h"
#include "JSStyleSheet.h"
#include "MediaList.h"
#include "Node.h"
#include "StyleSheet.h"
#include "URL.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSStyleSheetTableValues[] =
{
    { "type", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStyleSheetType), (intptr_t)0 },
    { "disabled", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStyleSheetDisabled), (intptr_t)setJSStyleSheetDisabled },
    { "ownerNode", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStyleSheetOwnerNode), (intptr_t)0 },
    { "parentStyleSheet", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStyleSheetParentStyleSheet), (intptr_t)0 },
    { "href", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStyleSheetHref), (intptr_t)0 },
    { "title", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStyleSheetTitle), (intptr_t)0 },
    { "media", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStyleSheetMedia), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStyleSheetConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSStyleSheetTable = { 17, 15, JSStyleSheetTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSStyleSheetConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSStyleSheetConstructorTable = { 1, 0, JSStyleSheetConstructorTableValues, 0 };
const ClassInfo JSStyleSheetConstructor::s_info = { "StyleSheetConstructor", &Base::s_info, &JSStyleSheetConstructorTable, 0, CREATE_METHOD_TABLE(JSStyleSheetConstructor) };

JSStyleSheetConstructor::JSStyleSheetConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSStyleSheetConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSStyleSheetPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSStyleSheetConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSStyleSheetConstructor, JSDOMWrapper>(exec, JSStyleSheetConstructorTable, jsCast<JSStyleSheetConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSStyleSheetPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSStyleSheetPrototypeTable = { 1, 0, JSStyleSheetPrototypeTableValues, 0 };
const ClassInfo JSStyleSheetPrototype::s_info = { "StyleSheetPrototype", &Base::s_info, &JSStyleSheetPrototypeTable, 0, CREATE_METHOD_TABLE(JSStyleSheetPrototype) };

JSObject* JSStyleSheetPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSStyleSheet>(vm, globalObject);
}

const ClassInfo JSStyleSheet::s_info = { "StyleSheet", &Base::s_info, &JSStyleSheetTable, 0 , CREATE_METHOD_TABLE(JSStyleSheet) };

JSStyleSheet::JSStyleSheet(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<StyleSheet> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSStyleSheet::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSStyleSheet::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSStyleSheetPrototype::create(vm, globalObject, JSStyleSheetPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSStyleSheet::destroy(JSC::JSCell* cell)
{
    JSStyleSheet* thisObject = static_cast<JSStyleSheet*>(cell);
    thisObject->JSStyleSheet::~JSStyleSheet();
}

JSStyleSheet::~JSStyleSheet()
{
    releaseImplIfNotNull();
}

bool JSStyleSheet::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSStyleSheet* thisObject = jsCast<JSStyleSheet*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSStyleSheet, Base>(exec, JSStyleSheetTable, thisObject, propertyName, slot);
}

JSValue jsStyleSheetType(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStyleSheet* castedThis = jsCast<JSStyleSheet*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    StyleSheet& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.type());
    return result;
}


JSValue jsStyleSheetDisabled(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStyleSheet* castedThis = jsCast<JSStyleSheet*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    StyleSheet& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.disabled());
    return result;
}


JSValue jsStyleSheetOwnerNode(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStyleSheet* castedThis = jsCast<JSStyleSheet*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    StyleSheet& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.ownerNode()));
    return result;
}


JSValue jsStyleSheetParentStyleSheet(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStyleSheet* castedThis = jsCast<JSStyleSheet*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    StyleSheet& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.parentStyleSheet()));
    return result;
}


JSValue jsStyleSheetHref(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStyleSheet* castedThis = jsCast<JSStyleSheet*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    StyleSheet& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.href());
    return result;
}


JSValue jsStyleSheetTitle(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStyleSheet* castedThis = jsCast<JSStyleSheet*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    StyleSheet& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.title());
    return result;
}


JSValue jsStyleSheetMedia(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStyleSheet* castedThis = jsCast<JSStyleSheet*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    StyleSheet& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.media()));
    return result;
}


JSValue jsStyleSheetConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStyleSheet* domObject = jsCast<JSStyleSheet*>(asObject(slotBase));
    return JSStyleSheet::getConstructor(exec->vm(), domObject->globalObject());
}

void JSStyleSheet::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSStyleSheet* thisObject = jsCast<JSStyleSheet*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSStyleSheet, Base>(exec, propertyName, value, JSStyleSheetTable, thisObject, slot);
}

void setJSStyleSheetDisabled(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSStyleSheet* castedThis = jsCast<JSStyleSheet*>(thisObject);
    StyleSheet& impl = castedThis->impl();
    bool nativeValue(value.toBoolean(exec));
    if (exec->hadException())
        return;
    impl.setDisabled(nativeValue);
}


JSValue JSStyleSheet::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSStyleSheetConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

static inline bool isObservable(JSStyleSheet* jsStyleSheet)
{
    if (jsStyleSheet->hasCustomProperties())
        return true;
    return false;
}

bool JSStyleSheetOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSStyleSheet* jsStyleSheet = jsCast<JSStyleSheet*>(handle.get().asCell());
    if (!isObservable(jsStyleSheet))
        return false;
    void* root = WebCore::root(&jsStyleSheet->impl());
    return visitor.containsOpaqueRoot(root);
}

void JSStyleSheetOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSStyleSheet* jsStyleSheet = jsCast<JSStyleSheet*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsStyleSheet->impl(), jsStyleSheet);
    jsStyleSheet->releaseImpl();
}

StyleSheet* toStyleSheet(JSC::JSValue value)
{
    return value.inherits(JSStyleSheet::info()) ? &jsCast<JSStyleSheet*>(asObject(value))->impl() : 0;
}

}
