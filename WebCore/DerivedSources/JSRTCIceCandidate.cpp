/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSRTCIceCandidate.h"

#include "Dictionary.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "RTCIceCandidate.h"
#include "URL.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSRTCIceCandidateTableValues[] =
{
    { "candidate", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCIceCandidateCandidate), (intptr_t)0 },
    { "sdpMid", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCIceCandidateSdpMid), (intptr_t)0 },
    { "sdpMLineIndex", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCIceCandidateSdpMLineIndex), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCIceCandidateConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSRTCIceCandidateTable = { 9, 7, JSRTCIceCandidateTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSRTCIceCandidateConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSRTCIceCandidateConstructorTable = { 1, 0, JSRTCIceCandidateConstructorTableValues, 0 };
EncodedJSValue JSC_HOST_CALL JSRTCIceCandidateConstructor::constructJSRTCIceCandidate(ExecState* exec)
{
    JSRTCIceCandidateConstructor* castedThis = jsCast<JSRTCIceCandidateConstructor*>(exec->callee());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    Dictionary dictionary(exec, exec->argument(0));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    RefPtr<RTCIceCandidate> object = RTCIceCandidate::create(dictionary, ec);
    if (ec) {
        setDOMException(exec, ec);
        return JSValue::encode(JSValue());
    }
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

const ClassInfo JSRTCIceCandidateConstructor::s_info = { "RTCIceCandidateConstructor", &Base::s_info, &JSRTCIceCandidateConstructorTable, 0, CREATE_METHOD_TABLE(JSRTCIceCandidateConstructor) };

JSRTCIceCandidateConstructor::JSRTCIceCandidateConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSRTCIceCandidateConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSRTCIceCandidatePrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontDelete | DontEnum);
}

bool JSRTCIceCandidateConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSRTCIceCandidateConstructor, JSDOMWrapper>(exec, JSRTCIceCandidateConstructorTable, jsCast<JSRTCIceCandidateConstructor*>(object), propertyName, slot);
}

ConstructType JSRTCIceCandidateConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSRTCIceCandidate;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSRTCIceCandidatePrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSRTCIceCandidatePrototypeTable = { 1, 0, JSRTCIceCandidatePrototypeTableValues, 0 };
const ClassInfo JSRTCIceCandidatePrototype::s_info = { "RTCIceCandidatePrototype", &Base::s_info, &JSRTCIceCandidatePrototypeTable, 0, CREATE_METHOD_TABLE(JSRTCIceCandidatePrototype) };

JSObject* JSRTCIceCandidatePrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRTCIceCandidate>(vm, globalObject);
}

const ClassInfo JSRTCIceCandidate::s_info = { "RTCIceCandidate", &Base::s_info, &JSRTCIceCandidateTable, 0 , CREATE_METHOD_TABLE(JSRTCIceCandidate) };

JSRTCIceCandidate::JSRTCIceCandidate(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<RTCIceCandidate> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSRTCIceCandidate::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSRTCIceCandidate::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSRTCIceCandidatePrototype::create(vm, globalObject, JSRTCIceCandidatePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSRTCIceCandidate::destroy(JSC::JSCell* cell)
{
    JSRTCIceCandidate* thisObject = static_cast<JSRTCIceCandidate*>(cell);
    thisObject->JSRTCIceCandidate::~JSRTCIceCandidate();
}

JSRTCIceCandidate::~JSRTCIceCandidate()
{
    releaseImplIfNotNull();
}

bool JSRTCIceCandidate::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSRTCIceCandidate* thisObject = jsCast<JSRTCIceCandidate*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSRTCIceCandidate, Base>(exec, JSRTCIceCandidateTable, thisObject, propertyName, slot);
}

JSValue jsRTCIceCandidateCandidate(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCIceCandidate* castedThis = jsCast<JSRTCIceCandidate*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCIceCandidate& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.candidate());
    return result;
}


JSValue jsRTCIceCandidateSdpMid(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCIceCandidate* castedThis = jsCast<JSRTCIceCandidate*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCIceCandidate& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.sdpMid());
    return result;
}


JSValue jsRTCIceCandidateSdpMLineIndex(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCIceCandidate* castedThis = jsCast<JSRTCIceCandidate*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    RTCIceCandidate& impl = castedThis->impl();
    JSValue result = jsNumber(impl.sdpMLineIndex());
    return result;
}


JSValue jsRTCIceCandidateConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSRTCIceCandidate* domObject = jsCast<JSRTCIceCandidate*>(asObject(slotBase));
    return JSRTCIceCandidate::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSRTCIceCandidate::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRTCIceCandidateConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

static inline bool isObservable(JSRTCIceCandidate* jsRTCIceCandidate)
{
    if (jsRTCIceCandidate->hasCustomProperties())
        return true;
    return false;
}

bool JSRTCIceCandidateOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSRTCIceCandidate* jsRTCIceCandidate = jsCast<JSRTCIceCandidate*>(handle.get().asCell());
    if (!isObservable(jsRTCIceCandidate))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSRTCIceCandidateOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSRTCIceCandidate* jsRTCIceCandidate = jsCast<JSRTCIceCandidate*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsRTCIceCandidate->impl(), jsRTCIceCandidate);
    jsRTCIceCandidate->releaseImpl();
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCIceCandidate@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore15RTCIceCandidateE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, RTCIceCandidate* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSRTCIceCandidate>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7RTCIceCandidate@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore15RTCIceCandidateE[2];
#if COMPILER(CLANG)
    // If this fails RTCIceCandidate does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(RTCIceCandidate), RTCIceCandidate_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // RTCIceCandidate has subclasses. If RTCIceCandidate has subclasses that get passed
    // to toJS() we currently require RTCIceCandidate you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<RTCIceCandidate>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSRTCIceCandidate>(exec, globalObject, impl);
}

RTCIceCandidate* toRTCIceCandidate(JSC::JSValue value)
{
    return value.inherits(JSRTCIceCandidate::info()) ? &jsCast<JSRTCIceCandidate*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_STREAM)
