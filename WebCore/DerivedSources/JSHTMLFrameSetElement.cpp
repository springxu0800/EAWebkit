/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLFrameSetElement.h"

#include "EventListener.h"
#include "HTMLFrameSetElement.h"
#include "HTMLNames.h"
#include "JSEventListener.h"
#include "URL.h"
#include "wtf/text/AtomicString.h"
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSHTMLFrameSetElementTableValues[] =
{
    { "cols", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementCols), (intptr_t)setJSHTMLFrameSetElementCols },
    { "rows", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementRows), (intptr_t)setJSHTMLFrameSetElementRows },
    { "onbeforeunload", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnbeforeunload), (intptr_t)setJSHTMLFrameSetElementOnbeforeunload },
    { "onhashchange", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnhashchange), (intptr_t)setJSHTMLFrameSetElementOnhashchange },
    { "onmessage", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnmessage), (intptr_t)setJSHTMLFrameSetElementOnmessage },
    { "onoffline", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnoffline), (intptr_t)setJSHTMLFrameSetElementOnoffline },
    { "ononline", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnonline), (intptr_t)setJSHTMLFrameSetElementOnonline },
    { "onpopstate", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnpopstate), (intptr_t)setJSHTMLFrameSetElementOnpopstate },
    { "onresize", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnresize), (intptr_t)setJSHTMLFrameSetElementOnresize },
    { "onstorage", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnstorage), (intptr_t)setJSHTMLFrameSetElementOnstorage },
    { "onunload", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnunload), (intptr_t)setJSHTMLFrameSetElementOnunload },
#if ENABLE(ORIENTATION_EVENTS)
    { "onorientationchange", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnorientationchange), (intptr_t)setJSHTMLFrameSetElementOnorientationchange },
#endif
    { "onblur", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnblur), (intptr_t)setJSHTMLFrameSetElementOnblur },
    { "onerror", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnerror), (intptr_t)setJSHTMLFrameSetElementOnerror },
    { "onfocus", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnfocus), (intptr_t)setJSHTMLFrameSetElementOnfocus },
    { "onload", DontDelete | DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementOnload), (intptr_t)setJSHTMLFrameSetElementOnload },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameSetElementConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLFrameSetElementTable = { 64, 63, JSHTMLFrameSetElementTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSHTMLFrameSetElementConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLFrameSetElementConstructorTable = { 1, 0, JSHTMLFrameSetElementConstructorTableValues, 0 };
const ClassInfo JSHTMLFrameSetElementConstructor::s_info = { "HTMLFrameSetElementConstructor", &Base::s_info, &JSHTMLFrameSetElementConstructorTable, 0, CREATE_METHOD_TABLE(JSHTMLFrameSetElementConstructor) };

JSHTMLFrameSetElementConstructor::JSHTMLFrameSetElementConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSHTMLFrameSetElementConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSHTMLFrameSetElementPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSHTMLFrameSetElementConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSHTMLFrameSetElementConstructor, JSDOMWrapper>(exec, JSHTMLFrameSetElementConstructorTable, jsCast<JSHTMLFrameSetElementConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSHTMLFrameSetElementPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLFrameSetElementPrototypeTable = { 1, 0, JSHTMLFrameSetElementPrototypeTableValues, 0 };
const ClassInfo JSHTMLFrameSetElementPrototype::s_info = { "HTMLFrameSetElementPrototype", &Base::s_info, &JSHTMLFrameSetElementPrototypeTable, 0, CREATE_METHOD_TABLE(JSHTMLFrameSetElementPrototype) };

JSObject* JSHTMLFrameSetElementPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLFrameSetElement>(vm, globalObject);
}

const ClassInfo JSHTMLFrameSetElement::s_info = { "HTMLFrameSetElement", &Base::s_info, &JSHTMLFrameSetElementTable, 0 , CREATE_METHOD_TABLE(JSHTMLFrameSetElement) };

JSHTMLFrameSetElement::JSHTMLFrameSetElement(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<HTMLFrameSetElement> impl)
    : JSHTMLElement(structure, globalObject, impl)
{
}

void JSHTMLFrameSetElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSHTMLFrameSetElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLFrameSetElementPrototype::create(vm, globalObject, JSHTMLFrameSetElementPrototype::createStructure(vm, globalObject, JSHTMLElementPrototype::self(vm, globalObject)));
}

bool JSHTMLFrameSetElement::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSHTMLFrameSetElement* thisObject = jsCast<JSHTMLFrameSetElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    if (canGetItemsForName(exec, &thisObject->impl(), propertyName)) {
        slot.setCustom(thisObject, ReadOnly | DontDelete | DontEnum, thisObject->nameGetter);
        return true;
    }
    return getStaticValueSlot<JSHTMLFrameSetElement, Base>(exec, JSHTMLFrameSetElementTable, thisObject, propertyName, slot);
}

bool JSHTMLFrameSetElement::getOwnPropertySlotByIndex(JSObject* object, ExecState* exec, unsigned index, PropertySlot& slot)
{
    JSHTMLFrameSetElement* thisObject = jsCast<JSHTMLFrameSetElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    PropertyName propertyName = Identifier::from(exec, index);
    if (canGetItemsForName(exec, &thisObject->impl(), propertyName)) {
        slot.setCustom(thisObject, ReadOnly | DontDelete | DontEnum, thisObject->nameGetter);
        return true;
    }
    return Base::getOwnPropertySlotByIndex(thisObject, exec, index, slot);
}

JSValue jsHTMLFrameSetElementCols(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::colsAttr));
    return result;
}


JSValue jsHTMLFrameSetElementRows(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::rowsAttr));
    return result;
}


JSValue jsHTMLFrameSetElementOnbeforeunload(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.onbeforeunload()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsHTMLFrameSetElementOnhashchange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.onhashchange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsHTMLFrameSetElementOnmessage(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.onmessage()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsHTMLFrameSetElementOnoffline(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.onoffline()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsHTMLFrameSetElementOnonline(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.ononline()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsHTMLFrameSetElementOnpopstate(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.onpopstate()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsHTMLFrameSetElementOnresize(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.onresize()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsHTMLFrameSetElementOnstorage(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.onstorage()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsHTMLFrameSetElementOnunload(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.onunload()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


#if ENABLE(ORIENTATION_EVENTS)
JSValue jsHTMLFrameSetElementOnorientationchange(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.onorientationchange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}

#endif

JSValue jsHTMLFrameSetElementOnblur(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.onblur()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsHTMLFrameSetElementOnerror(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.onerror()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsHTMLFrameSetElementOnfocus(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.onfocus()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsHTMLFrameSetElementOnload(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFrameSetElement& impl = castedThis->impl();
    if (EventListener* listener = impl.onload()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsHTMLFrameSetElementConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFrameSetElement* domObject = jsCast<JSHTMLFrameSetElement*>(asObject(slotBase));
    return JSHTMLFrameSetElement::getConstructor(exec->vm(), domObject->globalObject());
}

void JSHTMLFrameSetElement::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSHTMLFrameSetElement* thisObject = jsCast<JSHTMLFrameSetElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSHTMLFrameSetElement, Base>(exec, propertyName, value, JSHTMLFrameSetElementTable, thisObject, slot);
}

void setJSHTMLFrameSetElementCols(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    HTMLFrameSetElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::colsAttr, nativeValue);
}


void setJSHTMLFrameSetElementRows(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    HTMLFrameSetElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::rowsAttr, nativeValue);
}


void setJSHTMLFrameSetElementOnbeforeunload(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnbeforeunload(createJSAttributeEventListener(exec, value, globalObject));
}


void setJSHTMLFrameSetElementOnhashchange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnhashchange(createJSAttributeEventListener(exec, value, globalObject));
}


void setJSHTMLFrameSetElementOnmessage(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnmessage(createJSAttributeEventListener(exec, value, globalObject));
}


void setJSHTMLFrameSetElementOnoffline(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnoffline(createJSAttributeEventListener(exec, value, globalObject));
}


void setJSHTMLFrameSetElementOnonline(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnonline(createJSAttributeEventListener(exec, value, globalObject));
}


void setJSHTMLFrameSetElementOnpopstate(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnpopstate(createJSAttributeEventListener(exec, value, globalObject));
}


void setJSHTMLFrameSetElementOnresize(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnresize(createJSAttributeEventListener(exec, value, globalObject));
}


void setJSHTMLFrameSetElementOnstorage(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnstorage(createJSAttributeEventListener(exec, value, globalObject));
}


void setJSHTMLFrameSetElementOnunload(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnunload(createJSAttributeEventListener(exec, value, globalObject));
}


#if ENABLE(ORIENTATION_EVENTS)
void setJSHTMLFrameSetElementOnorientationchange(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnorientationchange(createJSAttributeEventListener(exec, value, globalObject));
}

#endif

void setJSHTMLFrameSetElementOnblur(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnblur(createJSAttributeEventListener(exec, value, globalObject));
}


void setJSHTMLFrameSetElementOnerror(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnerror(createJSAttributeEventListener(exec, value, globalObject));
}


void setJSHTMLFrameSetElementOnfocus(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnfocus(createJSAttributeEventListener(exec, value, globalObject));
}


void setJSHTMLFrameSetElementOnload(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSHTMLFrameSetElement* castedThis = jsCast<JSHTMLFrameSetElement*>(thisObject);
    JSDOMGlobalObject* globalObject = castedThis->globalObject();
    HTMLFrameSetElement& impl = castedThis->impl();
    impl.setOnload(createJSAttributeEventListener(exec, value, globalObject));
}


JSValue JSHTMLFrameSetElement::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLFrameSetElementConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}


}
