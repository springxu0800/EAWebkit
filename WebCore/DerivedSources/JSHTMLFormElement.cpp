/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLFormElement.h"

#include "ExceptionCode.h"
#include "HTMLCollection.h"
#include "HTMLFormElement.h"
#include "HTMLNames.h"
#include "JSDOMBinding.h"
#include "JSHTMLCollection.h"
#include "URL.h"
#include "wtf/text/AtomicString.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <runtime/PropertyNameArray.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSHTMLFormElementTableValues[] =
{
    { "acceptCharset", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFormElementAcceptCharset), (intptr_t)setJSHTMLFormElementAcceptCharset },
    { "action", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFormElementAction), (intptr_t)setJSHTMLFormElementAction },
    { "autocomplete", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFormElementAutocomplete), (intptr_t)setJSHTMLFormElementAutocomplete },
    { "enctype", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFormElementEnctype), (intptr_t)setJSHTMLFormElementEnctype },
    { "encoding", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFormElementEncoding), (intptr_t)setJSHTMLFormElementEncoding },
    { "method", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFormElementMethod), (intptr_t)setJSHTMLFormElementMethod },
    { "name", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFormElementName), (intptr_t)setJSHTMLFormElementName },
    { "noValidate", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFormElementNoValidate), (intptr_t)setJSHTMLFormElementNoValidate },
    { "target", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFormElementTarget), (intptr_t)setJSHTMLFormElementTarget },
    { "elements", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFormElementElements), (intptr_t)0 },
    { "length", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFormElementLength), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFormElementConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLFormElementTable = { 35, 31, JSHTMLFormElementTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSHTMLFormElementConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLFormElementConstructorTable = { 1, 0, JSHTMLFormElementConstructorTableValues, 0 };
const ClassInfo JSHTMLFormElementConstructor::s_info = { "HTMLFormElementConstructor", &Base::s_info, &JSHTMLFormElementConstructorTable, 0, CREATE_METHOD_TABLE(JSHTMLFormElementConstructor) };

JSHTMLFormElementConstructor::JSHTMLFormElementConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSHTMLFormElementConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSHTMLFormElementPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSHTMLFormElementConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSHTMLFormElementConstructor, JSDOMWrapper>(exec, JSHTMLFormElementConstructorTable, jsCast<JSHTMLFormElementConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSHTMLFormElementPrototypeTableValues[] =
{
    { "submit", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsHTMLFormElementPrototypeFunctionSubmit), (intptr_t)0 },
    { "reset", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsHTMLFormElementPrototypeFunctionReset), (intptr_t)0 },
    { "checkValidity", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsHTMLFormElementPrototypeFunctionCheckValidity), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLFormElementPrototypeTable = { 9, 7, JSHTMLFormElementPrototypeTableValues, 0 };
const ClassInfo JSHTMLFormElementPrototype::s_info = { "HTMLFormElementPrototype", &Base::s_info, &JSHTMLFormElementPrototypeTable, 0, CREATE_METHOD_TABLE(JSHTMLFormElementPrototype) };

JSObject* JSHTMLFormElementPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLFormElement>(vm, globalObject);
}

bool JSHTMLFormElementPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSHTMLFormElementPrototype* thisObject = jsCast<JSHTMLFormElementPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSHTMLFormElementPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSHTMLFormElement::s_info = { "HTMLFormElement", &Base::s_info, &JSHTMLFormElementTable, 0 , CREATE_METHOD_TABLE(JSHTMLFormElement) };

JSHTMLFormElement::JSHTMLFormElement(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<HTMLFormElement> impl)
    : JSHTMLElement(structure, globalObject, impl)
{
}

void JSHTMLFormElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSHTMLFormElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLFormElementPrototype::create(vm, globalObject, JSHTMLFormElementPrototype::createStructure(vm, globalObject, JSHTMLElementPrototype::self(vm, globalObject)));
}

bool JSHTMLFormElement::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSHTMLFormElement* thisObject = jsCast<JSHTMLFormElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    unsigned index = propertyName.asIndex();
    if (index != PropertyName::NotAnIndex && index < thisObject->impl().length()) {
        unsigned attributes = DontDelete | ReadOnly;
        slot.setCustomIndex(thisObject, attributes, index, indexGetter);
        return true;
    }
    if (canGetItemsForName(exec, &thisObject->impl(), propertyName)) {
        slot.setCustom(thisObject, ReadOnly | DontDelete | DontEnum, thisObject->nameGetter);
        return true;
    }
    const HashEntry* entry = getStaticValueSlotEntryWithoutCaching<JSHTMLFormElement>(exec, propertyName);
    if (entry) {
        slot.setCustom(thisObject, entry->attributes(), entry->propertyGetter());
        return true;
    }
    return getStaticValueSlot<JSHTMLFormElement, Base>(exec, JSHTMLFormElementTable, thisObject, propertyName, slot);
}

bool JSHTMLFormElement::getOwnPropertySlotByIndex(JSObject* object, ExecState* exec, unsigned index, PropertySlot& slot)
{
    JSHTMLFormElement* thisObject = jsCast<JSHTMLFormElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    if (index < thisObject->impl().length()) {
        unsigned attributes = DontDelete | ReadOnly;
        slot.setCustomIndex(thisObject, attributes, index, thisObject->indexGetter);
        return true;
    }
    PropertyName propertyName = Identifier::from(exec, index);
    if (canGetItemsForName(exec, &thisObject->impl(), propertyName)) {
        slot.setCustom(thisObject, ReadOnly | DontDelete | DontEnum, thisObject->nameGetter);
        return true;
    }
    return Base::getOwnPropertySlotByIndex(thisObject, exec, index, slot);
}

JSValue jsHTMLFormElementAcceptCharset(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFormElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::accept_charsetAttr));
    return result;
}


JSValue jsHTMLFormElementAction(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFormElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.getURLAttribute(WebCore::HTMLNames::actionAttr));
    return result;
}


JSValue jsHTMLFormElementAutocomplete(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFormElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::autocompleteAttr));
    return result;
}


JSValue jsHTMLFormElementEnctype(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFormElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.enctype());
    return result;
}


JSValue jsHTMLFormElementEncoding(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFormElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.encoding());
    return result;
}


JSValue jsHTMLFormElementMethod(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFormElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.method());
    return result;
}


JSValue jsHTMLFormElementName(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFormElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.getNameAttribute());
    return result;
}


JSValue jsHTMLFormElementNoValidate(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFormElement& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.fastHasAttribute(WebCore::HTMLNames::novalidateAttr));
    return result;
}


JSValue jsHTMLFormElementTarget(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFormElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::targetAttr));
    return result;
}


JSValue jsHTMLFormElementElements(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFormElement& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.elements()));
    return result;
}


JSValue jsHTMLFormElementLength(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLFormElement& impl = castedThis->impl();
    JSValue result = jsNumber(impl.length());
    return result;
}


JSValue jsHTMLFormElementConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLFormElement* domObject = jsCast<JSHTMLFormElement*>(asObject(slotBase));
    return JSHTMLFormElement::getConstructor(exec->vm(), domObject->globalObject());
}

void JSHTMLFormElement::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSHTMLFormElement* thisObject = jsCast<JSHTMLFormElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSHTMLFormElement, Base>(exec, propertyName, value, JSHTMLFormElementTable, thisObject, slot);
}

void setJSHTMLFormElementAcceptCharset(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(thisObject);
    HTMLFormElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::accept_charsetAttr, nativeValue);
}


void setJSHTMLFormElementAction(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(thisObject);
    HTMLFormElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::actionAttr, nativeValue);
}


void setJSHTMLFormElementAutocomplete(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(thisObject);
    HTMLFormElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::autocompleteAttr, nativeValue);
}


void setJSHTMLFormElementEnctype(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(thisObject);
    HTMLFormElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setEnctype(nativeValue);
}


void setJSHTMLFormElementEncoding(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(thisObject);
    HTMLFormElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setEncoding(nativeValue);
}


void setJSHTMLFormElementMethod(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(thisObject);
    HTMLFormElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setMethod(nativeValue);
}


void setJSHTMLFormElementName(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(thisObject);
    HTMLFormElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::nameAttr, nativeValue);
}


void setJSHTMLFormElementNoValidate(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(thisObject);
    HTMLFormElement& impl = castedThis->impl();
    bool nativeValue(value.toBoolean(exec));
    if (exec->hadException())
        return;
    impl.setBooleanAttribute(WebCore::HTMLNames::novalidateAttr, nativeValue);
}


void setJSHTMLFormElementTarget(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(thisObject);
    HTMLFormElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::targetAttr, nativeValue);
}


void JSHTMLFormElement::getOwnPropertyNames(JSObject* object, ExecState* exec, PropertyNameArray& propertyNames, EnumerationMode mode)
{
    JSHTMLFormElement* thisObject = jsCast<JSHTMLFormElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    for (unsigned i = 0, count = thisObject->impl().length(); i < count; ++i)
        propertyNames.add(Identifier::from(exec, i));
     Base::getOwnPropertyNames(thisObject, exec, propertyNames, mode);
}

JSValue JSHTMLFormElement::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLFormElementConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsHTMLFormElementPrototypeFunctionSubmit(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSHTMLFormElement::info()))
        return throwVMTypeError(exec);
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSHTMLFormElement::info());
    HTMLFormElement& impl = castedThis->impl();
    impl.submitFromJavaScript();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsHTMLFormElementPrototypeFunctionReset(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSHTMLFormElement::info()))
        return throwVMTypeError(exec);
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSHTMLFormElement::info());
    HTMLFormElement& impl = castedThis->impl();
    impl.reset();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsHTMLFormElementPrototypeFunctionCheckValidity(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSHTMLFormElement::info()))
        return throwVMTypeError(exec);
    JSHTMLFormElement* castedThis = jsCast<JSHTMLFormElement*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSHTMLFormElement::info());
    HTMLFormElement& impl = castedThis->impl();

    JSC::JSValue result = jsBoolean(impl.checkValidity());
    return JSValue::encode(result);
}


JSValue JSHTMLFormElement::indexGetter(ExecState* exec, JSValue slotBase, unsigned index)
{
    JSHTMLFormElement* thisObj = jsCast<JSHTMLFormElement*>(asObject(slotBase));
    ASSERT_GC_OBJECT_INHERITS(thisObj, info());
    return toJS(exec, thisObj->globalObject(), thisObj->impl().item(index));
}


}
