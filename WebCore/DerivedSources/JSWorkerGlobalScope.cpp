/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WORKERS)

#include "JSWorkerGlobalScope.h"

#include "Database.h"
#include "DatabaseSync.h"
#include "Event.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "JSBlob.h"
#include "JSDOMBinding.h"
#include "JSDatabaseCallback.h"
#include "JSErrorHandler.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSEventSource.h"
#include "JSMessageEvent.h"
#include "JSWorkerGlobalScope.h"
#include "JSWorkerLocation.h"
#include "JSWorkerNavigator.h"
#include "JSXMLHttpRequest.h"
#include "RuntimeEnabledFeatures.h"
#include "WorkerGlobalScope.h"
#include "WorkerGlobalScopeIndexedDatabase.h"
#include "WorkerGlobalScopeWebDatabase.h"
#include "WorkerLocation.h"
#include "WorkerNavigator.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

#if ENABLE(BLOB)
#include "JSDOMURL.h"
#include "JSFileReader.h"
#include "JSFileReaderSync.h"
#endif

#if ENABLE(CHANNEL_MESSAGING)
#include "JSMessageChannel.h"
#endif

#if ENABLE(INDEXED_DATABASE)
#include "IDBFactory.h"
#include "JSIDBCursor.h"
#include "JSIDBCursorWithValue.h"
#include "JSIDBDatabase.h"
#include "JSIDBFactory.h"
#include "JSIDBIndex.h"
#include "JSIDBKeyRange.h"
#include "JSIDBObjectStore.h"
#include "JSIDBOpenDBRequest.h"
#include "JSIDBRequest.h"
#include "JSIDBTransaction.h"
#include "JSIDBVersionChangeEvent.h"
#endif

#if ENABLE(SQL_DATABASE) && ENABLE(WORKERS)
#include "JSDatabase.h"
#include "JSDatabaseSync.h"
#endif

#if ENABLE(WEB_SOCKETS)
#include "JSWebSocket.h"
#endif

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSWorkerGlobalScopeTableValues[] =
{
    { "self", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeSelf), (intptr_t)setJSWorkerGlobalScopeSelf },
    { "location", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeLocation), (intptr_t)setJSWorkerGlobalScopeLocation },
    { "onerror", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeOnerror), (intptr_t)setJSWorkerGlobalScopeOnerror },
    { "onoffline", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeOnoffline), (intptr_t)setJSWorkerGlobalScopeOnoffline },
    { "ononline", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeOnonline), (intptr_t)setJSWorkerGlobalScopeOnonline },
    { "navigator", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeNavigator), (intptr_t)setJSWorkerGlobalScopeNavigator },
#if ENABLE(BLOB)
    { "webkitURL", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeWebkitURLConstructor), (intptr_t)setJSWorkerGlobalScopeWebkitURLConstructor },
#endif
#if ENABLE(WEB_SOCKETS)
    { "WebSocket", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeWebSocketConstructor), (intptr_t)setJSWorkerGlobalScopeWebSocketConstructor },
#endif
#if ENABLE(CHANNEL_MESSAGING)
    { "MessageChannel", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeMessageChannelConstructor), (intptr_t)setJSWorkerGlobalScopeMessageChannelConstructor },
#endif
    { "MessageEvent", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeMessageEventConstructor), (intptr_t)setJSWorkerGlobalScopeMessageEventConstructor },
    { "Blob", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeBlobConstructor), (intptr_t)setJSWorkerGlobalScopeBlobConstructor },
#if ENABLE(BLOB)
    { "FileReader", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeFileReaderConstructor), (intptr_t)setJSWorkerGlobalScopeFileReaderConstructor },
#endif
#if ENABLE(BLOB)
    { "FileReaderSync", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeFileReaderSyncConstructor), (intptr_t)setJSWorkerGlobalScopeFileReaderSyncConstructor },
#endif
#if ENABLE(BLOB)
    { "URL", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeURLConstructor), (intptr_t)setJSWorkerGlobalScopeURLConstructor },
#endif
    { "EventSource", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeEventSourceConstructor), (intptr_t)setJSWorkerGlobalScopeEventSourceConstructor },
#if ENABLE(WORKERS)
    { "WorkerGlobalScope", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeWorkerGlobalScopeConstructor), (intptr_t)setJSWorkerGlobalScopeWorkerGlobalScopeConstructor },
#endif
#if ENABLE(WORKERS)
    { "WorkerLocation", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeWorkerLocationConstructor), (intptr_t)setJSWorkerGlobalScopeWorkerLocationConstructor },
#endif
    { "XMLHttpRequest", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeXMLHttpRequestConstructor), (intptr_t)setJSWorkerGlobalScopeXMLHttpRequestConstructor },
#if ENABLE(INDEXED_DATABASE)
    { "webkitIndexedDB", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeWebkitIndexedDB), (intptr_t)0 },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBCursor", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeWebkitIDBCursorConstructor), (intptr_t)setJSWorkerGlobalScopeWebkitIDBCursorConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBDatabase", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeWebkitIDBDatabaseConstructor), (intptr_t)setJSWorkerGlobalScopeWebkitIDBDatabaseConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBFactory", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeWebkitIDBFactoryConstructor), (intptr_t)setJSWorkerGlobalScopeWebkitIDBFactoryConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBIndex", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeWebkitIDBIndexConstructor), (intptr_t)setJSWorkerGlobalScopeWebkitIDBIndexConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBKeyRange", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeWebkitIDBKeyRangeConstructor), (intptr_t)setJSWorkerGlobalScopeWebkitIDBKeyRangeConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBObjectStore", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeWebkitIDBObjectStoreConstructor), (intptr_t)setJSWorkerGlobalScopeWebkitIDBObjectStoreConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBRequest", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeWebkitIDBRequestConstructor), (intptr_t)setJSWorkerGlobalScopeWebkitIDBRequestConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBTransaction", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeWebkitIDBTransactionConstructor), (intptr_t)setJSWorkerGlobalScopeWebkitIDBTransactionConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "indexedDB", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeIndexedDB), (intptr_t)0 },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBCursor", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeIDBCursorConstructor), (intptr_t)setJSWorkerGlobalScopeIDBCursorConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBCursorWithValue", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeIDBCursorWithValueConstructor), (intptr_t)setJSWorkerGlobalScopeIDBCursorWithValueConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBDatabase", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeIDBDatabaseConstructor), (intptr_t)setJSWorkerGlobalScopeIDBDatabaseConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBFactory", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeIDBFactoryConstructor), (intptr_t)setJSWorkerGlobalScopeIDBFactoryConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBIndex", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeIDBIndexConstructor), (intptr_t)setJSWorkerGlobalScopeIDBIndexConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBKeyRange", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeIDBKeyRangeConstructor), (intptr_t)setJSWorkerGlobalScopeIDBKeyRangeConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBObjectStore", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeIDBObjectStoreConstructor), (intptr_t)setJSWorkerGlobalScopeIDBObjectStoreConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBOpenDBRequest", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeIDBOpenDBRequestConstructor), (intptr_t)setJSWorkerGlobalScopeIDBOpenDBRequestConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBRequest", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeIDBRequestConstructor), (intptr_t)setJSWorkerGlobalScopeIDBRequestConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBTransaction", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeIDBTransactionConstructor), (intptr_t)setJSWorkerGlobalScopeIDBTransactionConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBVersionChangeEvent", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeIDBVersionChangeEventConstructor), (intptr_t)setJSWorkerGlobalScopeIDBVersionChangeEventConstructor },
#endif
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerGlobalScopeConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWorkerGlobalScopeTable = { 134, 127, JSWorkerGlobalScopeTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSWorkerGlobalScopeConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWorkerGlobalScopeConstructorTable = { 1, 0, JSWorkerGlobalScopeConstructorTableValues, 0 };
static const HashTable& getJSWorkerGlobalScopeConstructorTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->vm(), JSWorkerGlobalScopeConstructorTable);
}

const ClassInfo JSWorkerGlobalScopeConstructor::s_info = { "WorkerGlobalScopeConstructor", &Base::s_info, 0, getJSWorkerGlobalScopeConstructorTable, CREATE_METHOD_TABLE(JSWorkerGlobalScopeConstructor) };

JSWorkerGlobalScopeConstructor::JSWorkerGlobalScopeConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSWorkerGlobalScopeConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, globalObject->prototype(), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSWorkerGlobalScopeConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSWorkerGlobalScopeConstructor, JSDOMWrapper>(exec, getJSWorkerGlobalScopeConstructorTable(exec), jsCast<JSWorkerGlobalScopeConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSWorkerGlobalScopePrototypeTableValues[] =
{
    { "close", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWorkerGlobalScopePrototypeFunctionClose), (intptr_t)0 },
    { "importScripts", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWorkerGlobalScopePrototypeFunctionImportScripts), (intptr_t)0 },
    { "addEventListener", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWorkerGlobalScopePrototypeFunctionAddEventListener), (intptr_t)2 },
    { "removeEventListener", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWorkerGlobalScopePrototypeFunctionRemoveEventListener), (intptr_t)2 },
    { "dispatchEvent", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWorkerGlobalScopePrototypeFunctionDispatchEvent), (intptr_t)1 },
#if ENABLE(SQL_DATABASE) && ENABLE(WORKERS)
    { "openDatabase", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWorkerGlobalScopePrototypeFunctionOpenDatabase), (intptr_t)4 },
#endif
#if ENABLE(SQL_DATABASE) && ENABLE(WORKERS)
    { "openDatabaseSync", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWorkerGlobalScopePrototypeFunctionOpenDatabaseSync), (intptr_t)4 },
#endif
    { "setTimeout", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWorkerGlobalScopePrototypeFunctionSetTimeout), (intptr_t)1 },
    { "clearTimeout", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWorkerGlobalScopePrototypeFunctionClearTimeout), (intptr_t)0 },
    { "setInterval", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWorkerGlobalScopePrototypeFunctionSetInterval), (intptr_t)1 },
    { "clearInterval", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWorkerGlobalScopePrototypeFunctionClearInterval), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWorkerGlobalScopePrototypeTable = { 35, 31, JSWorkerGlobalScopePrototypeTableValues, 0 };
static const HashTable& getJSWorkerGlobalScopePrototypeTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->vm(), JSWorkerGlobalScopePrototypeTable);
}

const ClassInfo JSWorkerGlobalScopePrototype::s_info = { "WorkerGlobalScopePrototype", &Base::s_info, 0, getJSWorkerGlobalScopePrototypeTable, CREATE_METHOD_TABLE(JSWorkerGlobalScopePrototype) };

bool JSWorkerGlobalScopePrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSWorkerGlobalScopePrototype* thisObject = jsCast<JSWorkerGlobalScopePrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, getJSWorkerGlobalScopePrototypeTable(exec), thisObject, propertyName, slot);
}

static const HashTable& getJSWorkerGlobalScopeTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->vm(), JSWorkerGlobalScopeTable);
}

const ClassInfo JSWorkerGlobalScope::s_info = { "WorkerGlobalScope", &Base::s_info, 0, getJSWorkerGlobalScopeTable , CREATE_METHOD_TABLE(JSWorkerGlobalScope) };

JSWorkerGlobalScope::JSWorkerGlobalScope(VM& vm, Structure* structure, PassRefPtr<WorkerGlobalScope> impl)
    : JSWorkerGlobalScopeBase(vm, structure, impl)
{
}

bool JSWorkerGlobalScope::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSWorkerGlobalScope* thisObject = jsCast<JSWorkerGlobalScope*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    if (thisObject->getOwnPropertySlotDelegate(exec, propertyName, slot))
        return true;
    return getStaticValueSlot<JSWorkerGlobalScope, Base>(exec, getJSWorkerGlobalScopeTable(exec), thisObject, propertyName, slot);
}

bool JSWorkerGlobalScope::getOwnPropertySlotByIndex(JSObject* object, ExecState* exec, unsigned index, PropertySlot& slot)
{
    JSWorkerGlobalScope* thisObject = jsCast<JSWorkerGlobalScope*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    PropertyName propertyName = Identifier::from(exec, index);
    if (thisObject->getOwnPropertySlotDelegate(exec, propertyName, slot))
        return true;
    return Base::getOwnPropertySlotByIndex(thisObject, exec, index, slot);
}

JSValue jsWorkerGlobalScopeSelf(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WorkerGlobalScope& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.self()));
    return result;
}


JSValue jsWorkerGlobalScopeLocation(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WorkerGlobalScope& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.location()));
    return result;
}


JSValue jsWorkerGlobalScopeOnerror(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WorkerGlobalScope& impl = castedThis->impl();
    if (EventListener* listener = impl.onerror()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsWorkerGlobalScopeOnoffline(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WorkerGlobalScope& impl = castedThis->impl();
    if (EventListener* listener = impl.onoffline()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsWorkerGlobalScopeOnonline(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WorkerGlobalScope& impl = castedThis->impl();
    if (EventListener* listener = impl.ononline()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(&impl))
                return jsFunction;
        }
    }
    return jsNull();
}


JSValue jsWorkerGlobalScopeNavigator(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WorkerGlobalScope& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.navigator()));
    return result;
}


#if ENABLE(BLOB)
JSValue jsWorkerGlobalScopeWebkitURLConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSDOMURL::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(WEB_SOCKETS)
JSValue jsWorkerGlobalScopeWebSocketConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    if (!RuntimeEnabledFeatures::sharedFeatures().webSocketEnabled())
        return jsUndefined();
    return JSWebSocket::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(CHANNEL_MESSAGING)
JSValue jsWorkerGlobalScopeMessageChannelConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSMessageChannel::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

JSValue jsWorkerGlobalScopeMessageEventConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSMessageEvent::getConstructor(exec->vm(), castedThis->globalObject());
}


JSValue jsWorkerGlobalScopeBlobConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSBlob::getConstructor(exec->vm(), castedThis->globalObject());
}


#if ENABLE(BLOB)
JSValue jsWorkerGlobalScopeFileReaderConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSFileReader::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(BLOB)
JSValue jsWorkerGlobalScopeFileReaderSyncConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSFileReaderSync::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(BLOB)
JSValue jsWorkerGlobalScopeURLConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSDOMURL::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

JSValue jsWorkerGlobalScopeEventSourceConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSEventSource::getConstructor(exec->vm(), castedThis->globalObject());
}


#if ENABLE(WORKERS)
JSValue jsWorkerGlobalScopeWorkerGlobalScopeConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSWorkerGlobalScope::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(WORKERS)
JSValue jsWorkerGlobalScopeWorkerLocationConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSWorkerLocation::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

JSValue jsWorkerGlobalScopeXMLHttpRequestConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSXMLHttpRequest::getConstructor(exec->vm(), castedThis->globalObject());
}


#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeWebkitIndexedDB(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WorkerGlobalScope& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(WorkerGlobalScopeIndexedDatabase::indexedDB(&impl)));
    return result;
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeWebkitIDBCursorConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBCursor::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeWebkitIDBDatabaseConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBDatabase::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeWebkitIDBFactoryConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBFactory::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeWebkitIDBIndexConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBIndex::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeWebkitIDBKeyRangeConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBKeyRange::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeWebkitIDBObjectStoreConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBObjectStore::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeWebkitIDBRequestConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBRequest::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeWebkitIDBTransactionConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBTransaction::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeIndexedDB(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WorkerGlobalScope& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(WorkerGlobalScopeIndexedDatabase::indexedDB(&impl)));
    return result;
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeIDBCursorConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBCursor::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeIDBCursorWithValueConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBCursorWithValue::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeIDBDatabaseConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBDatabase::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeIDBFactoryConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBFactory::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeIDBIndexConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBIndex::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeIDBKeyRangeConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBKeyRange::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeIDBObjectStoreConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBObjectStore::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeIDBOpenDBRequestConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBOpenDBRequest::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeIDBRequestConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBRequest::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeIDBTransactionConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBTransaction::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

#if ENABLE(INDEXED_DATABASE)
JSValue jsWorkerGlobalScopeIDBVersionChangeEventConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSIDBVersionChangeEvent::getConstructor(exec->vm(), castedThis->globalObject());
}

#endif

JSValue jsWorkerGlobalScopeConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWorkerGlobalScope* domObject = jsCast<JSWorkerGlobalScope*>(asObject(slotBase));
    return JSWorkerGlobalScope::getConstructor(exec->vm(), domObject->globalObject());
}

void JSWorkerGlobalScope::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSWorkerGlobalScope* thisObject = jsCast<JSWorkerGlobalScope*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSWorkerGlobalScope, Base>(exec, propertyName, value, getJSWorkerGlobalScopeTable(exec), thisObject, slot);
}

void setJSWorkerGlobalScopeSelf(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in object
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "self"), value);
}


void setJSWorkerGlobalScopeLocation(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in object
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "location"), value);
}


void setJSWorkerGlobalScopeOnerror(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(thisObject);
    WorkerGlobalScope& impl = castedThis->impl();
    impl.setOnerror(createJSErrorHandler(exec, value, thisObject));
}


void setJSWorkerGlobalScopeOnoffline(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(thisObject);
    WorkerGlobalScope& impl = castedThis->impl();
    impl.setOnoffline(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSWorkerGlobalScopeOnonline(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    UNUSED_PARAM(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(thisObject);
    WorkerGlobalScope& impl = castedThis->impl();
    impl.setOnonline(createJSAttributeEventListener(exec, value, thisObject));
}


void setJSWorkerGlobalScopeNavigator(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in object
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "navigator"), value);
}


#if ENABLE(BLOB)
void setJSWorkerGlobalScopeWebkitURLConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "webkitURL"), value);
}

#endif

#if ENABLE(WEB_SOCKETS)
void setJSWorkerGlobalScopeWebSocketConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "WebSocket"), value);
}

#endif

#if ENABLE(CHANNEL_MESSAGING)
void setJSWorkerGlobalScopeMessageChannelConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "MessageChannel"), value);
}

#endif

void setJSWorkerGlobalScopeMessageEventConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "MessageEvent"), value);
}


void setJSWorkerGlobalScopeBlobConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "Blob"), value);
}


#if ENABLE(BLOB)
void setJSWorkerGlobalScopeFileReaderConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "FileReader"), value);
}

#endif

#if ENABLE(BLOB)
void setJSWorkerGlobalScopeFileReaderSyncConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "FileReaderSync"), value);
}

#endif

#if ENABLE(BLOB)
void setJSWorkerGlobalScopeURLConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "URL"), value);
}

#endif

void setJSWorkerGlobalScopeEventSourceConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "EventSource"), value);
}


#if ENABLE(WORKERS)
void setJSWorkerGlobalScopeWorkerGlobalScopeConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "WorkerGlobalScope"), value);
}

#endif

#if ENABLE(WORKERS)
void setJSWorkerGlobalScopeWorkerLocationConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "WorkerLocation"), value);
}

#endif

void setJSWorkerGlobalScopeXMLHttpRequestConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "XMLHttpRequest"), value);
}


#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeWebkitIDBCursorConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "webkitIDBCursor"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeWebkitIDBDatabaseConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "webkitIDBDatabase"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeWebkitIDBFactoryConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "webkitIDBFactory"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeWebkitIDBIndexConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "webkitIDBIndex"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeWebkitIDBKeyRangeConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "webkitIDBKeyRange"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeWebkitIDBObjectStoreConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "webkitIDBObjectStore"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeWebkitIDBRequestConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "webkitIDBRequest"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeWebkitIDBTransactionConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "webkitIDBTransaction"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeIDBCursorConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "IDBCursor"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeIDBCursorWithValueConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "IDBCursorWithValue"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeIDBDatabaseConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "IDBDatabase"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeIDBFactoryConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "IDBFactory"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeIDBIndexConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "IDBIndex"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeIDBKeyRangeConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "IDBKeyRange"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeIDBObjectStoreConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "IDBObjectStore"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeIDBOpenDBRequestConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "IDBOpenDBRequest"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeIDBRequestConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "IDBRequest"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeIDBTransactionConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "IDBTransaction"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSWorkerGlobalScopeIDBVersionChangeEventConstructor(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    // Shadowing a built-in constructor
    jsCast<JSWorkerGlobalScope*>(thisObject)->putDirect(exec->vm(), Identifier(exec, "IDBVersionChangeEvent"), value);
}

#endif

JSValue JSWorkerGlobalScope::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWorkerGlobalScopeConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsWorkerGlobalScopePrototypeFunctionClose(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWorkerGlobalScope::info()))
        return throwVMTypeError(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWorkerGlobalScope::info());
    WorkerGlobalScope& impl = castedThis->impl();
    impl.close();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWorkerGlobalScopePrototypeFunctionImportScripts(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWorkerGlobalScope::info()))
        return throwVMTypeError(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWorkerGlobalScope::info());
    return JSValue::encode(castedThis->importScripts(exec));
}

EncodedJSValue JSC_HOST_CALL jsWorkerGlobalScopePrototypeFunctionAddEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWorkerGlobalScope::info()))
        return throwVMTypeError(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWorkerGlobalScope::info());
    WorkerGlobalScope& impl = castedThis->impl();
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl.addEventListener(exec->argument(0).toString(exec)->value(exec), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWorkerGlobalScopePrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWorkerGlobalScope::info()))
        return throwVMTypeError(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWorkerGlobalScope::info());
    WorkerGlobalScope& impl = castedThis->impl();
    JSValue listener = exec->argument(1);
    if (!listener.isObject())
        return JSValue::encode(jsUndefined());
    impl.removeEventListener(exec->argument(0).toString(exec)->value(exec), JSEventListener::create(asObject(listener), castedThis, false, currentWorld(exec)).get(), exec->argument(2).toBoolean(exec));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWorkerGlobalScopePrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWorkerGlobalScope::info()))
        return throwVMTypeError(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWorkerGlobalScope::info());
    WorkerGlobalScope& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    Event* evt(toEvent(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl.dispatchEvent(evt, ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

#if ENABLE(SQL_DATABASE) && ENABLE(WORKERS)
EncodedJSValue JSC_HOST_CALL jsWorkerGlobalScopePrototypeFunctionOpenDatabase(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWorkerGlobalScope::info()))
        return throwVMTypeError(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWorkerGlobalScope::info());
    WorkerGlobalScope& impl = castedThis->impl();
    if (exec->argumentCount() < 4)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    const String& name(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& version(exec->argument(1).isEmpty() ? String() : exec->argument(1).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& displayName(exec->argument(2).isEmpty() ? String() : exec->argument(2).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    unsigned estimatedSize(toUInt32(exec, exec->argument(3), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    RefPtr<DatabaseCallback> creationCallback;
    if (!exec->argument(4).isUndefinedOrNull()) {
        if (!exec->uncheckedArgument(4).isFunction())
            return throwVMTypeError(exec);
        creationCallback = JSDatabaseCallback::create(asObject(exec->uncheckedArgument(4)), castedThis->globalObject());
    }

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(WorkerGlobalScopeWebDatabase::openDatabase(&impl, name, version, displayName, estimatedSize, creationCallback, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

#endif

#if ENABLE(SQL_DATABASE) && ENABLE(WORKERS)
EncodedJSValue JSC_HOST_CALL jsWorkerGlobalScopePrototypeFunctionOpenDatabaseSync(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWorkerGlobalScope::info()))
        return throwVMTypeError(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWorkerGlobalScope::info());
    WorkerGlobalScope& impl = castedThis->impl();
    if (exec->argumentCount() < 4)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    const String& name(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& version(exec->argument(1).isEmpty() ? String() : exec->argument(1).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& displayName(exec->argument(2).isEmpty() ? String() : exec->argument(2).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    unsigned estimatedSize(toUInt32(exec, exec->argument(3), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    RefPtr<DatabaseCallback> creationCallback;
    if (!exec->argument(4).isUndefinedOrNull()) {
        if (!exec->uncheckedArgument(4).isFunction())
            return throwVMTypeError(exec);
        creationCallback = JSDatabaseCallback::create(asObject(exec->uncheckedArgument(4)), castedThis->globalObject());
    }

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(WorkerGlobalScopeWebDatabase::openDatabaseSync(&impl, name, version, displayName, estimatedSize, creationCallback, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

#endif

EncodedJSValue JSC_HOST_CALL jsWorkerGlobalScopePrototypeFunctionSetTimeout(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWorkerGlobalScope::info()))
        return throwVMTypeError(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWorkerGlobalScope::info());
    return JSValue::encode(castedThis->setTimeout(exec));
}

EncodedJSValue JSC_HOST_CALL jsWorkerGlobalScopePrototypeFunctionClearTimeout(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWorkerGlobalScope::info()))
        return throwVMTypeError(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWorkerGlobalScope::info());
    WorkerGlobalScope& impl = castedThis->impl();
    int handle(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.clearTimeout(handle);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWorkerGlobalScopePrototypeFunctionSetInterval(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWorkerGlobalScope::info()))
        return throwVMTypeError(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWorkerGlobalScope::info());
    return JSValue::encode(castedThis->setInterval(exec));
}

EncodedJSValue JSC_HOST_CALL jsWorkerGlobalScopePrototypeFunctionClearInterval(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWorkerGlobalScope::info()))
        return throwVMTypeError(exec);
    JSWorkerGlobalScope* castedThis = jsCast<JSWorkerGlobalScope*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWorkerGlobalScope::info());
    WorkerGlobalScope& impl = castedThis->impl();
    int handle(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.clearInterval(handle);
    return JSValue::encode(jsUndefined());
}


}

#endif // ENABLE(WORKERS)
