/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SUBTLE_CRYPTO)

#include "JSSubtleCrypto.h"

#include "SubtleCrypto.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table for prototype */

static const HashTableValue JSSubtleCryptoPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSSubtleCryptoPrototypeTable = { 1, 0, JSSubtleCryptoPrototypeTableValues, 0 };
const ClassInfo JSSubtleCryptoPrototype::s_info = { "WebKitSubtleCryptoPrototype", &Base::s_info, &JSSubtleCryptoPrototypeTable, 0, CREATE_METHOD_TABLE(JSSubtleCryptoPrototype) };

JSObject* JSSubtleCryptoPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSubtleCrypto>(vm, globalObject);
}

const ClassInfo JSSubtleCrypto::s_info = { "WebKitSubtleCrypto", &Base::s_info, 0, 0 , CREATE_METHOD_TABLE(JSSubtleCrypto) };

JSSubtleCrypto::JSSubtleCrypto(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<SubtleCrypto> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSSubtleCrypto::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSSubtleCrypto::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSubtleCryptoPrototype::create(vm, globalObject, JSSubtleCryptoPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSSubtleCrypto::destroy(JSC::JSCell* cell)
{
    JSSubtleCrypto* thisObject = static_cast<JSSubtleCrypto*>(cell);
    thisObject->JSSubtleCrypto::~JSSubtleCrypto();
}

JSSubtleCrypto::~JSSubtleCrypto()
{
    releaseImplIfNotNull();
}

static inline bool isObservable(JSSubtleCrypto* jsSubtleCrypto)
{
    if (jsSubtleCrypto->hasCustomProperties())
        return true;
    return false;
}

bool JSSubtleCryptoOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSSubtleCrypto* jsSubtleCrypto = jsCast<JSSubtleCrypto*>(handle.get().asCell());
    if (!isObservable(jsSubtleCrypto))
        return false;
    Document* root = jsSubtleCrypto->impl().document();
    if (!root)
        return false;
    return visitor.containsOpaqueRoot(root);
}

void JSSubtleCryptoOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSSubtleCrypto* jsSubtleCrypto = jsCast<JSSubtleCrypto*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsSubtleCrypto->impl(), jsSubtleCrypto);
    jsSubtleCrypto->releaseImpl();
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7SubtleCrypto@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore12SubtleCryptoE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, SubtleCrypto* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSSubtleCrypto>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7SubtleCrypto@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore12SubtleCryptoE[2];
#if COMPILER(CLANG)
    // If this fails SubtleCrypto does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(SubtleCrypto), SubtleCrypto_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // SubtleCrypto has subclasses. If SubtleCrypto has subclasses that get passed
    // to toJS() we currently require SubtleCrypto you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<SubtleCrypto>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSSubtleCrypto>(exec, globalObject, impl);
}

SubtleCrypto* toSubtleCrypto(JSC::JSValue value)
{
    return value.inherits(JSSubtleCrypto::info()) ? &jsCast<JSSubtleCrypto*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(SUBTLE_CRYPTO)
