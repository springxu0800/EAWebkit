/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLOutputElement.h"

#include "DOMSettableTokenList.h"
#include "ExceptionCode.h"
#include "HTMLFormElement.h"
#include "HTMLNames.h"
#include "HTMLOutputElement.h"
#include "JSDOMBinding.h"
#include "JSDOMSettableTokenList.h"
#include "JSHTMLFormElement.h"
#include "JSNodeList.h"
#include "JSValidityState.h"
#include "NameNodeList.h"
#include "NodeList.h"
#include "URL.h"
#include "ValidityState.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSHTMLOutputElementTableValues[] =
{
    { "htmlFor", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLOutputElementHtmlFor), (intptr_t)0 },
    { "form", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLOutputElementForm), (intptr_t)0 },
    { "name", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLOutputElementName), (intptr_t)setJSHTMLOutputElementName },
    { "type", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLOutputElementType), (intptr_t)0 },
    { "defaultValue", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLOutputElementDefaultValue), (intptr_t)setJSHTMLOutputElementDefaultValue },
    { "value", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLOutputElementValue), (intptr_t)setJSHTMLOutputElementValue },
    { "willValidate", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLOutputElementWillValidate), (intptr_t)0 },
    { "validity", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLOutputElementValidity), (intptr_t)0 },
    { "validationMessage", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLOutputElementValidationMessage), (intptr_t)0 },
    { "labels", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLOutputElementLabels), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLOutputElementConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLOutputElementTable = { 34, 31, JSHTMLOutputElementTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSHTMLOutputElementConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLOutputElementConstructorTable = { 1, 0, JSHTMLOutputElementConstructorTableValues, 0 };
const ClassInfo JSHTMLOutputElementConstructor::s_info = { "HTMLOutputElementConstructor", &Base::s_info, &JSHTMLOutputElementConstructorTable, 0, CREATE_METHOD_TABLE(JSHTMLOutputElementConstructor) };

JSHTMLOutputElementConstructor::JSHTMLOutputElementConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSHTMLOutputElementConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSHTMLOutputElementPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSHTMLOutputElementConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSHTMLOutputElementConstructor, JSDOMWrapper>(exec, JSHTMLOutputElementConstructorTable, jsCast<JSHTMLOutputElementConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSHTMLOutputElementPrototypeTableValues[] =
{
    { "checkValidity", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsHTMLOutputElementPrototypeFunctionCheckValidity), (intptr_t)0 },
    { "setCustomValidity", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsHTMLOutputElementPrototypeFunctionSetCustomValidity), (intptr_t)1 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLOutputElementPrototypeTable = { 4, 3, JSHTMLOutputElementPrototypeTableValues, 0 };
const ClassInfo JSHTMLOutputElementPrototype::s_info = { "HTMLOutputElementPrototype", &Base::s_info, &JSHTMLOutputElementPrototypeTable, 0, CREATE_METHOD_TABLE(JSHTMLOutputElementPrototype) };

JSObject* JSHTMLOutputElementPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLOutputElement>(vm, globalObject);
}

bool JSHTMLOutputElementPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSHTMLOutputElementPrototype* thisObject = jsCast<JSHTMLOutputElementPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSHTMLOutputElementPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSHTMLOutputElement::s_info = { "HTMLOutputElement", &Base::s_info, &JSHTMLOutputElementTable, 0 , CREATE_METHOD_TABLE(JSHTMLOutputElement) };

JSHTMLOutputElement::JSHTMLOutputElement(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<HTMLOutputElement> impl)
    : JSHTMLElement(structure, globalObject, impl)
{
}

void JSHTMLOutputElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSHTMLOutputElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLOutputElementPrototype::create(vm, globalObject, JSHTMLOutputElementPrototype::createStructure(vm, globalObject, JSHTMLElementPrototype::self(vm, globalObject)));
}

bool JSHTMLOutputElement::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSHTMLOutputElement* thisObject = jsCast<JSHTMLOutputElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSHTMLOutputElement, Base>(exec, JSHTMLOutputElementTable, thisObject, propertyName, slot);
}

JSValue jsHTMLOutputElementHtmlFor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLOutputElement& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.htmlFor()));
    return result;
}


JSValue jsHTMLOutputElementForm(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLOutputElement& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.form()));
    return result;
}


JSValue jsHTMLOutputElementName(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLOutputElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.getNameAttribute());
    return result;
}


JSValue jsHTMLOutputElementType(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLOutputElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.type());
    return result;
}


JSValue jsHTMLOutputElementDefaultValue(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLOutputElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.defaultValue());
    return result;
}


JSValue jsHTMLOutputElementValue(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLOutputElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.value());
    return result;
}


JSValue jsHTMLOutputElementWillValidate(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLOutputElement& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.willValidate());
    return result;
}


JSValue jsHTMLOutputElementValidity(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLOutputElement& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.validity()));
    return result;
}


JSValue jsHTMLOutputElementValidationMessage(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLOutputElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.validationMessage());
    return result;
}


JSValue jsHTMLOutputElementLabels(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLOutputElement& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.labels()));
    return result;
}


JSValue jsHTMLOutputElementConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLOutputElement* domObject = jsCast<JSHTMLOutputElement*>(asObject(slotBase));
    return JSHTMLOutputElement::getConstructor(exec->vm(), domObject->globalObject());
}

void JSHTMLOutputElement::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSHTMLOutputElement* thisObject = jsCast<JSHTMLOutputElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSHTMLOutputElement, Base>(exec, propertyName, value, JSHTMLOutputElementTable, thisObject, slot);
}

void setJSHTMLOutputElementName(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(thisObject);
    HTMLOutputElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::nameAttr, nativeValue);
}


void setJSHTMLOutputElementDefaultValue(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(thisObject);
    HTMLOutputElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setDefaultValue(nativeValue);
}


void setJSHTMLOutputElementValue(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(thisObject);
    HTMLOutputElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setValue(nativeValue);
}


JSValue JSHTMLOutputElement::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLOutputElementConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsHTMLOutputElementPrototypeFunctionCheckValidity(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSHTMLOutputElement::info()))
        return throwVMTypeError(exec);
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSHTMLOutputElement::info());
    HTMLOutputElement& impl = castedThis->impl();

    JSC::JSValue result = jsBoolean(impl.checkValidity());
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsHTMLOutputElementPrototypeFunctionSetCustomValidity(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSHTMLOutputElement::info()))
        return throwVMTypeError(exec);
    JSHTMLOutputElement* castedThis = jsCast<JSHTMLOutputElement*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSHTMLOutputElement::info());
    HTMLOutputElement& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    const String& error(valueToStringWithUndefinedOrNullCheck(exec, exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setCustomValidity(error);
    return JSValue::encode(jsUndefined());
}


}
