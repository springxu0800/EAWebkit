/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLQuoteElement.h"

#include "HTMLNames.h"
#include "HTMLQuoteElement.h"
#include "URL.h"
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSHTMLQuoteElementTableValues[] =
{
    { "cite", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLQuoteElementCite), (intptr_t)setJSHTMLQuoteElementCite },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLQuoteElementConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLQuoteElementTable = { 5, 3, JSHTMLQuoteElementTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSHTMLQuoteElementConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLQuoteElementConstructorTable = { 1, 0, JSHTMLQuoteElementConstructorTableValues, 0 };
const ClassInfo JSHTMLQuoteElementConstructor::s_info = { "HTMLQuoteElementConstructor", &Base::s_info, &JSHTMLQuoteElementConstructorTable, 0, CREATE_METHOD_TABLE(JSHTMLQuoteElementConstructor) };

JSHTMLQuoteElementConstructor::JSHTMLQuoteElementConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSHTMLQuoteElementConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSHTMLQuoteElementPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSHTMLQuoteElementConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSHTMLQuoteElementConstructor, JSDOMWrapper>(exec, JSHTMLQuoteElementConstructorTable, jsCast<JSHTMLQuoteElementConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSHTMLQuoteElementPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLQuoteElementPrototypeTable = { 1, 0, JSHTMLQuoteElementPrototypeTableValues, 0 };
const ClassInfo JSHTMLQuoteElementPrototype::s_info = { "HTMLQuoteElementPrototype", &Base::s_info, &JSHTMLQuoteElementPrototypeTable, 0, CREATE_METHOD_TABLE(JSHTMLQuoteElementPrototype) };

JSObject* JSHTMLQuoteElementPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLQuoteElement>(vm, globalObject);
}

const ClassInfo JSHTMLQuoteElement::s_info = { "HTMLQuoteElement", &Base::s_info, &JSHTMLQuoteElementTable, 0 , CREATE_METHOD_TABLE(JSHTMLQuoteElement) };

JSHTMLQuoteElement::JSHTMLQuoteElement(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<HTMLQuoteElement> impl)
    : JSHTMLElement(structure, globalObject, impl)
{
}

void JSHTMLQuoteElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSHTMLQuoteElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLQuoteElementPrototype::create(vm, globalObject, JSHTMLQuoteElementPrototype::createStructure(vm, globalObject, JSHTMLElementPrototype::self(vm, globalObject)));
}

bool JSHTMLQuoteElement::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSHTMLQuoteElement* thisObject = jsCast<JSHTMLQuoteElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSHTMLQuoteElement, Base>(exec, JSHTMLQuoteElementTable, thisObject, propertyName, slot);
}

JSValue jsHTMLQuoteElementCite(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLQuoteElement* castedThis = jsCast<JSHTMLQuoteElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLQuoteElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.getURLAttribute(WebCore::HTMLNames::citeAttr));
    return result;
}


JSValue jsHTMLQuoteElementConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLQuoteElement* domObject = jsCast<JSHTMLQuoteElement*>(asObject(slotBase));
    return JSHTMLQuoteElement::getConstructor(exec->vm(), domObject->globalObject());
}

void JSHTMLQuoteElement::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSHTMLQuoteElement* thisObject = jsCast<JSHTMLQuoteElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSHTMLQuoteElement, Base>(exec, propertyName, value, JSHTMLQuoteElementTable, thisObject, slot);
}

void setJSHTMLQuoteElementCite(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLQuoteElement* castedThis = jsCast<JSHTMLQuoteElement*>(thisObject);
    HTMLQuoteElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::citeAttr, nativeValue);
}


JSValue JSHTMLQuoteElement::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLQuoteElementConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}


}
