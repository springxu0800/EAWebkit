/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSStorageEvent.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSDictionary.h"
#include "JSStorage.h"
#include "Storage.h"
#include "StorageEvent.h"
#include "URL.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSStorageEventTableValues[] =
{
    { "key", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStorageEventKey), (intptr_t)0 },
    { "oldValue", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStorageEventOldValue), (intptr_t)0 },
    { "newValue", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStorageEventNewValue), (intptr_t)0 },
    { "url", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStorageEventUrl), (intptr_t)0 },
    { "storageArea", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStorageEventStorageArea), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsStorageEventConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSStorageEventTable = { 16, 15, JSStorageEventTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSStorageEventConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSStorageEventConstructorTable = { 1, 0, JSStorageEventConstructorTableValues, 0 };
EncodedJSValue JSC_HOST_CALL JSStorageEventConstructor::constructJSStorageEvent(ExecState* exec)
{
    JSStorageEventConstructor* jsConstructor = jsCast<JSStorageEventConstructor*>(exec->callee());

    ScriptExecutionContext* executionContext = jsConstructor->scriptExecutionContext();
    if (!executionContext)
        return throwVMError(exec, createReferenceError(exec, "Constructor associated execution context is unavailable"));

    AtomicString eventType = exec->argument(0).toString(exec)->value(exec);
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    StorageEventInit eventInit;

    JSValue initializerValue = exec->argument(1);
    if (!initializerValue.isUndefinedOrNull()) {
        // Given the above test, this will always yield an object.
        JSObject* initializerObject = initializerValue.toObject(exec);

        // Create the dictionary wrapper from the initializer object.
        JSDictionary dictionary(exec, initializerObject);

        // Attempt to fill in the EventInit.
        if (!fillStorageEventInit(eventInit, dictionary))
            return JSValue::encode(jsUndefined());
    }

    RefPtr<StorageEvent> event = StorageEvent::create(eventType, eventInit);
    return JSValue::encode(toJS(exec, jsConstructor->globalObject(), event.get()));
}

bool fillStorageEventInit(StorageEventInit& eventInit, JSDictionary& dictionary)
{
    if (!fillEventInit(eventInit, dictionary))
        return false;

    if (!dictionary.tryGetProperty("key", eventInit.key))
        return false;
    if (!dictionary.tryGetProperty("oldValue", eventInit.oldValue))
        return false;
    if (!dictionary.tryGetProperty("newValue", eventInit.newValue))
        return false;
    if (!dictionary.tryGetProperty("url", eventInit.url))
        return false;
    if (!dictionary.tryGetProperty("storageArea", eventInit.storageArea))
        return false;
    return true;
}

const ClassInfo JSStorageEventConstructor::s_info = { "StorageEventConstructor", &Base::s_info, &JSStorageEventConstructorTable, 0, CREATE_METHOD_TABLE(JSStorageEventConstructor) };

JSStorageEventConstructor::JSStorageEventConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSStorageEventConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSStorageEventPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontDelete | DontEnum);
}

bool JSStorageEventConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSStorageEventConstructor, JSDOMWrapper>(exec, JSStorageEventConstructorTable, jsCast<JSStorageEventConstructor*>(object), propertyName, slot);
}

ConstructType JSStorageEventConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSStorageEvent;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSStorageEventPrototypeTableValues[] =
{
    { "initStorageEvent", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsStorageEventPrototypeFunctionInitStorageEvent), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSStorageEventPrototypeTable = { 2, 1, JSStorageEventPrototypeTableValues, 0 };
const ClassInfo JSStorageEventPrototype::s_info = { "StorageEventPrototype", &Base::s_info, &JSStorageEventPrototypeTable, 0, CREATE_METHOD_TABLE(JSStorageEventPrototype) };

JSObject* JSStorageEventPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSStorageEvent>(vm, globalObject);
}

bool JSStorageEventPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSStorageEventPrototype* thisObject = jsCast<JSStorageEventPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSStorageEventPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSStorageEvent::s_info = { "StorageEvent", &Base::s_info, &JSStorageEventTable, 0 , CREATE_METHOD_TABLE(JSStorageEvent) };

JSStorageEvent::JSStorageEvent(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<StorageEvent> impl)
    : JSEvent(structure, globalObject, impl)
{
}

void JSStorageEvent::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSStorageEvent::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSStorageEventPrototype::create(vm, globalObject, JSStorageEventPrototype::createStructure(vm, globalObject, JSEventPrototype::self(vm, globalObject)));
}

bool JSStorageEvent::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSStorageEvent* thisObject = jsCast<JSStorageEvent*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSStorageEvent, Base>(exec, JSStorageEventTable, thisObject, propertyName, slot);
}

JSValue jsStorageEventKey(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStorageEvent* castedThis = jsCast<JSStorageEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    StorageEvent& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.key());
    return result;
}


JSValue jsStorageEventOldValue(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStorageEvent* castedThis = jsCast<JSStorageEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    StorageEvent& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.oldValue());
    return result;
}


JSValue jsStorageEventNewValue(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStorageEvent* castedThis = jsCast<JSStorageEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    StorageEvent& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.newValue());
    return result;
}


JSValue jsStorageEventUrl(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStorageEvent* castedThis = jsCast<JSStorageEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    StorageEvent& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.url());
    return result;
}


JSValue jsStorageEventStorageArea(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStorageEvent* castedThis = jsCast<JSStorageEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    StorageEvent& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.storageArea()));
    return result;
}


JSValue jsStorageEventConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSStorageEvent* domObject = jsCast<JSStorageEvent*>(asObject(slotBase));
    return JSStorageEvent::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSStorageEvent::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSStorageEventConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsStorageEventPrototypeFunctionInitStorageEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSStorageEvent::info()))
        return throwVMTypeError(exec);
    JSStorageEvent* castedThis = jsCast<JSStorageEvent*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSStorageEvent::info());
    StorageEvent& impl = castedThis->impl();
    const String& typeArg(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool canBubbleArg(exec->argument(1).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool cancelableArg(exec->argument(2).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& keyArg(exec->argument(3).isEmpty() ? String() : exec->argument(3).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& oldValueArg(valueToStringWithNullCheck(exec, exec->argument(4)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& newValueArg(valueToStringWithNullCheck(exec, exec->argument(5)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& urlArg(exec->argument(6).isEmpty() ? String() : exec->argument(6).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    Storage* storageAreaArg(toStorage(exec->argument(7)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.initStorageEvent(typeArg, canBubbleArg, cancelableArg, keyArg, oldValueArg, newValueArg, urlArg, storageAreaArg);
    return JSValue::encode(jsUndefined());
}


}
