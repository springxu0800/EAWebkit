/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_SOURCE)

#include "JSWebKitMediaSource.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSWebKitSourceBuffer.h"
#include "JSWebKitSourceBufferList.h"
#include "URL.h"
#include "WebKitMediaSource.h"
#include "WebKitSourceBuffer.h"
#include "WebKitSourceBufferList.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSWebKitMediaSourceTableValues[] =
{
    { "sourceBuffers", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitMediaSourceSourceBuffers), (intptr_t)0 },
    { "activeSourceBuffers", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitMediaSourceActiveSourceBuffers), (intptr_t)0 },
    { "duration", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitMediaSourceDuration), (intptr_t)setJSWebKitMediaSourceDuration },
    { "readyState", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitMediaSourceReadyState), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitMediaSourceConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWebKitMediaSourceTable = { 16, 15, JSWebKitMediaSourceTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSWebKitMediaSourceConstructorTableValues[] =
{
    { "isTypeSupported", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitMediaSourceConstructorFunctionIsTypeSupported), (intptr_t)1 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWebKitMediaSourceConstructorTable = { 1, 0, JSWebKitMediaSourceConstructorTableValues, 0 };
EncodedJSValue JSC_HOST_CALL JSWebKitMediaSourceConstructor::constructJSWebKitMediaSource(ExecState* exec)
{
    JSWebKitMediaSourceConstructor* castedThis = jsCast<JSWebKitMediaSourceConstructor*>(exec->callee());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (!context)
        return throwVMError(exec, createReferenceError(exec, "WebKitMediaSource constructor associated document is unavailable"));
    RefPtr<WebKitMediaSource> object = WebKitMediaSource::create(context);
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

const ClassInfo JSWebKitMediaSourceConstructor::s_info = { "WebKitMediaSourceConstructor", &Base::s_info, &JSWebKitMediaSourceConstructorTable, 0, CREATE_METHOD_TABLE(JSWebKitMediaSourceConstructor) };

JSWebKitMediaSourceConstructor::JSWebKitMediaSourceConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSWebKitMediaSourceConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSWebKitMediaSourcePrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSWebKitMediaSourceConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSWebKitMediaSourceConstructor, JSDOMWrapper>(exec, JSWebKitMediaSourceConstructorTable, jsCast<JSWebKitMediaSourceConstructor*>(object), propertyName, slot);
}

ConstructType JSWebKitMediaSourceConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSWebKitMediaSource;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSWebKitMediaSourcePrototypeTableValues[] =
{
    { "addSourceBuffer", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitMediaSourcePrototypeFunctionAddSourceBuffer), (intptr_t)1 },
    { "removeSourceBuffer", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitMediaSourcePrototypeFunctionRemoveSourceBuffer), (intptr_t)1 },
    { "endOfStream", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsWebKitMediaSourcePrototypeFunctionEndOfStream), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWebKitMediaSourcePrototypeTable = { 8, 7, JSWebKitMediaSourcePrototypeTableValues, 0 };
const ClassInfo JSWebKitMediaSourcePrototype::s_info = { "WebKitMediaSourcePrototype", &Base::s_info, &JSWebKitMediaSourcePrototypeTable, 0, CREATE_METHOD_TABLE(JSWebKitMediaSourcePrototype) };

JSObject* JSWebKitMediaSourcePrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebKitMediaSource>(vm, globalObject);
}

bool JSWebKitMediaSourcePrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSWebKitMediaSourcePrototype* thisObject = jsCast<JSWebKitMediaSourcePrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSWebKitMediaSourcePrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSWebKitMediaSource::s_info = { "WebKitMediaSource", &Base::s_info, &JSWebKitMediaSourceTable, 0 , CREATE_METHOD_TABLE(JSWebKitMediaSource) };

JSWebKitMediaSource::JSWebKitMediaSource(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<WebKitMediaSource> impl)
    : JSEventTarget(structure, globalObject, impl)
{
}

void JSWebKitMediaSource::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSWebKitMediaSource::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSWebKitMediaSourcePrototype::create(vm, globalObject, JSWebKitMediaSourcePrototype::createStructure(vm, globalObject, JSEventTargetPrototype::self(vm, globalObject)));
}

bool JSWebKitMediaSource::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSWebKitMediaSource* thisObject = jsCast<JSWebKitMediaSource*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSWebKitMediaSource, Base>(exec, JSWebKitMediaSourceTable, thisObject, propertyName, slot);
}

JSValue jsWebKitMediaSourceSourceBuffers(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWebKitMediaSource* castedThis = jsCast<JSWebKitMediaSource*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WebKitMediaSource& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.sourceBuffers()));
    return result;
}


JSValue jsWebKitMediaSourceActiveSourceBuffers(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWebKitMediaSource* castedThis = jsCast<JSWebKitMediaSource*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WebKitMediaSource& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.activeSourceBuffers()));
    return result;
}


JSValue jsWebKitMediaSourceDuration(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWebKitMediaSource* castedThis = jsCast<JSWebKitMediaSource*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WebKitMediaSource& impl = castedThis->impl();
    JSValue result = jsNumber(impl.duration());
    return result;
}


JSValue jsWebKitMediaSourceReadyState(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWebKitMediaSource* castedThis = jsCast<JSWebKitMediaSource*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WebKitMediaSource& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.readyState());
    return result;
}


JSValue jsWebKitMediaSourceConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWebKitMediaSource* domObject = jsCast<JSWebKitMediaSource*>(asObject(slotBase));
    return JSWebKitMediaSource::getConstructor(exec->vm(), domObject->globalObject());
}

void JSWebKitMediaSource::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSWebKitMediaSource* thisObject = jsCast<JSWebKitMediaSource*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSWebKitMediaSource, Base>(exec, propertyName, value, JSWebKitMediaSourceTable, thisObject, slot);
}

void setJSWebKitMediaSourceDuration(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSWebKitMediaSource* castedThis = jsCast<JSWebKitMediaSource*>(thisObject);
    WebKitMediaSource& impl = castedThis->impl();
    ExceptionCode ec = 0;
    double nativeValue(value.toNumber(exec));
    if (exec->hadException())
        return;
    impl.setDuration(nativeValue, ec);
    setDOMException(exec, ec);
}


JSValue JSWebKitMediaSource::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebKitMediaSourceConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsWebKitMediaSourcePrototypeFunctionAddSourceBuffer(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWebKitMediaSource::info()))
        return throwVMTypeError(exec);
    JSWebKitMediaSource* castedThis = jsCast<JSWebKitMediaSource*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebKitMediaSource::info());
    WebKitMediaSource& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    const String& type(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.addSourceBuffer(type, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsWebKitMediaSourcePrototypeFunctionRemoveSourceBuffer(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWebKitMediaSource::info()))
        return throwVMTypeError(exec);
    JSWebKitMediaSource* castedThis = jsCast<JSWebKitMediaSource*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebKitMediaSource::info());
    WebKitMediaSource& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    WebKitSourceBuffer* buffer(toWebKitSourceBuffer(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.removeSourceBuffer(buffer, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebKitMediaSourcePrototypeFunctionEndOfStream(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSWebKitMediaSource::info()))
        return throwVMTypeError(exec);
    JSWebKitMediaSource* castedThis = jsCast<JSWebKitMediaSource*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSWebKitMediaSource::info());
    WebKitMediaSource& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& error(argumentOrNull(exec, 0).isEmpty() ? String() : argumentOrNull(exec, 0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.endOfStream(error, ec);
    setDOMException(exec, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebKitMediaSourceConstructorFunctionIsTypeSupported(ExecState* exec)
{
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    const String& type(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(WebKitMediaSource::isTypeSupported(type));
    return JSValue::encode(result);
}

void JSWebKitMediaSource::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    JSWebKitMediaSource* thisObject = jsCast<JSWebKitMediaSource*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    COMPILE_ASSERT(StructureFlags & OverridesVisitChildren, OverridesVisitChildrenWithoutSettingFlag);
    ASSERT(thisObject->structure()->typeInfo().overridesVisitChildren());
    Base::visitChildren(thisObject, visitor);
    thisObject->impl().visitJSEventListeners(visitor);
}

static inline bool isObservable(JSWebKitMediaSource* jsWebKitMediaSource)
{
    if (jsWebKitMediaSource->hasCustomProperties())
        return true;
    if (jsWebKitMediaSource->impl().hasEventListeners())
        return true;
    return false;
}

bool JSWebKitMediaSourceOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSWebKitMediaSource* jsWebKitMediaSource = jsCast<JSWebKitMediaSource*>(handle.get().asCell());
    if (jsWebKitMediaSource->impl().hasPendingActivity())
        return true;
    if (jsWebKitMediaSource->impl().isFiringEventListeners())
        return true;
    if (!isObservable(jsWebKitMediaSource))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSWebKitMediaSourceOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSWebKitMediaSource* jsWebKitMediaSource = jsCast<JSWebKitMediaSource*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsWebKitMediaSource->impl(), jsWebKitMediaSource);
    jsWebKitMediaSource->releaseImpl();
}

WebKitMediaSource* toWebKitMediaSource(JSC::JSValue value)
{
    return value.inherits(JSWebKitMediaSource::info()) ? &jsCast<JSWebKitMediaSource*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(MEDIA_SOURCE)
