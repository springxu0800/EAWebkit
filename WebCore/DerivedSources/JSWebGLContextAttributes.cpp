/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBGL)

#include "JSWebGLContextAttributes.h"

#include "WebGLContextAttributes.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSWebGLContextAttributesTableValues[] =
{
    { "alpha", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLContextAttributesAlpha), (intptr_t)setJSWebGLContextAttributesAlpha },
    { "depth", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLContextAttributesDepth), (intptr_t)setJSWebGLContextAttributesDepth },
    { "stencil", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLContextAttributesStencil), (intptr_t)setJSWebGLContextAttributesStencil },
    { "antialias", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLContextAttributesAntialias), (intptr_t)setJSWebGLContextAttributesAntialias },
    { "premultipliedAlpha", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLContextAttributesPremultipliedAlpha), (intptr_t)setJSWebGLContextAttributesPremultipliedAlpha },
    { "preserveDrawingBuffer", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLContextAttributesPreserveDrawingBuffer), (intptr_t)setJSWebGLContextAttributesPreserveDrawingBuffer },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWebGLContextAttributesTable = { 16, 15, JSWebGLContextAttributesTableValues, 0 };
/* Hash table for prototype */

static const HashTableValue JSWebGLContextAttributesPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWebGLContextAttributesPrototypeTable = { 1, 0, JSWebGLContextAttributesPrototypeTableValues, 0 };
const ClassInfo JSWebGLContextAttributesPrototype::s_info = { "WebGLContextAttributesPrototype", &Base::s_info, &JSWebGLContextAttributesPrototypeTable, 0, CREATE_METHOD_TABLE(JSWebGLContextAttributesPrototype) };

JSObject* JSWebGLContextAttributesPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebGLContextAttributes>(vm, globalObject);
}

const ClassInfo JSWebGLContextAttributes::s_info = { "WebGLContextAttributes", &Base::s_info, &JSWebGLContextAttributesTable, 0 , CREATE_METHOD_TABLE(JSWebGLContextAttributes) };

JSWebGLContextAttributes::JSWebGLContextAttributes(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<WebGLContextAttributes> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSWebGLContextAttributes::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSWebGLContextAttributes::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSWebGLContextAttributesPrototype::create(vm, globalObject, JSWebGLContextAttributesPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSWebGLContextAttributes::destroy(JSC::JSCell* cell)
{
    JSWebGLContextAttributes* thisObject = static_cast<JSWebGLContextAttributes*>(cell);
    thisObject->JSWebGLContextAttributes::~JSWebGLContextAttributes();
}

JSWebGLContextAttributes::~JSWebGLContextAttributes()
{
    releaseImplIfNotNull();
}

bool JSWebGLContextAttributes::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSWebGLContextAttributes* thisObject = jsCast<JSWebGLContextAttributes*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSWebGLContextAttributes, Base>(exec, JSWebGLContextAttributesTable, thisObject, propertyName, slot);
}

JSValue jsWebGLContextAttributesAlpha(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWebGLContextAttributes* castedThis = jsCast<JSWebGLContextAttributes*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WebGLContextAttributes& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.alpha());
    return result;
}


JSValue jsWebGLContextAttributesDepth(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWebGLContextAttributes* castedThis = jsCast<JSWebGLContextAttributes*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WebGLContextAttributes& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.depth());
    return result;
}


JSValue jsWebGLContextAttributesStencil(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWebGLContextAttributes* castedThis = jsCast<JSWebGLContextAttributes*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WebGLContextAttributes& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.stencil());
    return result;
}


JSValue jsWebGLContextAttributesAntialias(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWebGLContextAttributes* castedThis = jsCast<JSWebGLContextAttributes*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WebGLContextAttributes& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.antialias());
    return result;
}


JSValue jsWebGLContextAttributesPremultipliedAlpha(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWebGLContextAttributes* castedThis = jsCast<JSWebGLContextAttributes*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WebGLContextAttributes& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.premultipliedAlpha());
    return result;
}


JSValue jsWebGLContextAttributesPreserveDrawingBuffer(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSWebGLContextAttributes* castedThis = jsCast<JSWebGLContextAttributes*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    WebGLContextAttributes& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.preserveDrawingBuffer());
    return result;
}


void JSWebGLContextAttributes::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSWebGLContextAttributes* thisObject = jsCast<JSWebGLContextAttributes*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSWebGLContextAttributes, Base>(exec, propertyName, value, JSWebGLContextAttributesTable, thisObject, slot);
}

void setJSWebGLContextAttributesAlpha(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSWebGLContextAttributes* castedThis = jsCast<JSWebGLContextAttributes*>(thisObject);
    WebGLContextAttributes& impl = castedThis->impl();
    bool nativeValue(value.toBoolean(exec));
    if (exec->hadException())
        return;
    impl.setAlpha(nativeValue);
}


void setJSWebGLContextAttributesDepth(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSWebGLContextAttributes* castedThis = jsCast<JSWebGLContextAttributes*>(thisObject);
    WebGLContextAttributes& impl = castedThis->impl();
    bool nativeValue(value.toBoolean(exec));
    if (exec->hadException())
        return;
    impl.setDepth(nativeValue);
}


void setJSWebGLContextAttributesStencil(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSWebGLContextAttributes* castedThis = jsCast<JSWebGLContextAttributes*>(thisObject);
    WebGLContextAttributes& impl = castedThis->impl();
    bool nativeValue(value.toBoolean(exec));
    if (exec->hadException())
        return;
    impl.setStencil(nativeValue);
}


void setJSWebGLContextAttributesAntialias(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSWebGLContextAttributes* castedThis = jsCast<JSWebGLContextAttributes*>(thisObject);
    WebGLContextAttributes& impl = castedThis->impl();
    bool nativeValue(value.toBoolean(exec));
    if (exec->hadException())
        return;
    impl.setAntialias(nativeValue);
}


void setJSWebGLContextAttributesPremultipliedAlpha(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSWebGLContextAttributes* castedThis = jsCast<JSWebGLContextAttributes*>(thisObject);
    WebGLContextAttributes& impl = castedThis->impl();
    bool nativeValue(value.toBoolean(exec));
    if (exec->hadException())
        return;
    impl.setPremultipliedAlpha(nativeValue);
}


void setJSWebGLContextAttributesPreserveDrawingBuffer(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSWebGLContextAttributes* castedThis = jsCast<JSWebGLContextAttributes*>(thisObject);
    WebGLContextAttributes& impl = castedThis->impl();
    bool nativeValue(value.toBoolean(exec));
    if (exec->hadException())
        return;
    impl.setPreserveDrawingBuffer(nativeValue);
}


static inline bool isObservable(JSWebGLContextAttributes* jsWebGLContextAttributes)
{
    if (jsWebGLContextAttributes->hasCustomProperties())
        return true;
    return false;
}

bool JSWebGLContextAttributesOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSWebGLContextAttributes* jsWebGLContextAttributes = jsCast<JSWebGLContextAttributes*>(handle.get().asCell());
    if (!isObservable(jsWebGLContextAttributes))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSWebGLContextAttributesOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSWebGLContextAttributes* jsWebGLContextAttributes = jsCast<JSWebGLContextAttributes*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsWebGLContextAttributes->impl(), jsWebGLContextAttributes);
    jsWebGLContextAttributes->releaseImpl();
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7WebGLContextAttributes@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore22WebGLContextAttributesE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, WebGLContextAttributes* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSWebGLContextAttributes>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7WebGLContextAttributes@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore22WebGLContextAttributesE[2];
#if COMPILER(CLANG)
    // If this fails WebGLContextAttributes does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(WebGLContextAttributes), WebGLContextAttributes_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // WebGLContextAttributes has subclasses. If WebGLContextAttributes has subclasses that get passed
    // to toJS() we currently require WebGLContextAttributes you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<WebGLContextAttributes>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSWebGLContextAttributes>(exec, globalObject, impl);
}

WebGLContextAttributes* toWebGLContextAttributes(JSC::JSValue value)
{
    return value.inherits(JSWebGLContextAttributes::info()) ? &jsCast<JSWebGLContextAttributes*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(WEBGL)
