/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLObjectElement.h"

#include "Document.h"
#include "ExceptionCode.h"
#include "HTMLFormElement.h"
#include "HTMLNames.h"
#include "HTMLObjectElement.h"
#include "JSDOMBinding.h"
#include "JSDocument.h"
#include "JSHTMLFormElement.h"
#include "JSSVGDocument.h"
#include "JSValidityState.h"
#include "SVGDocument.h"
#include "URL.h"
#include "ValidityState.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSHTMLObjectElementTableValues[] =
{
    { "form", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementForm), (intptr_t)0 },
    { "code", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementCode), (intptr_t)setJSHTMLObjectElementCode },
    { "align", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementAlign), (intptr_t)setJSHTMLObjectElementAlign },
    { "archive", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementArchive), (intptr_t)setJSHTMLObjectElementArchive },
    { "border", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementBorder), (intptr_t)setJSHTMLObjectElementBorder },
    { "codeBase", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementCodeBase), (intptr_t)setJSHTMLObjectElementCodeBase },
    { "codeType", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementCodeType), (intptr_t)setJSHTMLObjectElementCodeType },
    { "data", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementData), (intptr_t)setJSHTMLObjectElementData },
    { "declare", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementDeclare), (intptr_t)setJSHTMLObjectElementDeclare },
    { "height", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementHeight), (intptr_t)setJSHTMLObjectElementHeight },
    { "hspace", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementHspace), (intptr_t)setJSHTMLObjectElementHspace },
    { "name", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementName), (intptr_t)setJSHTMLObjectElementName },
    { "standby", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementStandby), (intptr_t)setJSHTMLObjectElementStandby },
    { "type", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementType), (intptr_t)setJSHTMLObjectElementType },
    { "useMap", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementUseMap), (intptr_t)setJSHTMLObjectElementUseMap },
    { "vspace", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementVspace), (intptr_t)setJSHTMLObjectElementVspace },
    { "width", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementWidth), (intptr_t)setJSHTMLObjectElementWidth },
    { "willValidate", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementWillValidate), (intptr_t)0 },
    { "validity", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementValidity), (intptr_t)0 },
    { "validationMessage", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementValidationMessage), (intptr_t)0 },
    { "contentDocument", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementContentDocument), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLObjectElementConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLObjectElementTable = { 68, 63, JSHTMLObjectElementTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSHTMLObjectElementConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLObjectElementConstructorTable = { 1, 0, JSHTMLObjectElementConstructorTableValues, 0 };
const ClassInfo JSHTMLObjectElementConstructor::s_info = { "HTMLObjectElementConstructor", &Base::s_info, &JSHTMLObjectElementConstructorTable, 0, CREATE_METHOD_TABLE(JSHTMLObjectElementConstructor) };

JSHTMLObjectElementConstructor::JSHTMLObjectElementConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSHTMLObjectElementConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSHTMLObjectElementPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSHTMLObjectElementConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSHTMLObjectElementConstructor, JSDOMWrapper>(exec, JSHTMLObjectElementConstructorTable, jsCast<JSHTMLObjectElementConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSHTMLObjectElementPrototypeTableValues[] =
{
    { "checkValidity", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsHTMLObjectElementPrototypeFunctionCheckValidity), (intptr_t)0 },
    { "setCustomValidity", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsHTMLObjectElementPrototypeFunctionSetCustomValidity), (intptr_t)1 },
    { "getSVGDocument", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsHTMLObjectElementPrototypeFunctionGetSVGDocument), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSHTMLObjectElementPrototypeTable = { 9, 7, JSHTMLObjectElementPrototypeTableValues, 0 };
const ClassInfo JSHTMLObjectElementPrototype::s_info = { "HTMLObjectElementPrototype", &Base::s_info, &JSHTMLObjectElementPrototypeTable, 0, CREATE_METHOD_TABLE(JSHTMLObjectElementPrototype) };

JSObject* JSHTMLObjectElementPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLObjectElement>(vm, globalObject);
}

bool JSHTMLObjectElementPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSHTMLObjectElementPrototype* thisObject = jsCast<JSHTMLObjectElementPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSHTMLObjectElementPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSHTMLObjectElement::s_info = { "HTMLObjectElement", &Base::s_info, &JSHTMLObjectElementTable, 0 , CREATE_METHOD_TABLE(JSHTMLObjectElement) };

JSHTMLObjectElement::JSHTMLObjectElement(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<HTMLObjectElement> impl)
    : JSHTMLElement(structure, globalObject, impl)
{
}

void JSHTMLObjectElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSHTMLObjectElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLObjectElementPrototype::create(vm, globalObject, JSHTMLObjectElementPrototype::createStructure(vm, globalObject, JSHTMLElementPrototype::self(vm, globalObject)));
}

bool JSHTMLObjectElement::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSHTMLObjectElement* thisObject = jsCast<JSHTMLObjectElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    if (thisObject->getOwnPropertySlotDelegate(exec, propertyName, slot))
        return true;
    return getStaticValueSlot<JSHTMLObjectElement, Base>(exec, JSHTMLObjectElementTable, thisObject, propertyName, slot);
}

bool JSHTMLObjectElement::getOwnPropertySlotByIndex(JSObject* object, ExecState* exec, unsigned index, PropertySlot& slot)
{
    JSHTMLObjectElement* thisObject = jsCast<JSHTMLObjectElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    PropertyName propertyName = Identifier::from(exec, index);
    if (thisObject->getOwnPropertySlotDelegate(exec, propertyName, slot))
        return true;
    return Base::getOwnPropertySlotByIndex(thisObject, exec, index, slot);
}

JSValue jsHTMLObjectElementForm(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.form()));
    return result;
}


JSValue jsHTMLObjectElementCode(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::codeAttr));
    return result;
}


JSValue jsHTMLObjectElementAlign(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::alignAttr));
    return result;
}


JSValue jsHTMLObjectElementArchive(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::archiveAttr));
    return result;
}


JSValue jsHTMLObjectElementBorder(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::borderAttr));
    return result;
}


JSValue jsHTMLObjectElementCodeBase(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::codebaseAttr));
    return result;
}


JSValue jsHTMLObjectElementCodeType(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::codetypeAttr));
    return result;
}


JSValue jsHTMLObjectElementData(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.getURLAttribute(WebCore::HTMLNames::dataAttr));
    return result;
}


JSValue jsHTMLObjectElementDeclare(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.fastHasAttribute(WebCore::HTMLNames::declareAttr));
    return result;
}


JSValue jsHTMLObjectElementHeight(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::heightAttr));
    return result;
}


JSValue jsHTMLObjectElementHspace(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsNumber(impl.getIntegralAttribute(WebCore::HTMLNames::hspaceAttr));
    return result;
}


JSValue jsHTMLObjectElementName(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.getNameAttribute());
    return result;
}


JSValue jsHTMLObjectElementStandby(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::standbyAttr));
    return result;
}


JSValue jsHTMLObjectElementType(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::typeAttr));
    return result;
}


JSValue jsHTMLObjectElementUseMap(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::usemapAttr));
    return result;
}


JSValue jsHTMLObjectElementVspace(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsNumber(impl.getIntegralAttribute(WebCore::HTMLNames::vspaceAttr));
    return result;
}


JSValue jsHTMLObjectElementWidth(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.fastGetAttribute(WebCore::HTMLNames::widthAttr));
    return result;
}


JSValue jsHTMLObjectElementWillValidate(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.willValidate());
    return result;
}


JSValue jsHTMLObjectElementValidity(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.validity()));
    return result;
}


JSValue jsHTMLObjectElementValidationMessage(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    HTMLObjectElement& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.validationMessage());
    return result;
}


JSValue jsHTMLObjectElementContentDocument(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    HTMLObjectElement& impl = castedThis->impl();
    return shouldAllowAccessToNode(exec, impl.contentDocument()) ? toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.contentDocument())) : jsNull();
}


JSValue jsHTMLObjectElementConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSHTMLObjectElement* domObject = jsCast<JSHTMLObjectElement*>(asObject(slotBase));
    return JSHTMLObjectElement::getConstructor(exec->vm(), domObject->globalObject());
}

void JSHTMLObjectElement::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSHTMLObjectElement* thisObject = jsCast<JSHTMLObjectElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    if (thisObject->putDelegate(exec, propertyName, value, slot))
        return;
    lookupPut<JSHTMLObjectElement, Base>(exec, propertyName, value, JSHTMLObjectElementTable, thisObject, slot);
}

void JSHTMLObjectElement::putByIndex(JSCell* cell, ExecState* exec, unsigned index, JSValue value, bool shouldThrow)
{
    JSHTMLObjectElement* thisObject = jsCast<JSHTMLObjectElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    PropertyName propertyName = Identifier::from(exec, index);
    PutPropertySlot slot(shouldThrow);
    if (thisObject->putDelegate(exec, propertyName, value, slot))
        return;
    Base::putByIndex(cell, exec, index, value, shouldThrow);
}

void setJSHTMLObjectElementCode(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::codeAttr, nativeValue);
}


void setJSHTMLObjectElementAlign(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::alignAttr, nativeValue);
}


void setJSHTMLObjectElementArchive(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::archiveAttr, nativeValue);
}


void setJSHTMLObjectElementBorder(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::borderAttr, nativeValue);
}


void setJSHTMLObjectElementCodeBase(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::codebaseAttr, nativeValue);
}


void setJSHTMLObjectElementCodeType(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::codetypeAttr, nativeValue);
}


void setJSHTMLObjectElementData(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::dataAttr, nativeValue);
}


void setJSHTMLObjectElementDeclare(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    bool nativeValue(value.toBoolean(exec));
    if (exec->hadException())
        return;
    impl.setBooleanAttribute(WebCore::HTMLNames::declareAttr, nativeValue);
}


void setJSHTMLObjectElementHeight(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::heightAttr, nativeValue);
}


void setJSHTMLObjectElementHspace(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    int nativeValue(toInt32(exec, value, NormalConversion));
    if (exec->hadException())
        return;
    impl.setIntegralAttribute(WebCore::HTMLNames::hspaceAttr, nativeValue);
}


void setJSHTMLObjectElementName(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::nameAttr, nativeValue);
}


void setJSHTMLObjectElementStandby(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::standbyAttr, nativeValue);
}


void setJSHTMLObjectElementType(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::typeAttr, nativeValue);
}


void setJSHTMLObjectElementUseMap(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::usemapAttr, nativeValue);
}


void setJSHTMLObjectElementVspace(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    int nativeValue(toInt32(exec, value, NormalConversion));
    if (exec->hadException())
        return;
    impl.setIntegralAttribute(WebCore::HTMLNames::vspaceAttr, nativeValue);
}


void setJSHTMLObjectElementWidth(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(thisObject);
    HTMLObjectElement& impl = castedThis->impl();
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setAttribute(WebCore::HTMLNames::widthAttr, nativeValue);
}


JSValue JSHTMLObjectElement::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLObjectElementConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsHTMLObjectElementPrototypeFunctionCheckValidity(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSHTMLObjectElement::info()))
        return throwVMTypeError(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSHTMLObjectElement::info());
    HTMLObjectElement& impl = castedThis->impl();

    JSC::JSValue result = jsBoolean(impl.checkValidity());
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsHTMLObjectElementPrototypeFunctionSetCustomValidity(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSHTMLObjectElement::info()))
        return throwVMTypeError(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSHTMLObjectElement::info());
    HTMLObjectElement& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    const String& error(valueToStringWithUndefinedOrNullCheck(exec, exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setCustomValidity(error);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsHTMLObjectElementPrototypeFunctionGetSVGDocument(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSHTMLObjectElement::info()))
        return throwVMTypeError(exec);
    JSHTMLObjectElement* castedThis = jsCast<JSHTMLObjectElement*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSHTMLObjectElement::info());
    HTMLObjectElement& impl = castedThis->impl();
    ExceptionCode ec = 0;
    if (!shouldAllowAccessToNode(exec, impl.getSVGDocument(ec)))
        return JSValue::encode(jsNull());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getSVGDocument(ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}


}
