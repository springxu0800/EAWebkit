/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSVideoStreamTrack.h"

#include "Dictionary.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "VideoStreamTrack.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSVideoStreamTrackTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVideoStreamTrackConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSVideoStreamTrackTable = { 2, 1, JSVideoStreamTrackTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSVideoStreamTrackConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSVideoStreamTrackConstructorTable = { 1, 0, JSVideoStreamTrackConstructorTableValues, 0 };
EncodedJSValue JSC_HOST_CALL JSVideoStreamTrackConstructor::constructJSVideoStreamTrack(ExecState* exec)
{
    JSVideoStreamTrackConstructor* castedThis = jsCast<JSVideoStreamTrackConstructor*>(exec->callee());
    Dictionary videoConstraints(exec, exec->argument(0));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (!context)
        return throwVMError(exec, createReferenceError(exec, "VideoStreamTrack constructor associated document is unavailable"));
    RefPtr<VideoStreamTrack> object = VideoStreamTrack::create(context, videoConstraints);
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}

const ClassInfo JSVideoStreamTrackConstructor::s_info = { "VideoStreamTrackConstructor", &Base::s_info, &JSVideoStreamTrackConstructorTable, 0, CREATE_METHOD_TABLE(JSVideoStreamTrackConstructor) };

JSVideoStreamTrackConstructor::JSVideoStreamTrackConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSVideoStreamTrackConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSVideoStreamTrackPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSVideoStreamTrackConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSVideoStreamTrackConstructor, JSDOMWrapper>(exec, JSVideoStreamTrackConstructorTable, jsCast<JSVideoStreamTrackConstructor*>(object), propertyName, slot);
}

ConstructType JSVideoStreamTrackConstructor::getConstructData(JSCell*, ConstructData& constructData)
{
    constructData.native.function = constructJSVideoStreamTrack;
    return ConstructTypeHost;
}

/* Hash table for prototype */

static const HashTableValue JSVideoStreamTrackPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSVideoStreamTrackPrototypeTable = { 1, 0, JSVideoStreamTrackPrototypeTableValues, 0 };
const ClassInfo JSVideoStreamTrackPrototype::s_info = { "VideoStreamTrackPrototype", &Base::s_info, &JSVideoStreamTrackPrototypeTable, 0, CREATE_METHOD_TABLE(JSVideoStreamTrackPrototype) };

JSObject* JSVideoStreamTrackPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSVideoStreamTrack>(vm, globalObject);
}

const ClassInfo JSVideoStreamTrack::s_info = { "VideoStreamTrack", &Base::s_info, &JSVideoStreamTrackTable, 0 , CREATE_METHOD_TABLE(JSVideoStreamTrack) };

JSVideoStreamTrack::JSVideoStreamTrack(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<VideoStreamTrack> impl)
    : JSMediaStreamTrack(structure, globalObject, impl)
{
}

void JSVideoStreamTrack::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSVideoStreamTrack::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSVideoStreamTrackPrototype::create(vm, globalObject, JSVideoStreamTrackPrototype::createStructure(vm, globalObject, JSMediaStreamTrackPrototype::self(vm, globalObject)));
}

bool JSVideoStreamTrack::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSVideoStreamTrack* thisObject = jsCast<JSVideoStreamTrack*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSVideoStreamTrack, Base>(exec, JSVideoStreamTrackTable, thisObject, propertyName, slot);
}

JSValue jsVideoStreamTrackConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSVideoStreamTrack* domObject = jsCast<JSVideoStreamTrack*>(asObject(slotBase));
    return JSVideoStreamTrack::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSVideoStreamTrack::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSVideoStreamTrackConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

static inline bool isObservable(JSVideoStreamTrack* jsVideoStreamTrack)
{
    if (jsVideoStreamTrack->hasCustomProperties())
        return true;
    return false;
}

bool JSVideoStreamTrackOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSVideoStreamTrack* jsVideoStreamTrack = jsCast<JSVideoStreamTrack*>(handle.get().asCell());
    if (jsVideoStreamTrack->impl().hasPendingActivity())
        return true;
    if (jsVideoStreamTrack->impl().isFiringEventListeners())
        return true;
    if (!isObservable(jsVideoStreamTrack))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSVideoStreamTrackOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSVideoStreamTrack* jsVideoStreamTrack = jsCast<JSVideoStreamTrack*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsVideoStreamTrack->impl(), jsVideoStreamTrack);
    jsVideoStreamTrack->releaseImpl();
}


}

#endif // ENABLE(MEDIA_STREAM)
