/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSText.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSText.h"
#include "Text.h"
#include "URL.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSTextTableValues[] =
{
    { "wholeText", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextWholeText), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSTextTable = { 5, 3, JSTextTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSTextConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSTextConstructorTable = { 1, 0, JSTextConstructorTableValues, 0 };
const ClassInfo JSTextConstructor::s_info = { "TextConstructor", &Base::s_info, &JSTextConstructorTable, 0, CREATE_METHOD_TABLE(JSTextConstructor) };

JSTextConstructor::JSTextConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSTextConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSTextPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSTextConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSTextConstructor, JSDOMWrapper>(exec, JSTextConstructorTable, jsCast<JSTextConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSTextPrototypeTableValues[] =
{
    { "splitText", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsTextPrototypeFunctionSplitText), (intptr_t)0 },
    { "replaceWholeText", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsTextPrototypeFunctionReplaceWholeText), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSTextPrototypeTable = { 4, 3, JSTextPrototypeTableValues, 0 };
const ClassInfo JSTextPrototype::s_info = { "TextPrototype", &Base::s_info, &JSTextPrototypeTable, 0, CREATE_METHOD_TABLE(JSTextPrototype) };

JSObject* JSTextPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSText>(vm, globalObject);
}

bool JSTextPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSTextPrototype* thisObject = jsCast<JSTextPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSTextPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSText::s_info = { "Text", &Base::s_info, &JSTextTable, 0 , CREATE_METHOD_TABLE(JSText) };

JSText::JSText(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<Text> impl)
    : JSCharacterData(structure, globalObject, impl)
{
}

void JSText::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSText::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSTextPrototype::create(vm, globalObject, JSTextPrototype::createStructure(vm, globalObject, JSCharacterDataPrototype::self(vm, globalObject)));
}

bool JSText::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSText* thisObject = jsCast<JSText*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSText, Base>(exec, JSTextTable, thisObject, propertyName, slot);
}

JSValue jsTextWholeText(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSText* castedThis = jsCast<JSText*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Text& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.wholeText());
    return result;
}


JSValue jsTextConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSText* domObject = jsCast<JSText*>(asObject(slotBase));
    return JSText::getConstructor(exec->vm(), domObject->globalObject());
}

JSValue JSText::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSTextConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsTextPrototypeFunctionSplitText(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSText::info()))
        return throwVMTypeError(exec);
    JSText* castedThis = jsCast<JSText*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSText::info());
    Text& impl = castedThis->impl();
    ExceptionCode ec = 0;
    int offset(toUInt32(exec, exec->argument(0), NormalConversion));
    if (offset < 0) {
        setDOMException(exec, INDEX_SIZE_ERR);
        return JSValue::encode(jsUndefined());
    }
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.splitText(offset, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsTextPrototypeFunctionReplaceWholeText(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(JSText::info()))
        return throwVMTypeError(exec);
    JSText* castedThis = jsCast<JSText*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSText::info());
    Text& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& content(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.replaceWholeText(content, ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}


}
